{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flutter Matrix\u662f\u4ec0\u4e48","text":"<p>Flutter Matrix\u662f\u4e13\u95e8\u4e3aFlutter\u8bbe\u8ba1\u7684\u77e9\u9635\u5e93\uff0c\u6db5\u76d6\u4e86\u57fa\u672c\u77e9\u9635\u64cd\u4f5c\u3001\u6570\u5b66\u8fd0\u7b97\u3001\u7ebf\u6027\u4ee3\u6570\u3001\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u3001\u96c6\u5408\u6a21\u62df\u7b49\u65b9\u6cd5\uff0c\u540c\u65f6\u4e5f\u62d3\u5c55\u4e86\u590d\u6570\u8fd0\u7b97\u7b49\uff0c\u4e0d\u8fc7Flutter Matrix\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u7eafDart\u7ec8\u7aef\u4e0a\u3002 \u4e0e\u4e4b\u524d\u5199\u8fc7\u7684Matply\u76f8\u6bd4\uff0cFlutter Matrix\u8ffd\u6c42\u5168\u5e73\u53f0\u652f\u6301\u548c\u903b\u8f91\u6027\u3002</p> <p>\u4e0b\u4e00\u7bc7\uff1a\u77e9\u9635\u7684\u7c7b\u578b\u5b9a\u4e49\u548c\u6784\u5efa</p>"},{"location":"API/basement/","title":"\u57fa\u7840\u64cd\u4f5c","text":""},{"location":"API/basement/#registersubclassfromlistconstructor","title":"registerSubClassFromListConstructor","text":"<ul> <li>\u628a\u5b50\u7c7bType\u6ce8\u518c\u5230\u62bd\u8c61\u57fa\u7c7b\uff0cFromListConstructor\u662f\u6784\u9020\u51fd\u6570\uff0c\u5efa\u8bae\u4e3a\u5171\u4eab\u5217\u8868\u7684\u6784\u9020\u51fd\u6570  <pre><code>void registerSubClassFromListConstructor(Type, FromListConstructor)\n</code></pre></li> </ul>"},{"location":"API/basement/#test","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nclass SparseMatrix extends MatrixWrapper&lt;SparseMatrix&gt; {\n  SparseMatrix(List&lt;List&lt;num&gt;&gt; data, {int? known_row, int? known_column}) :\n        super(data, known_row: known_row, known_column: known_column);\n\n  SparseMatrix.fromList(List&lt;List&lt;double&gt;&gt; data, {int? known_row, int? known_column}) :\n        super.fromList(data, known_row: known_row, known_column: known_column);\n\n  SparseMatrix.buildBySparsity({\n    required double sparsity,\n    required int row,\n    required int column,\n  }) : super(\n    _generateSparseData(sparsity: sparsity, row: row, column: column),\n    known_row: row,\n    known_column: column,\n  );\n\n  static List&lt;List&lt;double&gt;&gt; _generateSparseData({\n    required double sparsity,\n    required int row,\n    required int column,\n  }) {\n    final rand = Random();\n    final total = row * column;\n    final onesCount = ((1 - sparsity) * total).round();\n\n    List&lt;int&gt; allIndices = List.generate(total, (i) =&gt; i);\n    allIndices.shuffle(rand);\n    Set&lt;int&gt; oneIndices = allIndices.take(onesCount).toSet();\n\n    return List.generate(row, (i) {\n      return List.generate(column, (j) {\n        int idx = i * column + j;\n        return oneIndices.contains(idx) ? 1.0 : 0.0;\n      });\n    });\n  }\n}\n\nmain(){\n  data_format = \"%2.0f\";\n  registerSubClassFromListConstructor(SparseMatrix, SparseMatrix.new);\n  var mt = MatrixBase.fill&lt;SparseMatrix&gt;(number: 0, row: 4, column: 5);\n  mt.visible();\n  SparseMatrix.buildBySparsity(sparsity: 0.8, row: 2, column: 5).visible();\n}\n</code></pre>"},{"location":"API/basement/#output","title":"output","text":"<pre><code>[\n [  0   0   0   0   0]\n [  0   0   0   0   0]\n [  0   0   0   0   0]\n [  0   0   0   0   0]\n]\n[\n [  0   0   0   0   1]\n [  0   1   0   0   0]\n]\n</code></pre>"},{"location":"API/basement/#fill","title":"fill","text":"<ul> <li>\u751f\u6210\u88abnumber\u586b\u5145\u7684\u77e9\u9635 <pre><code>static T fill&lt;T extends MatrixBase&lt;T&gt;&gt;({\n    required double number,\n    required int row,\n    required int column\n  })\n</code></pre></li> </ul>"},{"location":"API/basement/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixBase.fill&lt;Matrix&gt;(number: 3.14, row: 4, column: 5).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_1","title":"output","text":"<pre><code>[\n [ 3.14  3.14  3.14  3.14  3.14]\n [ 3.14  3.14  3.14  3.14  3.14]\n [ 3.14  3.14  3.14  3.14  3.14]\n [ 3.14  3.14  3.14  3.14  3.14]\n]\n</code></pre>"},{"location":"API/basement/#arrange","title":"arrange","text":"<ul> <li>\u4ecestart\u5f00\u59cb\u751f\u6210\u95f4\u96941\u7684\u77e9\u9635 <pre><code>static T arrange&lt;T extends MatrixBase&lt;T&gt;&gt;({\n    double start = 0.0,\n    required int row,\n    required int column\n  })\n</code></pre></li> </ul>"},{"location":"API/basement/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  MatrixBase.arrange&lt;Matrix&gt;(row: 3, column: 7, start: 0).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_2","title":"output","text":"<pre><code>[\n [  0   1   2   3   4   5   6]\n [  7   8   9  10  11  12  13]\n [ 14  15  16  17  18  19  20]\n]\n</code></pre>"},{"location":"API/basement/#linspace","title":"linspace","text":"<ul> <li>\u751f\u6210\u4ecestart\u5f00\u59cb\u5230end\u7ed3\u675f\u7684\u5747\u5300\u6570\u636e\uff0ckeep\u4e3atrue\u5219\u4fdd\u7559\u5230end\u7ed3\u675f</li> <li>\u5141\u8bb8start\u4e0d\u5927\u4e8eend <pre><code>static T linspace&lt;T extends MatrixBase&lt;T&gt;&gt;({\n    required double start,\n    required double end,\n    bool keep = true,\n    required int row,\n    required int column\n  })\n</code></pre></li> </ul>"},{"location":"API/basement/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixBase.linspace&lt;Matrix&gt;(start: 0, end: 10, row: 2, column: 5).visible();\n  MatrixBase.linspace&lt;Matrix&gt;(start: 0, end: 10, row: 2, column: 5, keep: false).visible();\n  MatrixBase.linspace&lt;Matrix&gt;(start: 0, end: -10, row: 2, column: 5).visible();\n  MatrixBase.linspace&lt;Matrix&gt;(start: 0, end: -10, row: 2, column: 5, keep: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_3","title":"output","text":"<pre><code>[\n [ 0.00000  1.11111  2.22222  3.33333  4.44444]\n [ 5.55556  6.66667  7.77778  8.88889 10.00000]\n]\n[\n [ 0.00000  1.00000  2.00000  3.00000  4.00000]\n [ 5.00000  6.00000  7.00000  8.00000  9.00000]\n]\n[\n [ 0.00000 -1.11111 -2.22222 -3.33333 -4.44444]\n [-5.55556 -6.66667 -7.77778 -8.88889 -10.00000]\n]\n[\n [ 0.00000 -1.00000 -2.00000 -3.00000 -4.00000]\n [-5.00000 -6.00000 -7.00000 -8.00000 -9.00000]\n]\n</code></pre>"},{"location":"API/basement/#deepcopy","title":"deepCopy","text":"<ul> <li>\u6df1\u62f7\u8d1d\u4e00\u4e2aMatrixBase\u5b50\u7c7b\u7684\u6570\u636e\u6765\u6784\u9020\u77e9\u9635</li> <li>\u4ec5\u4ec5\u662f\u62f7\u8d1d\u5c5e\u6027 <pre><code>static T deepCopy&lt;T extends MatrixBase&lt;T&gt;&gt;(MatrixBase other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = MatrixCollection([\n    [1, 2, 3],\n    [6, 6, 9]\n  ]);\n  mt.visible();\n  var mt1 = MatrixBase.deepCopy&lt;Matrix&gt;(mt);\n  mt1.visible();\n  print(mt1.runtimeType);\n}\n</code></pre>"},{"location":"API/basement/#output_4","title":"output","text":"<pre><code>[\n [  1   2   3]\n [  6   6   9]\n]\n[\n [  1   2   3]\n [  6   6   9]\n]\nMatrix\n</code></pre>"},{"location":"API/basement/#broadcast","title":"broadcast","text":"<ul> <li>\u4ece\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u5f00\u59cb\u5e7f\u64ad\u591a\u4e2a\u77e9\u9635\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u8981\u4e48\u76f8\u7b49\uff0c\u8981\u4e48\u5176\u4e2d\u4e00\u4e2a\u4e3a 1\uff0c\u5426\u5219\u5e7f\u64ad\u5931\u8d25\u3002 <pre><code>static List&lt;T&gt; broadcast&lt;T extends MatrixBase&lt;T&gt;&gt;(List&lt;T&gt; mts)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt1 = Matrix.fromList([\n    [1, 2, 3],\n    [4, 5, 6]]\n  );\n  var mt2 = Matrix.fromList([\n    [4],\n    [7]]\n  );\n  var mt3 = Matrix.fromList([\n    [5],\n    [6]\n  ]);\n  for (final t in MatrixBase.broadcast([mt1, mt2, mt3])){\n    t.visible();\n  }\n\n  var mt4 = Matrix.fromList([\n    [9, 3, 1]\n  ]);\n  var mt5 = Matrix.fromList([\n    [1, 2, 1]\n  ]);\n  MatrixBase.broadcast([mt1, mt4, mt5]).forEach((mt) =&gt; mt.visible());\n}\n</code></pre>"},{"location":"API/basement/#output_5","title":"output","text":"<pre><code>[\n [  1   2   3]\n [  4   5   6]\n]\n[\n [  4   4   4]\n [  7   7   7]\n]\n[\n [  5   5   5]\n [  6   6   6]\n]\n[\n [  1   2   3]\n [  4   5   6]\n]\n[\n [  9   3   1]\n [  9   3   1]\n]\n[\n [  1   2   1]\n [  1   2   1]\n]\n</code></pre>"},{"location":"API/basement/#_2","title":"\u57fa\u7840\u64cd\u4f5c","text":"<ul> <li>\u4ecestart\u5f00\u59cb\uff0c\u751f\u6210\u6b65\u957f\u4e3astep\u7684\u77e9\u9635 <pre><code>static T range&lt;T extends MatrixBase&lt;T&gt;&gt;({\n    double start = 0.0,\n    double step = 1.0,\n    required int row,\n    required int column\n  })\n</code></pre></li> </ul>"},{"location":"API/basement/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.1f\";\n  MatrixBase.range&lt;Matrix&gt;(row: 2, column: 6, start: 0, step: 0.5).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_6","title":"output","text":"<pre><code>[\n [ 0.0  0.5  1.0  1.5  2.0  2.5]\n [ 3.0  3.5  4.0  4.5  5.0  5.5]\n]\n</code></pre>"},{"location":"API/basement/#e","title":"E","text":"<ul> <li>\u751f\u6210n\u9636\u5355\u4f4d\u77e9\u9635 <pre><code>static T E&lt;T extends MatrixBase&lt;T&gt;&gt;({required int n})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.1f\";\n  MatrixBase.E&lt;Matrix&gt;(n : 3).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_7","title":"output","text":"<pre><code>[\n [ 1.0  0.0  0.0]\n [ 0.0  1.0  0.0]\n [ 0.0  0.0  1.0]\n]\n</code></pre>"},{"location":"API/basement/#elike","title":"ELike","text":"<ul> <li>\u751f\u6210\u7c7b\u5355\u4f4d\u77e9\u9635\uff0c\u53d6\u51b3\u4e8e\u884c\u548c\u5217\u4e2d\u7684\u6700\u5c0f\u503c <pre><code>static T ELike&lt;T extends MatrixBase&lt;T&gt;&gt;({required int row, required int column})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  MatrixBase.ELike&lt;Matrix&gt;(row: 3, column: 4).visible();\n  MatrixBase.ELike&lt;Matrix&gt;(row: 4, column: 3).visible();\n  MatrixBase.ELike&lt;Matrix&gt;(row: 3, column: 3).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_8","title":"output","text":"<pre><code>[\n [  1   0   0   0]\n [  0   1   0   0]\n [  0   0   1   0]\n]\n[\n [  1   0   0]\n [  0   1   0]\n [  0   0   1]\n [  0   0   0]\n]\n[\n [  1   0   0]\n [  0   1   0]\n [  0   0   1]\n]\n</code></pre>"},{"location":"API/basement/#align","title":"align","text":"<ul> <li>\u6839\u636e\u6700\u957f\u7684\u5217\u8868\u5bf9\u5176\u4ed6\u77ed\u6570\u636e\u8fdb\u884c\u5bf9\u9f50\u3002\u8be5\u65b9\u6cd5\u57fa\u4e8e\u539f\u6765\u7684\u4e8c\u4f4d\u6570\u7ec4\u8fdb\u884c\u62d3\u5c55\uff0c\u5e76\u975e\u590d\u5236\u518d\u64cd\u4f5c</li> <li>\u6a21\u5f0f0\uff1a\u4f7f\u7528number\u8865\u5145\u7f3a\u5931\u503c</li> <li>\u6a21\u5f0f1\uff1a\u6839\u636e\u6bcf\u884c\u7684\u539f\u6709\u6570\u636e\u8fdb\u884c\u91cd\u590d\u8865\u5168\uff0c\u4f8b\u5982\uff1a\u6700\u957f\u4e3a10\uff0c\u67d0\u884c\u53ea\u67094\u30012\u30016\uff0c\u5219\u8865\u5168\u4e3a4\u30012\u30016\u30014\u30012\u30016\u30014\u30012\u30016\u30014\uff0c\u5982\u679c\u8be5\u884c\u4e3a\u7a7a\uff0c\u5168\u7528number\u8986\u76d6</li> <li>\u5176\u4ed6\u6a21\u5f0f\uff1a\u6839\u636efunc\u81ea\u5df1\u8bbe\u8ba1\u89c4\u5219\uff0cfunc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u5f53\u524d\u884c\u5217\u8868\uff0c\u8bf7\u5904\u7406\u597d\u7a7a\u884c\u60c5\u51b5 <pre><code>static T align&lt;T extends MatrixBase&lt;T&gt;&gt;(List&lt;List&lt;double&gt;&gt; data,\n      {int mode = 0,\n      double number = double.nan,\n      double Function(List&lt;double&gt; list)? func})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_9","title":"test","text":"<pre><code>import 'package:collection/collection.dart';\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  final List&lt;List&lt;double&gt;&gt; data = [\n    [1],\n    [2, 0, 9, 7],\n    [],\n    [1, 1, 8, 3, 2],\n    [8, 2],\n    [9, 1, 2]\n  ];\n  final data2 = data.deepcopy;\n  final data3 = data.deepcopy;\n  MatrixBase.align&lt;Matrix&gt;(data, mode: 0, number: 1).visible();\n  data.definePrint();\n  MatrixBase.align&lt;Matrix&gt;(data2, mode: 1, number: double.nan).visible();\n  MatrixBase.align&lt;Matrix&gt;(data3, mode: 2, func: (l) =&gt; l.isEmpty ? double.nan : l.max).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_9","title":"output","text":"<pre><code>[\n [  1   1   1   1   1]\n [  2   0   9   7   1]\n [  1   1   1   1   1]\n [  1   1   8   3   2]\n [  8   2   1   1   1]\n [  9   1   2   1   1]\n]\n[\n [  1   1   1   1   1]\n [  2   0   9   7   1]\n [  1   1   1   1   1]\n [  1   1   8   3   2]\n [  8   2   1   1   1]\n [  9   1   2   1   1]\n]\n[\n [  1   1   1   1   1]\n [  2   0   9   7   2]\n [NaN NaN NaN NaN NaN]\n [  1   1   8   3   2]\n [  8   2   8   2   8]\n [  9   1   2   9   1]\n]\n[\n [  1   1   1   1   1]\n [  2   0   9   7   9]\n [NaN NaN NaN NaN NaN]\n [  1   1   8   3   2]\n [  8   2   8   8   8]\n [  9   1   2   9   9]\n]\n</code></pre>"},{"location":"API/basement/#string","title":"String","text":"<ul> <li>\u683c\u5f0f\u5316\u8f93\u51fa\u77e9\u9635\uff0cformat\u662f\u8f93\u51fa\u6570\u636e\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4f7f\u7528data_format\u4ee3\u66ff</li> <li>data_format\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u5141\u8bb8\u88ab\u4fee\u6539\u6765\u63a7\u5236\u8f93\u51fa</li> <li>color\u8868\u793a\u6570\u636e\u7684\u989c\u8272\uff0c\u662f\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 <pre><code>String toString({String? format, String color = '#ffd700'})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.1f\";\n  final mt = Matrix.fromList([\n    [4, 1, 0, 9],\n    [0, 9, 2, 6],\n    [6, 4, 3, 2]\n  ]);\n  print(mt.toString(color: '#0532ff'));\n  print(mt.toString(format: '%2.0f', color: '#00ffa6'));\n  print(mt.toString(color: '#ff0000'));\n}\n</code></pre>"},{"location":"API/basement/#output_10","title":"output","text":""},{"location":"API/basement/#visible","title":"visible","text":"<ul> <li>\u5305\u88c5\u4e86toString\u7684\u529f\u80fd\u5e76\u4e14\u6dfb\u52a0\u4e86\u989d\u5916\u5b57\u7b26\u6253\u5370\u529f\u80fd</li> <li>\u5feb\u901f\u67e5\u770b\u77e9\u9635 <pre><code>void visible({\n    String? format,\n    String color = '#ffd700',\n    String? start_point,\n    String? end_point\n})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.1f\";\n  final mt = Matrix.fromList([\n    [4, 1, 0, 9],\n    [0, 9, 2, 6],\n    [6, 4, 3, 2]\n  ]);\n  mt.visible(\n      start_point: \"-------------------Matrix-------------------\",\n      end_point: \"--------------------------------------------\"\n  );\n}\n</code></pre>"},{"location":"API/basement/#output_11","title":"output","text":"<pre><code>-------------------Matrix-------------------\n[\n [ 4.0  1.0  0.0  9.0]\n [ 0.0  9.0  2.0  6.0]\n [ 6.0  4.0  3.0  2.0]\n]\n--------------------------------------------\n</code></pre>"},{"location":"API/basement/#row_","title":"row_","text":"<ul> <li>\u83b7\u53d6\u67d0\u884c\u7684\u590d\u5236\u6570\u636e <pre><code>List&lt;double&gt; row_(int index)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  final mt = Matrix.fromList([\n    [4, 1, 0, 9],\n    [0, 9, 2, 6],\n    [6, 4, 3, 2]\n  ]);\n  final r = mt.row_(2);\n  mt[2][2] = 13;\n  print(r);\n  print(mt[2]);\n}\n</code></pre>"},{"location":"API/basement/#output_12","title":"output","text":"<pre><code>[6.0, 4.0, 3.0, 2.0]\n[6.0, 4.0, 13.0, 2.0]\n</code></pre>"},{"location":"API/basement/#column_","title":"column_","text":"<ul> <li>\u83b7\u53d6\u67d0\u5217\u7684\u590d\u5236\u6570\u636e <pre><code>List&lt;double&gt; column_(int index) \n</code></pre></li> </ul>"},{"location":"API/basement/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  final mt = Matrix.fromList([\n    [4, 1, 0, 9],\n    [0, 9, 2, 6],\n    [6, 4, 3, 2]\n  ]);\n  final r = mt.column_(3);\n  print(r);\n}\n</code></pre>"},{"location":"API/basement/#output_13","title":"output","text":"<pre><code>[9.0, 6.0, 2.0]\n</code></pre>"},{"location":"API/basement/#isshared","title":"isShared","text":"<ul> <li>\u5224\u65ad\u4e24\u4e2a\u77e9\u9635\u662f\u4e0d\u662f\u5171\u4eab\u4e86\u540c\u4e00\u4e2a\u6570\u636e <pre><code>bool isShared(covariant MatrixBase other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_14","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  final List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 9, 2, 6],\n    [6, 4, 3, 2]\n  ];\n  final mt = Matrix.fromList(data);\n  final mc = MatrixCollection.fromList(data);\n  print(mt.isShared(mc));\n  mt[0][0] = 2;\n  mc.visible();\n}\n</code></pre>"},{"location":"API/basement/#output_14","title":"output","text":"<pre><code>true\n[\n [  2   1   0   9]\n [  0   9   2   6]\n [  6   4   3   2]\n]\n</code></pre>"},{"location":"API/basement/#setmask","title":"setMask","text":"<ul> <li>\u6839\u636e\u4f20\u5165\u503c\u51b3\u5b9a\u662f\u4e0d\u662f\u8981\u5c06\u77e9\u9635\u4e2d\u7684nan\u3001\u65e0\u7a77\u5927\u66ff\u6362 <pre><code>void setMask({double? nan_mask, double? inf_mask, double? nag_inf_mask})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_15","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%5.3f\";\n  final List&lt;List&lt;double&gt;&gt; data = [\n    [4, double.nan, 0, 9],\n    [0, 9, double.infinity, 6],\n    [6, 4, double.negativeInfinity, 2]\n  ];\n  final mt = Matrix.fromList(data)..visible();\n  mt..setMask(nan_mask: 1, inf_mask: 3, nag_inf_mask: 5)..visible(format: \"%2.0f\");\n}\n</code></pre>"},{"location":"API/basement/#output_15","title":"output","text":"<pre><code>[\n [    4.000       NaN     0.000     9.000]\n [    0.000     9.000  Infinity     6.000]\n [    6.000     4.000 -Infinity     2.000]\n]\n[\n [  4   1   0   9]\n [  0   9   3   6]\n [  6   4   5   2]\n]\n</code></pre>"},{"location":"API/basement/#contain","title":"contain","text":"<ul> <li>\u77e9\u9635\u4e2d\u662f\u5426\u5305\u542b\u67d0\u4e2a\u6570\u636e\uff08\u4e0d\u5305\u62ecdouble.nan\uff09 <pre><code>bool contain(double element)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_16","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  final List&lt;List&lt;double&gt;&gt; data = [\n    [4, double.nan, 0, 9],\n    [0, 9, double.infinity, 6],\n    [6, 4, double.negativeInfinity, 2]\n  ];\n  final mt = Matrix.fromList(data)..visible();\n  print(mt.contain(double.infinity));\n  print(mt.contain(double.negativeInfinity));\n  // \u6839\u636e IEEE 754 \u7684\u5b9a\u4e49\uff1aNaN \u4e0e\u4efb\u4f55\u503c\uff08\u5305\u62ec\u5b83\u81ea\u5df1\uff09\u8fdb\u884c\u76f8\u7b49\u6bd4\u8f83\u65f6\uff0c\u7ed3\u679c\u90fd\u662f false\u3002\n  print(mt.contain(double.nan));\n  print(mt.any((x) =&gt; x.isNaN));\n}\n</code></pre>"},{"location":"API/basement/#output_16","title":"output","text":"<pre><code>[\n [4.00000    NaN 0.00000 9.00000]\n [0.00000 9.00000 Infinity 6.00000]\n [6.00000 4.00000 -Infinity 2.00000]\n]\ntrue\ntrue\nfalse\ntrue\n</code></pre>"},{"location":"API/basement/#_3","title":"\u57fa\u7840\u64cd\u4f5c","text":"<ul> <li>\u5224\u65ad\u4e24\u4e2a\u540c\u7c7b\u77e9\u9635\u662f\u4e0d\u662f\u6570\u636e\u4e00\u6837\u6216\u8005\u77e9\u9635\u662f\u4e0d\u662f\u5168\u662f\u67d0\u4e2a\u6570\u636e</li> <li><code>==</code>\u8fd0\u7b97\u7b26\u4ec5\u53ef\u4ee5\u5bf9\u6bd4\u540c\u7c7b\u77e9\u9635 <pre><code>bool equalTo(Object other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_17","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var m = MatrixBase.fill&lt;Matrix&gt;(number: 2, row: 3, column: 5);\n  print(m.equalTo(2));\n  print(m.equalTo(MatrixBase.fill&lt;Matrix&gt;(number: 2, row: 3, column: 5)));\n}\n</code></pre>"},{"location":"API/basement/#output_17","title":"output","text":"<pre><code>true\ntrue\n</code></pre>"},{"location":"API/basement/#tolist","title":"toList","text":"<ul> <li>\u5c06\u77e9\u9635\u8f6c\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5217\u8868</li> <li>\u5176\u4e2d\u8f6c\u590d\u6570\u7684\u65f6\u5019\uff0c\u77e9\u9635\u5217\u5fc5\u987b\u4e3a2 <pre><code>List&lt;dynamic&gt; toList(Typed type)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_18","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\nimport 'package:flutter_matrix/unrelated_util.dart';\n\nmain(){\n  var m = Matrix.fromList([[-2, 3], [0, 1]]);\n  for (var t in Typed.values){\n    print(\"${t.name}, ${m.toList(t)}\");\n  }\n}\n</code></pre>"},{"location":"API/basement/#output_18","title":"output","text":"<pre><code>int8, [[-2, 3], [0, 1]]\nint16, [[-2, 3], [0, 1]]\nint32, [[-2, 3], [0, 1]]\nint64, [[-2, 3], [0, 1]]\nint, [[-2, 3], [0, 1]]\nfloat32, [[-2.0, 3.0], [0.0, 1.0]]\nfloat64, [[-2.0, 3.0], [0.0, 1.0]]\ndouble, [[-2.0, 3.0], [0.0, 1.0]]\nbool, [[true, true], [false, true]]\nuint8, [[254, 3], [0, 1]]\nuint16, [[65534, 3], [0, 1]]\nuint32, [[4294967294, 3], [0, 1]]\nuint64, [[-2, 3], [0, 1]]\ncomplex, [Complex(-2.0, 3.0), Complex(0.0, 1.0)]\n</code></pre>"},{"location":"API/basement/#append","title":"append","text":"<ul> <li>\u5411\u77e9\u9635\u4e2d\u6dfb\u52a0\u6570\u636e\uff0c\u8bbe\u8ba1\u4e4b\u521d\uff0c\u5c31\u5df2\u7ecf\u89c4\u5b9a\u77e9\u9635\u662f\u53ef\u589e\u51cf\u7684 <pre><code>void append(List&lt;double&gt; data, {bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_19","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var m = Matrix.fromList([[-2, 3], [0, 1]]);\n  m..append([3, 2], horizontal: true)..visible();\n  print(m.shape);\n  m..append([0, 0, 0], horizontal: false)..visible();\n  print(m.shape);\n}\n</code></pre>"},{"location":"API/basement/#output_19","title":"output","text":"<pre><code>[\n [ -2   3]\n [  0   1]\n [  3   2]\n]\n[3, 2]\n[\n [ -2   3   0]\n [  0   1   0]\n [  3   2   0]\n]\n[3, 3]\n</code></pre>"},{"location":"API/basement/#hassameshape","title":"hasSameShape","text":"<ul> <li>\u5224\u65ad\u662f\u4e0d\u662f\u76f8\u540c\u5f62\u72b6 <pre><code>bool hasSameShape(covariant MatrixBase other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_20","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var m = Matrix.fromList([[-2, 3], [0, 1]]);\n  print(m.hasSameShape(MatrixCollection([[-2, 3], [0, 1]])));\n  print(m.hasSameShape(MatrixCollection([[-2, 3, 1], [0, 5, 1]])));\n}\n</code></pre>"},{"location":"API/basement/#output_20","title":"output","text":"<pre><code>true\nfalse\n</code></pre>"},{"location":"API/basement/#size","title":"size","text":"<ul> <li>\u77e9\u9635\u6570\u636e\u91cf <pre><code>int get size\n</code></pre></li> </ul>"},{"location":"API/basement/#test_21","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  print(MatrixBase.arrange&lt;Matrix&gt;(row: 65, column: 23,).size);\n}\n</code></pre>"},{"location":"API/basement/#output_21","title":"output","text":"<pre><code>1495\n</code></pre>"},{"location":"API/basement/#flattened","title":"flattened","text":"<ul> <li>\u77e9\u9635\u6a2a\u5411\u5c55\u5e73\u4e3a\u4e00\u4e2a\u5411\u91cf <pre><code>List&lt;double&gt; get flattened\n</code></pre></li> </ul>"},{"location":"API/basement/#test_22","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  print(MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 3).flattened);\n}\n</code></pre>"},{"location":"API/basement/#output_22","title":"output","text":"<pre><code>[0.0, 1.0, 2.0, 3.0, 4.0, 5.0]\n</code></pre>"},{"location":"API/basement/#issquare","title":"isSquare","text":"<ul> <li>\u5224\u65ad\u77e9\u9635\u662f\u4e0d\u662f\u65b9\u9635 <pre><code>bool get isSquare\n</code></pre></li> </ul>"},{"location":"API/basement/#test_23","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  print(MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 3).isSquare);\n  print(MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 2).isSquare);\n}\n</code></pre>"},{"location":"API/basement/#output_23","title":"output","text":"<pre><code>false\ntrue\n</code></pre>"},{"location":"API/basement/#hashcode","title":"hashCode\u548c<code>==</code>","text":"<ul> <li><code>==</code>\u4ec5\u652f\u6301\u76f8\u540c\u7c7b\u5b9e\u4f8b\u7684\u6570\u636e\u6bd4\u8f83</li> <li>\u4e24\u4e2a\u5bf9\u8c61<code>==</code>\u4e3atrue\u7684\u65f6\u5019\uff0c\u54c8\u5e0c\u7801\u4e5f\u5fc5\u987b\u76f8\u540c</li> <li>\u53c2\u8003\uff1ahttps://api.dart.dev/dart-core/Object/hashCode.html <pre><code>int get hashCode\nbool operator ==(Object other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_24","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var t1 = MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 3);\n  var t2 = MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 3);\n  print(t1 == t2);\n  print(t1.hashCode == t2.hashCode);\n  final mp = {\n    t1 : 1,\n    t2 : 2\n  };\n  print(mp[t1]); \n}\n</code></pre>"},{"location":"API/basement/#output_24","title":"output","text":"<pre><code>true\ntrue\n2\n</code></pre>"},{"location":"API/basement/#_4","title":"<code>&gt;</code>\u3001<code>&gt;=</code>\u3001<code>&lt;</code>\u3001<code>&lt;=</code>","text":"<ul> <li>\u5bf9\u540c\u7c7b\u77e9\u9635\u5b9e\u4f8b\u4e4b\u524d\u8fdb\u884c\u6570\u636e\u6bd4\u8f83</li> <li>\u77e9\u9635\u548c\u6570\u636e\u6bd4\u8f83 <pre><code>bool operator &gt;(Object other)\nbool operator &gt;=(Object other)\nbool operator &lt;(Object other)\nbool operator &lt;=(Object other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_25","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  var t2 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]) + 0.001;\n  print(t1 &gt; -3);\n  print(t1 &gt;= -3);\n  print(t1 &lt;= t2);\n  print(t1 &lt; t2);\n}\n</code></pre>"},{"location":"API/basement/#output_25","title":"output","text":"<pre><code>false\ntrue\ntrue\ntrue \n</code></pre>"},{"location":"API/basement/#_5","title":"<code>[]</code>\u548c<code>[]=</code>","text":"<ul> <li>\u83b7\u53d6\u548c\u66ff\u6362\u67d0\u884c <pre><code>void operator []=(int index, List&lt;double&gt; value)\nList&lt;double&gt; operator [](int index)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_26","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  print(t1[1]);\n  print(identityHashCode(t1.self[1]));\n  t1[1] = [2, 2, 4, 2];\n  t1.visible();\n  print(identityHashCode(t1.self[1]));\n  t1.replaceRow(1, [2, 2, 2, 2]);\n  t1.visible();\n  print(identityHashCode(t1.self[1]));\n}\n</code></pre>"},{"location":"API/basement/#output_26","title":"output","text":"<pre><code>[0.0, 2.0, -3.0, 3.0]\n239251943\n[\n [  3   6   2   1]\n [  2   2   4   2]\n]\n67174965\n[\n [  3   6   2   1]\n [  2   2   2   2]\n]\n67174965\n</code></pre>"},{"location":"API/basement/#replacerow","title":"replaceRow","text":"<ul> <li>\u5bf9\u67d0\u884c\u7684\u503c\u8fdb\u884c\u66ff\u6362\u4e14\u4e0d\u6539\u53d8\u5217\u8868\u5730\u5740 <pre><code>void replaceRow(int index, List&lt;double&gt; value)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_27","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  print(t1[1]);\n  print(identityHashCode(t1.self[1]));\n  t1[1] = [2, 2, 4, 2];\n  t1.visible();\n  print(identityHashCode(t1.self[1]));\n  t1.replaceRow(1, [2, 2, 2, 2]);\n  t1.visible();\n  print(identityHashCode(t1.self[1]));\n}\n</code></pre>"},{"location":"API/basement/#output_27","title":"output","text":"<pre><code>[0.0, 2.0, -3.0, 3.0]\n239251943\n[\n [  3   6   2   1]\n [  2   2   4   2]\n]\n67174965\n[\n [  3   6   2   1]\n [  2   2   2   2]\n]\n67174965\n</code></pre>"},{"location":"API/basement/#deepcopy_1","title":"deepcopy","text":"<ul> <li>\u6df1\u62f7\u8d1d\u7c7b\u672c\u8eab\u6570\u636e\u6765\u521b\u5efa\u53e6\u4e00\u4e2a\u540c\u7c7b</li> <li>MatrixCollection\u4e0d\u4f1a\u88ab\u62f7\u8d1dbinds <pre><code>T get deepcopy\n</code></pre></li> </ul>"},{"location":"API/basement/#test_28","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = MatrixCollection.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  t1.setter('key', 'value');\n  final t2 = t1.deepcopy..visible();\n  print(t2.binds);\n}\n</code></pre>"},{"location":"API/basement/#output_28","title":"output","text":"<pre><code>[\n [  3   6   2   1]\n [  0   2  -3   3]\n]\n{}\n</code></pre>"},{"location":"API/basement/#concat","title":"concat","text":"<ul> <li>\u62fc\u63a5\u4e24\u4e2a\u77e9\u9635 <pre><code>T concat({required T other, bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_29","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  var t2 = MatrixBase.fill&lt;Matrix&gt;(number: 1, row: 2, column: 2);\n  var t3 = MatrixBase.fill&lt;Matrix&gt;(number: 1, row: 3, column: 4);\n  t1.concat(other: t2, horizontal: true).visible();\n  t1.concat(other: t3, horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_29","title":"output","text":"<pre><code>[\n [  3   6   2   1   1   1]\n [  0   2  -3   3   1   1]\n]\n[\n [  3   6   2   1]\n [  0   2  -3   3]\n [  1   1   1   1]\n [  1   1   1   1]\n [  1   1   1   1]\n]\n</code></pre>"},{"location":"API/basement/#reshape","title":"reshape","text":"<ul> <li>\u5bf9\u77e9\u9635\u91cd\u5851\u5f62\u72b6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u524d\u540e\u5f62\u72b6\u7684\u5c3a\u5bf8\u4e00\u6837 <pre><code>T reshape({required int row, required int column})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_30","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  t1.reshape(row: 1, column: 8).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_30","title":"output","text":"<pre><code>[\n [  3   6   2   1   0   2  -3   3]\n]\n</code></pre>"},{"location":"API/basement/#resize","title":"resize","text":"<ul> <li>\u91cd\u5851\u77e9\u9635\u5c3a\u5bf8\uff0c\u5982\u679c\u5c3a\u5bf8\u53d8\u5c0f\uff0c\u5219\u53bb\u9664\u591a\u4f59\u6570\u636e\uff1b\u5982\u679c\u5c3a\u5bf8\u53d8\u5927\uff0c\u5219\u4f7f\u7528number\u8fdb\u884c\u8865\u5145 <pre><code>T resize({required int row, required int column, double number = 0.0})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_31","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  t1.resize(row: 3, column: 3, number: 2).visible();\n  t1.resize(row: 2, column: 2).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_31","title":"output","text":"<pre><code>[\n [  3   6   2]\n [  1   0   2]\n [ -3   3   0]\n]\n[\n [  3   6]\n [  2   1]\n]    \n</code></pre>"},{"location":"API/basement/#flatten","title":"flatten","text":"<ul> <li>\u6309\u7167\u65b9\u5411\u5c55\u5e73\u77e9\u9635\u4e3a\u5411\u91cf <pre><code>T flatten({bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_32","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3]\n  ]);\n  t1.flatten(horizontal: false).visible();\n  t1.flatten(horizontal: true).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_32","title":"output","text":"<pre><code>[\n [  3   0   6   2   2  -3   1   3]\n]\n[\n [  3   6   2   1   0   2  -3   3]\n]\n</code></pre>"},{"location":"API/basement/#slice","title":"slice","text":"<ul> <li>\u5207\u7247\u64cd\u4f5c\uff0c\u83b7\u53d6\u4ece start \u5230 end\uff08\u5305\u542b\uff09\u7684\u90e8\u5206</li> <li>\u5982\u679c end \u672a\u8bbe\u7f6e\uff0c\u5219\u4ece start \u5904\u622a\u53d6\u5269\u4f59\u90e8\u5206</li> <li>\u5141\u8bb8 start \u5927\u4e8e end\uff0c\u4ee5\u8fdb\u884c\u53cd\u5411\u622a\u53d6 <pre><code>T slice({required int start, int? end, bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_33","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3],\n    [9, 9, 8, 8],\n    [5, 4, 3, 1]\n  ]);\n  t1.slice(start: 2, horizontal: true).visible();\n  t1.slice(start: 2, horizontal: false).visible();\n  t1.slice(start: 0, end: 2, horizontal: false).visible();\n  t1.slice(start: 3, end: 1, horizontal: true).visible();\n  t1.slice(start: 3, end: 1, horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_33","title":"output","text":"<pre><code>[\n [  9   9   8   8]\n [  5   4   3   1]\n]\n[\n [  2   1]\n [ -3   3]\n [  8   8]\n [  3   1]\n]\n[\n [  3   6   2]\n [  0   2  -3]\n [  9   9   8]\n [  5   4   3]\n]\n[\n [  5   4   3   1]\n [  9   9   8   8]\n [  0   2  -3   3]\n]\n[\n [  1   2   6]\n [  3  -3   2]\n [  8   8   9]\n [  1   3   4]\n]\n</code></pre>"},{"location":"API/basement/#select","title":"select","text":"<ul> <li>\u9009\u62e9\u6307\u5b9a\u7684\u884c\u6216\u5217\u4ee5\u5f62\u6210\u65b0\u7684\u77e9\u9635</li> <li>\u9009\u62e9\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fdb\u884c</li> <li>\u53ef\u4ee5\u91cd\u590d <pre><code>T select({required List&lt;int&gt; target, bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_34","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3],\n    [9, 9, 8, 8],\n    [5, 4, 3, 1]\n  ]);\n  t1.select(target: [0, 0, 0, 1], horizontal: true).visible();\n  t1.select(target: [0, 0, 0, 1], horizontal: false).visible();\n  t1.select(target: [0, 2, 3, 1], horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_34","title":"output","text":"<pre><code>[\n [  3   6   2   1]\n [  3   6   2   1]\n [  3   6   2   1]\n [  0   2  -3   3]\n]\n[\n [  3   3   3   6]\n [  0   0   0   2]\n [  9   9   9   9]\n [  5   5   5   4]\n]\n[\n [  3   2   1   6]\n [  0  -3   3   2]\n [  9   8   8   9]\n [  5   3   1   4]\n]\n</code></pre>"},{"location":"API/basement/#drop","title":"drop","text":"<ul> <li>\u83b7\u53d6\u5220\u9664\u4e00\u4e9b\u7d22\u5f15\u540e\u5269\u4f59\u90e8\u5206\u7ec4\u6210\u7684\u77e9\u9635\u3002\u8f93\u5165\u662f\u4e00\u4e2a\u6574\u6570\u7684\u96c6\u5408  <pre><code>T drop({required Set&lt;int&gt; target, bool horizontal = true})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_35","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3],\n    [9, 9, 8, 8],\n    [5, 4, 3, 1]\n  ]);\n  t1.drop(target: {0, 3}, horizontal: true).visible();\n  t1.drop(target: {1, 3}, horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_35","title":"output","text":"<pre><code>[\n [  0   2  -3   3]\n [  9   9   8   8]\n]\n[\n [  3   2]\n [  0  -3]\n [  9   8]\n [  5   3]\n]\n</code></pre>"},{"location":"API/basement/#sort","title":"sort","text":"<ul> <li>\u5bf9\u77e9\u9635\u6570\u636e\u8fdb\u884c\u6392\u5e8f</li> <li>dim\u8868\u793a\u7ef4\u5ea6\u64cd\u4f5c\u65b9\u5f0f\uff0c0\u8868\u793a\u884c\u65b9\u5411\u5355\u72ec\u64cd\u4f5c\u30011\u8868\u793a\u5217\u65b9\u5411\u5355\u72ec\u64cd\u4f5c\u3001\u5176\u4ed6\u6574\u6570\u8868\u793a\u6574\u4f53\u64cd\u4f5c\uff0c\u5176\u4ed6\u5305\u542bdim\u53c2\u6570\u7684\u65b9\u6cd5\u539f\u7406\u540c\u4e0a</li> <li>reverse\u4e3atrue\u8868\u793a\u4ece\u5927\u5230\u5c0f\u6392\u5e8f <pre><code>void sort({bool reverse = false, int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/basement/#test_36","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%8.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3],\n    [9, double.infinity, 8, 8],\n    [5, 4, 3, double.negativeInfinity]\n  ]);\n  t1\n    ..visible()\n    ..sort(reverse: true, dim: 0)\n    ..visible()\n    ..sort(reverse: false, dim: 1)\n    ..visible()\n    ..sort(reverse: true, dim: -1)\n    ..visible()\n    ..sort(reverse: false, dim: 2)\n    ..visible();\n}\n</code></pre>"},{"location":"API/basement/#output_36","title":"output","text":"<pre><code>[\n [        3         6         2         1]\n [        0         2        -3         3]\n [        9  Infinity         8         8]\n [        5         4         3 -Infinity]\n]\n[\n [        6         3         2         1]\n [        3         2         0        -3]\n [ Infinity         9         8         8]\n [        5         4         3 -Infinity]\n]\n[\n [        3         2         0 -Infinity]\n [        5         3         2        -3]\n [        6         4         3         1]\n [ Infinity         9         8         8]\n]\n[\n [ Infinity         9         8         8]\n [        6         5         4         3]\n [        3         3         2         2]\n [        1         0        -3 -Infinity]\n]\n[\n [-Infinity        -3         0         1]\n [        2         2         3         3]\n [        3         4         5         6]\n [        8         8         9  Infinity]\n]\n</code></pre>"},{"location":"API/basement/#-","title":"<code>+</code> \u3001<code>-</code> \u3001<code>*</code> \u3001<code>/</code>","text":"<ul> <li>\u52a0\u51cf\u4e58\u9664\u7684\u5bf9\u8c61\u662f\u540c\u7c7b\u6216\u8005\u6570\u5b57</li> <li>\u5176\u4e2d<code>*</code>\u8868\u793a\u77e9\u9635\u7684Hadamard\u79ef <pre><code>T operator +(Object other)\nT operator -(Object other)\nT operator *(Object other)\nT operator /(Object other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_37","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%8.0f\";\n  var t1 = Matrix.fromList([\n    [3, 6, 2, 1],\n    [0, 2, -3, 3],\n    [9, double.infinity, 8, 8],\n    [5, 4, 3, double.negativeInfinity]\n  ]);\n  var t2 = MatrixBase.fill&lt;Matrix&gt;(number: 2, row: 4, column: 4);\n  t2[1][0] = 0;\n  print(t1 / 2);\n  print(t1 * t2);\n  print(t1 + 1);\n  print(t1 - 1);\n  print(t1 + t2);\n  print(t1 / t2);\n}\n</code></pre>"},{"location":"API/basement/#output_37","title":"output","text":"<pre><code>[\n [        2         3         1         1]\n [        0         1        -2         2]\n [        5  Infinity         4         4]\n [        3         2         2 -Infinity]\n]\n[\n [        6        12         4         2]\n [        0         4        -6         6]\n [       18  Infinity        16        16]\n [       10         8         6 -Infinity]\n]\n[\n [        4         7         3         2]\n [        1         3        -2         4]\n [       10  Infinity         9         9]\n [        6         5         4 -Infinity]\n]\n[\n [        2         5         1         0]\n [       -1         1        -4         2]\n [        8  Infinity         7         7]\n [        4         3         2 -Infinity]\n]\n[\n [        5         8         4         3]\n [        0         4        -1         5]\n [       11  Infinity        10        10]\n [        7         6         5 -Infinity]\n]\n[\n [        2         3         1         1]\n [      NaN         1        -2         2]\n [        5  Infinity         4         4]\n [        3         2         2 -Infinity]\n]\n</code></pre>"},{"location":"API/basement/#compare","title":"compare","text":"<ul> <li>\u9010\u4e00\u6bd4\u8f83\u4e24\u4e2a\u77e9\u9635\u7684\u5bf9\u5e94\u5143\u7d20</li> <li>\u5176\u4e2d 0 \u8868\u793a\u5927\u4e8e\uff0c1 \u8868\u793a\u5c0f\u4e8e\uff0c2 \u8868\u793a\u5927\u4e8e\u7b49\u4e8e\uff0c3 \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e\uff0c4 \u8868\u793a\u4e0d\u7b49\u4e8e\uff0c\u5176\u4ed6\u503c\u8868\u793a\u7b49\u4e8e</li> <li>\u8fd4\u56de\u6bcf\u4e2a\u6bd4\u8f83\u4f4d\u7f6e\u7684 bool \u503c\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e03\u5c14\u6570\u7ec4 <pre><code>List&lt;BoolList&gt; compare({required T other, int which = -1}) \n</code></pre></li> </ul>"},{"location":"API/basement/#test_38","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var t1 = Matrix.fromList([\n    [3, -2, 2, 1],\n    [0, 2, 13, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  var t2 = MatrixBase.fill&lt;Matrix&gt;(number: 2, row: 3, column: 4);\n  for (var i in List.generate(6, (_) =&gt; _)) {\n    print(t1.compare(other: t2, which: i));\n  }\n}\n</code></pre>"},{"location":"API/basement/#output_38","title":"output","text":"<pre><code>[[true, false, false, false], [false, false, true, true], [true, false, true, true]]\n[[false, true, false, true], [true, false, false, false], [false, true, false, false]]\n[[true, false, true, false], [false, true, true, true], [true, false, true, true]]\n[[false, true, true, true], [true, true, false, false], [false, true, false, false]]\n[[true, true, false, true], [true, false, true, true], [true, true, true, true]]\n[[false, false, true, false], [false, true, false, false], [false, false, false, false]]\n</code></pre>"},{"location":"API/basement/#_6","title":"<code>^</code>","text":"<ul> <li>\u77e9\u9635\u6570\u636e\u7684number\u5e42\u6b21\u65b9 <pre><code>T operator ^ (Object other)\n</code></pre></li> </ul>"},{"location":"API/basement/#test_39","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  (mt ^ 2).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_39","title":"output","text":"<p><pre><code>[\n [ 18.49000   9.00000  25.00000   0.25000]\n [ 25.00000  81.00000 100.00000  Infinity]\n [ 25.00000   9.00000   0.00000  Infinity]\n]\n</code></pre> \u4e0b\u4e00\u7bc7\uff1a\u8f85\u52a9</p>"},{"location":"API/complex/","title":"\u590d\u6570\u7c7b","text":"<p>\u5173\u4e8e\u590d\u6570\uff1ahttps://oi-wiki.org/math/complex/</p>"},{"location":"API/complex/#_2","title":"\u6784\u9020\u51fd\u6570","text":"<ul> <li>\u4f20\u5165\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u4e0d\u4f20\u9ed8\u8ba4\u4e3a0.0\uff0c\u865a\u6570\u4e00\u65e6\u521b\u5efa\u5c31\u4e0d\u53ef\u4ee5\u4fee\u6539\u3002 <pre><code>const Complex({this.real = 0.0, this.imaginary = 0.0})\n</code></pre></li> </ul>"},{"location":"API/complex/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex(real: 1.5, imaginary: 2.1);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output","title":"output","text":"<pre><code>Complex(1.5, 2.1)\n</code></pre>"},{"location":"API/complex/#complexfrompolar","title":"Complex.fromPolar","text":"<ul> <li>\u6839\u636e\u6a21\u548c\u8f90\u89d2\u6765\u521b\u5efa\u590d\u6570 <pre><code>factory Complex.fromPolar({required double r, required double theta})\n</code></pre></li> </ul>"},{"location":"API/complex/#test_1","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromPolar(r: 2, theta: pi / 4);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output_1","title":"output","text":"<pre><code>Complex(1.4142135623730951, 1.4142135623730951)\n</code></pre>"},{"location":"API/complex/#complexfromlist","title":"Complex.fromList","text":"<ul> <li>\u4f20\u5165\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u5217\u8868\u6765\u751f\u6210\u590d\u6570 <pre><code>factory Complex.fromList(List&lt;doubledata)\n</code></pre></li> </ul>"},{"location":"API/complex/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output_2","title":"output","text":"<pre><code>Complex(1.3, 1.2)\n</code></pre>"},{"location":"API/complex/#tostring","title":"toString","text":"<ul> <li>\u8f6ctoString\uff0cwhich\u51fd\u6570\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u590d\u6570\u5c55\u793a\u683c\u5f0f <pre><code>String toString({int which = 0})\n</code></pre></li> </ul>"},{"location":"API/complex/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  print(complex.toString(which: 0));\n  print(complex.toString(which: 1));\n  print(complex.toString(which: 2));\n  print(complex.toString(which: 3));\n  print(complex.toString(which: 4));\n  complex = Complex.fromList([-1.3, -1.2]);\n  print(complex.toString(which: 0));\n  print(complex.toString(which: 1));\n  print(complex.toString(which: 2));\n  print(complex.toString(which: 3));\n  print(complex.toString(which: 4));\n}\n</code></pre>"},{"location":"API/complex/#output_3","title":"output","text":"<pre><code>Complex(1.3, 1.2)\nComplex(1.3, 1.2j)\n1.3 + 1.2j\n(1.3, 1.2j)\n1.3+1.2j\nComplex(-1.3, -1.2)\nComplex(-1.3, -1.2j)\n-1.3 - 1.2j\n(-1.3, -1.2j)\n-1.3-1.2j\n</code></pre>"},{"location":"API/complex/#bool-operator-object-other","title":"bool operator == (Object other)","text":"<ul> <li>\u5224\u65ad\u4e24\u4e2a\u590d\u6570\u5b9e\u90e8\u548c\u865a\u90e8\u662f\u4e0d\u662f\u5404\u76f8\u540c <pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: 1.2);\n  print(complex1 == complex);\n}\n</code></pre></li> </ul>"},{"location":"API/complex/#output_4","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#-","title":"<code>+\u3001-\u3001*\u3001/</code>","text":"<ul> <li>\u590d\u6570\u7684\u8fd0\u7b97</li> </ul>"},{"location":"API/complex/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: -1.2);\n  print(complex + complex1);\n  print(complex - complex1);\n  print(complex * complex1);\n  print(complex / complex1);\n}\n</code></pre>"},{"location":"API/complex/#output_5","title":"output","text":"<pre><code>Complex(2.6, 0.0)\nComplex(0.0, 2.4)\nComplex(3.13, 0.0)\nComplex(0.07987220447284353, 0.9968051118210863)\n</code></pre>"},{"location":"API/complex/#complex-get-conjugate","title":"Complex get conjugate","text":"<ul> <li>\u83b7\u53d6\u5bf9\u5e94\u7684\u5171\u8f6d\u590d\u6570</li> </ul>"},{"location":"API/complex/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: -1.2);\n  print(complex.conjugate == complex1);\n}\n</code></pre>"},{"location":"API/complex/#output_6","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#bool-get-isnan","title":"bool get isNan","text":"<ul> <li>\u5224\u65ad\u5b9e\u90e8\u6216\u8005\u865a\u90e8\u542b\u6709NaN</li> </ul>"},{"location":"API/complex/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, double.nan]);\n  print(complex.isNan);\n}\n</code></pre>"},{"location":"API/complex/#output_7","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#double-get-mod","title":"double get mod","text":"<ul> <li>\u590d\u6570\u7684\u6a21</li> </ul>"},{"location":"API/complex/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.6]);\n  print(complex.mod);\n}\n</code></pre>"},{"location":"API/complex/#output_8","title":"output","text":"<pre><code>2.0\n</code></pre>"},{"location":"API/complex/#double-get-arg","title":"double get arg","text":"<ul> <li>\u590d\u6570\u7684\u8f90\u89d2</li> </ul>"},{"location":"API/complex/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.arg);\n}\n</code></pre>"},{"location":"API/complex/#output_9","title":"output","text":"<pre><code>0.7853981633974483\n</code></pre>"},{"location":"API/complex/#complex-get-exp","title":"Complex get exp","text":"<ul> <li>\u6b27\u62c9\u516c\u5f0f</li> </ul>"},{"location":"API/complex/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.exp);\n}\n</code></pre>"},{"location":"API/complex/#output_10","title":"output","text":"<pre><code>Complex(1.203070112722819, 3.0944787419716917)\n</code></pre>"},{"location":"API/complex/#complex-get-sqrt","title":"Complex get sqrt","text":"<ul> <li>\u5e73\u65b9\u6839</li> </ul>"},{"location":"API/complex/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.sqrt);\n}\n</code></pre>"},{"location":"API/complex/#output_11","title":"output","text":"<pre><code>Complex(1.20354814503777, 0.4985259646436252)\n</code></pre>"},{"location":"API/complex/#_3","title":"\u4e00\u4e9b\u4e09\u89d2\u51fd\u6570\u8fd0\u7b97","text":""},{"location":"API/complex/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.sin);\n  print(complex.cos);\n  print(complex.tan);\n}\n</code></pre>"},{"location":"API/complex/#output_12","title":"output","text":"<pre><code>Complex(1.6876017599704798, 0.546965027216471)\nComplex(0.6561050855063479, -1.4068769820012117)\nComplex(0.14015057356642455, 1.134177526770811)\n</code></pre>"},{"location":"API/complex/#deepcopy","title":"deepcopy","text":"<ul> <li>\u590d\u5236\u4e00\u4e2a\u590d\u6570</li> </ul>"},{"location":"API/complex/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.deepcopy == complex);\n  print(identical(complex.deepcopy, complex));\n}\n</code></pre>"},{"location":"API/complex/#output_13","title":"output","text":"<pre><code>true\nfalse\n</code></pre>"},{"location":"API/complex/#_4","title":"\u4e00\u4e9b\u8f6c\u6362\u65b9\u6cd5","text":""},{"location":"API/complex/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.toList);\n  print(complex.toFloat64x2);\n  print(complex.toPoint);\n}\n</code></pre>"},{"location":"API/complex/#output_14","title":"output","text":"<pre><code>[1.2, 1.2]\n[1.200000, 1.200000]\nPoint(1.2, 1.2)\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u5de5\u5177\u5305</p>"},{"location":"API/define/","title":"\u7c7b\u578b\u5b9a\u4e49\u548c\u6784\u5efa","text":"<p>\u77e9\u9635\u7c7b\u7531<code>MatrixBase</code>\u8fdb\u884c\u62bd\u8c61\u5230<code>MatrixWrapper</code>\u8fdb\u884c\u5305\u88c5\uff0c\u5e76\u4e14\u5c01\u88c5\u4e86<code>Matrix</code>\u548c<code>MatrxCollection</code>\u4e24\u4e2a\u5b50\u7c7b\u3002 \u77e9\u9635\u7684\u5e95\u5c42\u662f\u4e8c\u7ef4\u6d6e\u70b9\u6570\u7ec4\u7684extension\u65b9\u6cd5\uff0c\u8be5\u62d3\u5c55\u7c7b<code>MatrixExtension</code>\u5728<code>matrix_extension</code>\u6587\u4ef6\u5b9e\u73b0\uff0c\u540c\u65f6\uff0c\u4f60\u4e5f\u5b8c\u5168\u53ef\u4ee5\u64cd\u4f5c\u4e8c\u4f4d\u6d6e\u70b9\u6570\u7ec4\u7684\u62d3\u5c55\u65b9\u6cd5\u6765\u5b9e\u73b0\u77e9\u9635\u540c\u6837\u7684\u6548\u679c\u3002</p> <p>\u77e9\u9635\u7c7b\u7684\u5177\u4f53\u5b9e\u73b0\u8def\u7ebf\u56fe\u5982\u4e0b\uff1a</p> <pre><code>graph TB \n    ListExtension([MatrixExtension])\n    Basement[(MatrixBase)]\n    Wrapper[(MatrixWrapper)]\n    Geometry(MatrixGeometry)\n    Linalg(MatrixLinalg)\n    Math(MatrixMath)\n    MachineLearning(MatrixML)\n    Random(MatrixRandom)\n    Visualization(MatrixVisualization)\n    Matrix{{Matrix}}\n    MatrixCollection{{MatrixCollection}}\n\n    ListExtension --&gt;|Encapsulation| Basement --&gt;|Wrapper| Wrapper --&gt;|Inherit| Matrix;\n    Wrapper --&gt;|Inherit| MatrixCollection;\n\n    subgraph MixinModules\n        Geometry(MatrixGeometry)\n        Linalg(MatrixLinalg)\n        Math(MatrixMath)\n        MachineLearning(MatrixML)\n        Random(MatrixRandom)\n        Visualization(MatrixVisualization)\n    end\n\n    MixinModules --&gt;|Mixin| Basement\n</code></pre> <p>\u77e9\u9635\u7c7b - \u5185\u90e8\u4f7f\u7528<code>List&lt;List&lt;double&gt;&gt;</code>\uff08\u5c5e\u6027\u540dself)\u5b58\u50a8\u6838\u5fc3\u6570\u636e\uff0c\u9ed8\u8ba4\u6784\u9020\u65f6\uff0c\u4e0d\u8003\u8651\u662f\u5426\u4e3a\u7a7a\u3002 - \u5982\u679c\u4e00\u4e2a\u5f62\u72b6\uff08\u5c5e\u6027\u540dshape\uff09\u88ab\u4f20\u5165\uff0c\u5b83\u5c06\u57fa\u4e8e\u4f20\u5165\u7684\u5f62\u72b6\uff0c\u4f20\u5165\u65f6\u53ef\u4ee5\u6307\u5b9a\u5f62\u72b6\uff0c\u907f\u514d\u5f62\u72b6\u518d\u8ba1\u7b97\u3002 - \u4e3a\u4e86\u589e\u52a0\u7075\u6d3b\u6027\uff0c\u77e9\u9635\u4e2d\u7684\u5217\u8868\u5728\u521b\u5efa\u65f6\u9ed8\u8ba4\u90fd\u662f\u53ef\u589e\u957f\u7684\uff0c\u8fd9\u4e5f\u662f\u4e0d\u91c7\u7528<code>Float64List</code>\u8fd9\u7c7b\u6027\u80fd\u5217\u8868\u7684\u539f\u56e0\u3002 - \u5728\u5b9e\u73b0\u77e9\u9635\u65b9\u6cd5\u65f6\uff0c\u4e00\u5207\u4ece\u7b80\uff0c\u66f4\u591a\u7684\u8003\u8651\u662f\u903b\u8f91\u800c\u4e0d\u662f\u6027\u80fd\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u79bb\u8c31\u5230\u629b\u5f03\u6027\u80fd\u3002 - \u77e9\u9635\u7684\u4e00\u5207\u6570\u636e\u662fdouble\u7c7b\u578b\u3002</p>"},{"location":"API/define/#matrixbase","title":"MatrixBase","text":"<p>MatrixBase\u662f\u62bd\u8c61\u57fa\u7c7b\uff0c\u5176\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0_fromList\u65b9\u6cd5\uff08\u7ec6\u8282\u5982\u4e0b\uff09\u6765\u8fdb\u884c\u6784\u9020\uff0c\u8be5\u65b9\u6cd5\u8bbe\u8ba1\u7684\u76ee\u7684\u662f\u5c06\u4e00\u4e2a\u5217\u8868\u76f4\u63a5\u5305\u88c5\u4e3a\u77e9\u9635\uff0c\u800c\u4e0d\u662f\u62f7\u8d1d\u518d\u5305\u88c5\u3002 <pre><code>abstract class MatrixBase&lt;T extends MatrixBase&lt;T&gt;&gt; {\n  late List&lt;List&lt;double&gt;&gt; self;\n  late List&lt;int&gt; shape;\n\n  T _fromList(List&lt;List&lt;double&gt;&gt; data, {\n    int? known_row,\n    int? known_column\n  });  // \u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\n  ......\n}\n</code></pre></p>"},{"location":"API/define/#matrixwrapper","title":"MatrixWrapper","text":"<ul> <li>MatrixWrapper\u662f\u5bf9MatrixBase\u7684\u5c01\u88c5\uff0c\u4f7f\u5f97\u4efb\u4f55\u7c7b<code>ClassName</code>\u53ef\u4ee5\u4ece\u5176\u8fdb\u884c\u62d3\u5c55\uff0c\u4f46\u662f<code>ClassName</code>\u5fc5\u987b\u5728\u8c03\u7528\u524d\u4f7f\u7528<code>registerSubClassFromListConstructor</code>\u6ce8\u518c\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u80fd\u591f\u88abMatrixBase\u8bc6\u522b\u3002</li> <li>\u540c\u65f6\u5efa\u8baeMatrixWrapper\u7684\u4efb\u610f\u5b50\u7c7b\u90fd\u5b9e\u73b0\u57fa\u672c\u6784\u9020\u51fd\u6570\u548cfromList\u4e24\u79cd\u6784\u9020\u51fd\u6570\uff08\u524d\u8005\u8d1f\u8d23\u62f7\u8d1d\u539f\u5217\u8868\u6784\u9020\uff0c\u540e\u8005\u8d1f\u8d23\u5f15\u7528\u539f\u5217\u8868\u6784\u9020\uff09\uff0c\u540c\u65f6\u5fc5\u987b\u5b9e\u73b0_fromList\u65b9\u6cd5\u3002 <pre><code>class MatrixWrapper&lt;T extends MatrixBase&lt;T&gt;&gt; extends MatrixBase&lt;T&gt;\n    with\n        MatrixFunctools&lt;T&gt;,\n        MatrixGeometry&lt;T&gt;,\n        MatrixLinalg&lt;T&gt;,\n        MatrixMath&lt;T&gt;,\n        MatrixML&lt;T&gt;,\n        MatrixRandom&lt;T&gt;,\n        MatrixVisualization&lt;T&gt; {\n  MatrixWrapper(List&lt;List&lt;num&gt;&gt; data, {int? known_row, int? known_column}) {\n    super.self = MatrixExtension.constructor(data);\n    super.shape = [known_row ?? data.length, known_column ?? data[0].length];\n  }\n\n  MatrixWrapper.fromList(List&lt;List&lt;double&gt;&gt; data,\n      {int? known_row, int? known_column}) {\n    super.self = data;\n    super.shape = [known_row ?? data.length, known_column ?? data[0].length];\n  }\n\n  @override\n  T _fromList(List&lt;List&lt;double&gt;&gt; data, {int? known_row, int? known_column}) {\n    return MatrixWrapper&lt;T&gt;.fromList(data, known_row: known_row, known_column: known_column)\n    as T;\n  }\n}\n</code></pre></li> </ul>"},{"location":"API/define/#matrixmatrixcollection","title":"\u5173\u4e8e\u53ef\u5b9e\u4f8b\u5316\u5b50\u7c7bMatrix\u548cMatrixCollection","text":"<p>\u8fd9\u4e8c\u8005\u533a\u522b\u662f\uff0cMatrix\u4e0d\u6839\u636e\u5b9e\u4f8b\u5730\u5740\u8fdb\u884c\u54c8\u5e0c\uff0cMatrixCollection\u6bcf\u4e2a\u5b9e\u4f8b\u6709\u552f\u4e00\u54c8\u5e0c\u503c\uff1bMatrix\u5224\u65ad<code>==</code>\u662f\u5bf9\u6bd4\u540c\u7c7b\u5b9e\u4f8b\u76f8\u540c\u6570\u636e\uff0c\u800cMatrixCollection\u5219\u6839\u636e\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\u3002</p> <p>\u53e6\u5916\uff0cMatrixCollection\u9644\u5e26\u4e86\u4e00\u4e2abinds\u5c5e\u6027\uff0c\u53ef\u4ee5\u52a8\u6001\u7684\u589e\u51cf\u5c5e\u6027\u3002 <pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  final mt1 = MatrixBase.E&lt;Matrix&gt;(n: 4);\n  final mt2 = MatrixBase.E&lt;Matrix&gt;(n: 4);\n  var mp = {\n    mt1 : 1,\n    mt2 : 2\n  };\n  print(mp[mt1]);  // 2\n  print(mp[mt2]);  // 2\n  print(mt1 == mt2);  // true\n\n  final mt3 = MatrixBase.E&lt;MatrixCollection&gt;(n: 4);\n  final mt4 = MatrixBase.E&lt;MatrixCollection&gt;(n: 4);\n  var mp2 = {\n    mt3 : 3,\n    mt4 : 4\n  };\n  print(mp2[mt3]);  // 3\n  print(mp2[mt4]);  // 4\n  print(mt3 == mt4);  // false\n}\n</code></pre></p>"},{"location":"API/define/#matrix","title":"Matrix\u6784\u9020","text":""},{"location":"API/define/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  final List&lt;List&lt;double&gt;&gt; data = [\n    [4, 6, 2],\n    [6, 2, 0],\n    [1, 2, 3]\n  ];\n  var mt = Matrix(data);\n  mt.visible();\n  var mt1 = Matrix.fromList(data);\n  mt1.visible();\n  data[0][0] = 9;\n  mt.visible();\n  mt1.visible();\n}\n</code></pre>"},{"location":"API/define/#output","title":"output","text":"<pre><code>[\n [4.00000 6.00000 2.00000]\n [6.00000 2.00000 0.00000]\n [1.00000 2.00000 3.00000]\n]\n[\n [4.00000 6.00000 2.00000]\n [6.00000 2.00000 0.00000]\n [1.00000 2.00000 3.00000]\n]\n[\n [4.00000 6.00000 2.00000]\n [6.00000 2.00000 0.00000]\n [1.00000 2.00000 3.00000]\n]\n[\n [9.00000 6.00000 2.00000]\n [6.00000 2.00000 0.00000]\n [1.00000 2.00000 3.00000]\n]\n</code></pre>"},{"location":"API/define/#matrixextension","title":"MatrixExtension","text":"<p>MatrixExtension\u5bf9\u4e8c\u7ef4\u77e9\u9635\u7684\u62d3\u5c55\u5927\u90e8\u5206\u65b9\u6cd5\u4e0d\u4ec5\u9650\u4e8e\u6bcf\u884c\u7b49\u957f\u7684\u4e8c\u7ef4\u77e9\u9635\uff0c\u5bf9\u975e\u7b49\u957f\u4e5f\u9002\u7528</p>"},{"location":"API/define/#_2","title":"\u6ce8\u610f","text":"<p>\u540e\u7eed\u6587\u6863\u4ecd\u4ee5Matrix\u7c7b\u6d4b\u8bd5\u4e3a\u4e3b</p> <p>\u4e0b\u4e00\u7bc7\uff1a\u57fa\u7840\u64cd\u4f5c</p>"},{"location":"API/functools/","title":"\u51fd\u6570\u5de5\u5177","text":""},{"location":"API/functools/#any","title":"any","text":"<ul> <li>\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u636e <pre><code>Object any(bool Function(double) condition, {int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/functools/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var t1 = Matrix.fromList([\n    [3, double.nan, 2, 1],\n    [0, 2, 13, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  print(t1.any((x) =&gt; x &lt; 0, dim: 0));\n  print(t1.any((x) =&gt; x &lt; 0, dim: 1));\n  print(t1.any((x) =&gt; x &lt; 0, dim: 2));\n  print(t1.any((x) =&gt; x.isNaN,dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output","title":"output","text":"<pre><code>[false, false, true]\n[false, true, false, false]\ntrue\ntrue\n</code></pre>"},{"location":"API/functools/#all","title":"all","text":"<ul> <li>\u5224\u65ad\u6240\u6709\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u6761\u4ef6 <pre><code>Object all(bool Function(double) conditon, {int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var t1 = Matrix.fromList([\n    [3, double.nan, 2, 1],\n    [0, 2, 13, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  print(t1.all((x) =&gt; x &gt;= 0, dim: 0));\n  print(t1.all((x) =&gt; x &gt;= 0, dim: 1));\n  print(t1.all((x) =&gt; x &gt;= 0, dim: 2));\n  print(t1.all((x) =&gt; !x.isNaN,dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output_1","title":"output","text":"<pre><code>[false, true, false]\n[true, false, true, true]\nfalse\nfalse\n</code></pre>"},{"location":"API/functools/#reduce","title":"reduce","text":"<ul> <li>\u5bf9\u77e9\u9635\u8fdb\u884c\u7d2f\u79ef\u8fd0\u7b97\uff0c\u5143\u7d20\u7528\u4e8e\u521d\u59cb\u5316\u5e76\u8bb0\u5f55\u7d2f\u79ef\u503c\uff08\u5982\u679c\u8bbe\u7f6e\uff09 <pre><code>Object reduce(\n    double Function(double, double) condition, {\n    double? element, int dim = -1\n})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, 2, 1],\n    [0, 2, 13, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  print(t1.reduce((x, y) =&gt; x + y, dim: 0));\n  print(t1.reduce((x, y) =&gt; x * y, element: 1, dim: 1));\n  print(t1.reduce((x, y) =&gt; x + y, dim: 2));\n  t1..setMask(nag_inf_mask: 0)..visible()..reduce((x, y) =&gt; x + y, dim: 2);\n}\n</code></pre>"},{"location":"API/functools/#output_2","title":"output","text":"<pre><code>[4.0, 18.0, -Infinity]\n[0.0, Infinity, 208.0, 24.0]\n-Infinity\n[\n [  3  -2   2   1]\n [  0   2  13   3]\n [  9   0   8   8]\n]\n</code></pre>"},{"location":"API/functools/#replace","title":"replace","text":"<ul> <li>\u66ff\u6362\u6ee1\u8db3\u6761\u4ef6\u7684\u503c\u3002cope\u4e3a\u66ff\u6362\u65b9\u5f0f <pre><code>void replace(bool Function(double) condition,\n          {required double Function(double) cope})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, double.infinity, 1],\n    [0, 2, -1, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  t1..replace((x) =&gt; x.isInfinite, cope: (x) =&gt; 3)..visible();\n  t1..replace((x) =&gt; x &lt; 0, cope: (x) =&gt; x * x)..visible();\n}\n</code></pre>"},{"location":"API/functools/#output_3","title":"output","text":"<pre><code>[\n [  3  -2   3   1]\n [  0   2  -1   3]\n [  9   3   8   8]\n]\n[\n [  3   4   3   1]\n [  0   2   1   3]\n [  9   3   8   8]\n]\n</code></pre>"},{"location":"API/functools/#count","title":"count","text":"<ul> <li>\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684\u503c\u8ba1\u6570 <pre><code>Object count(bool Function(double) condition, {int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, double.infinity, 1],\n    [0, 2, -1, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  print(t1.count((x) =&gt; x &lt; 0, dim: 0));\n  print(t1.count((x) =&gt; x &lt; 0, dim: 1));\n  print(t1.count((x) =&gt; x &lt; 0, dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output_4","title":"output","text":"<pre><code>[1, 1, 1]\n[0, 2, 1, 0]\n3\n</code></pre>"},{"location":"API/functools/#_2","title":"\u5bf9\u6570\u636e\u81ea\u5b9a\u4e49\u6620\u5c04","text":"<ul> <li>customize <pre><code>T customize(double Function(double) condition)\n</code></pre></li> </ul>"},{"location":"API/functools/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%8.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, double.infinity, 1],\n    [0, 2, -1, 3],\n    [9, double.negativeInfinity, 8, 8]\n  ]);\n  t1.customize((x) =&gt; x &gt;= 0 ? x : x.isInfinite ? 2 : x * x).visible();\n}\n</code></pre>"},{"location":"API/functools/#output_5","title":"output","text":"<pre><code>[\n [        3         4  Infinity         1]\n [        0         2         1         3]\n [        9         2         8         8]\n]\n</code></pre>"},{"location":"API/functools/#confront","title":"confront","text":"<ul> <li>\u4e24\u4e2a\u77e9\u9635\u4e2d\u540c\u4e00\u4f4d\u7f6e\u7684\u6570\u636e\u7684\u6761\u4ef6\u6620\u5c04\u3002 <pre><code>T confront(double Function(double, double) condition, {required T other})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_6","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, double.infinity, 1],\n    [0, 2, -1, 3],\n    [9, -4, 8, 8]\n  ]);\n  var other = MatrixBase.fill&lt;Matrix&gt;(number: 2, row: 3, column: 4);\n  t1.confront((x, y) =&gt; min(x, y), other: other).visible();\n}\n</code></pre>"},{"location":"API/functools/#output_6","title":"output","text":"<pre><code>[\n [  2  -2   2   1]\n [  0   2  -1   2]\n [  2  -4   2   2]\n]\n</code></pre>"},{"location":"API/functools/#clip","title":"clip","text":"<ul> <li>\u88c1\u526a\u6570\u636e\uff0clb \u8868\u793a\u4e0b\u9650\uff0cub \u8868\u793a\u4e0a\u9650\u3002\u5982\u679c reverse \u4e3a\u771f\uff0c\u5219\u4fdd\u7559\u4e24\u8fb9\u7684\u6570\u636e\uff0c\u5426\u5219\uff0c\u4fdd\u7559\u8303\u56f4\u5185\u7684\u6570\u636e</li> <li>\u5bf9\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u8fdb\u884c\u6761\u4ef6\u6620\u5c04 <pre><code>T clip(double Function(double) condition,\n          {required double lb, required double ub, bool reverse = false})\n</code></pre></li> </ul>"},{"location":"API/functools/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%7.0f\";\n  var t1 = Matrix.fromList([\n    [3, -2, double.infinity, 1],\n    [0, 2, -1, 3],\n    [9, -4, 8, 8]\n  ]);\n  t1.clip((_) =&gt; 7, lb: 2, ub: 9, reverse: false).visible();\n  t1.clip((_) =&gt; 7, lb: 2, ub: 9, reverse: true).visible();\n}\n</code></pre>"},{"location":"API/functools/#output_7","title":"output","text":"<pre><code>[\n [       3        7        7        7]\n [       7        2        7        3]\n [       9        7        8        8]\n]\n[\n [       7       -2 Infinity        1]\n [       0        2       -1        7]\n [       9       -4        7        7]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u96c6\u5408\u6a21\u62df</p>"},{"location":"API/geometry/","title":"\u51e0\u4f55\u6a21\u62df","text":"<p>\u8be5\u6a21\u5757\u4e2d\u8fd4\u56de\u7684\u90fd\u662fsize * 2\u7684\u5f62\u72b6\u7684\u77e9\u9635\u6570\u636e\u6765\u8868\u793asize\u4e2a\u70b9</p>"},{"location":"API/geometry/#rotatetransform","title":"rotateTransform","text":"<ul> <li>\u70b9\u9635\u7684\u65cb\u8f6c\u53d8\u6362</li> <li>radian\u4e3atrue\u8868\u793a\u5f27\u5ea6\u5236\uff0c\u5426\u5219\u89d2\u5ea6\u5236 <pre><code>T rotateTransform({required double theta, bool radian = true})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var t = Matrix.fromList(\n    List.generate((10), (x) =&gt; [x.toDouble(), x * 2])\n  )..visible();\n  final a = t.rotateTransform(theta: 90, radian: false)..visible();\n  final b = t.rotateTransform(theta: pi / 2, radian: true)..visible();\n  print(a == b);\n}\n</code></pre>"},{"location":"API/geometry/#output","title":"output","text":"<pre><code>[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [-2.00  1.00]\n [-4.00  2.00]\n [-6.00  3.00]\n [-8.00  4.00]\n [-10.00  5.00]\n [-12.00  6.00]\n [-14.00  7.00]\n [-16.00  8.00]\n [-18.00  9.00]\n]\n[\n [ 0.00  0.00]\n [-2.00  1.00]\n [-4.00  2.00]\n [-6.00  3.00]\n [-8.00  4.00]\n [-10.00  5.00]\n [-12.00  6.00]\n [-14.00  7.00]\n [-16.00  8.00]\n [-18.00  9.00]\n]\ntrue\n</code></pre>"},{"location":"API/geometry/#projectiontransform","title":"projectionTransform","text":"<ul> <li>\u6295\u5f71\u53d8\u6362, ux\u548cuy\u5206\u522b\u662fx\u8f74\u548cy\u8f74\u4e0a\u7684\u6295\u5f71\u5206\u91cf <pre><code>T projectionTransform({required double ux, required double uy})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_1","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var t = Matrix.fromList(\n      List.generate((10), (x) =&gt; [x.toDouble(), x * 2])\n  )..visible();\n  // \u6295\u5230y\u8f74\u4e0a\n  t.projectionTransform(ux: 0, uy: 1).visible();\n  // \u6295\u5230x\u8f74\u4e0a\n  t.projectionTransform(ux: 1, uy: 0).visible();\n  // \u6295\u5230y = x\u4e0a\n  t.projectionTransform(ux: 1 / sqrt2, uy: 1 / sqrt2).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_1","title":"output","text":"<pre><code>[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 0.00  2.00]\n [ 0.00  4.00]\n [ 0.00  6.00]\n [ 0.00  8.00]\n [ 0.00 10.00]\n [ 0.00 12.00]\n [ 0.00 14.00]\n [ 0.00 16.00]\n [ 0.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 1.00  0.00]\n [ 2.00  0.00]\n [ 3.00  0.00]\n [ 4.00  0.00]\n [ 5.00  0.00]\n [ 6.00  0.00]\n [ 7.00  0.00]\n [ 8.00  0.00]\n [ 9.00  0.00]\n]\n[\n [ 0.00  0.00]\n [ 1.50  1.50]\n [ 3.00  3.00]\n [ 4.50  4.50]\n [ 6.00  6.00]\n [ 7.50  7.50]\n [ 9.00  9.00]\n [10.50 10.50]\n [12.00 12.00]\n [13.50 13.50]\n]\n</code></pre>"},{"location":"API/geometry/#sheartransform","title":"shearTransform","text":"<ul> <li>\u526a\u5207\u53d8\u6362\uff0calongX\u4e3atrue\u8868\u793a\u6cbf\u7740x\u8f74\uff0c\u5426\u5219\u6cbf\u7740y\u8f74 <pre><code>T shearTransform({required double k, bool alongX = true})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var t = Matrix.fromList(\n      List.generate((10), (x) =&gt; [x.toDouble(), x * 2])\n  )..visible();\n  t.shearTransform(k: 2, alongX: true).visible();\n  t.shearTransform(k: 2, alongX: false).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_2","title":"output","text":"<pre><code>[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 5.00  2.00]\n [10.00  4.00]\n [15.00  6.00]\n [20.00  8.00]\n [25.00 10.00]\n [30.00 12.00]\n [35.00 14.00]\n [40.00 16.00]\n [45.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 1.00  4.00]\n [ 2.00  8.00]\n [ 3.00 12.00]\n [ 4.00 16.00]\n [ 5.00 20.00]\n [ 6.00 24.00]\n [ 7.00 28.00]\n [ 8.00 32.00]\n [ 9.00 36.00]\n]\n</code></pre>"},{"location":"API/geometry/#scaletransform","title":"scaleTransform","text":"<ul> <li>\u7f29\u653e\u53d8\u6362\uff0csx\u548csy\u5206\u522b\u662fx\u8f74\u548cy\u8f74\u5750\u6807\u7684\u7f29\u653e\u500d\u6570 <pre><code>T scaleTransform({required double sx, required double sy})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var t = Matrix.fromList(\n      List.generate((10), (x) =&gt; [x.toDouble(), x * 2])\n  )..visible();\n  t\n    ..scaleTransform(sx: 2, sy: 1)\n    ..visible()\n    ..scaleTransform(sx: 1, sy: 2)\n    ..visible()\n    ..scaleTransform(sx: 0.5, sy: 0.5)\n    ..visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_3","title":"output","text":"<pre><code>[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n[\n [ 0.00  0.00]\n [ 1.00  2.00]\n [ 2.00  4.00]\n [ 3.00  6.00]\n [ 4.00  8.00]\n [ 5.00 10.00]\n [ 6.00 12.00]\n [ 7.00 14.00]\n [ 8.00 16.00]\n [ 9.00 18.00]\n]\n</code></pre>"},{"location":"API/geometry/#curve","title":"curve","text":"<ul> <li>\u751f\u6210\u4ecex1\u5230x2\u7684\u6570\u636e\uff08\u5141\u8bb8x1\u4e0d\u5c0f\u4e8ex2\uff09</li> <li>bias\u662f\u6570\u636e\u7684\u968f\u673a\u504f\u79fb\uff0c\u4e0d\u4f20\u5165\u5219\u4e0d\u504f\u79fb\uff0c\u4fbf\u5b9c\u8303\u56f4\u662f(-bias,bias)</li> <li>uniform\u8868\u793a\u751f\u6210\u7684\u6570\u636e\u662f\u5426\u5747\u5300\u8fd8\u662f\u533a\u95f4\u5185\u968f\u673a\u6027\u7684</li> <li>vec\u662f\u76f8\u5bf9\u5750\u6807 <pre><code>static T curve&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double Function(double) func,\n      required double x1,\n      required double x2,\n      required int size,\n      int? seed,\n      double? bias,\n      bool uniform = true,\n      List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixGeometry.curve&lt;Matrix&gt;(func: (x) =&gt; x * 2, x1: 0, x2: 5, size: 10, uniform: true).visible();\n  MatrixGeometry.curve&lt;Matrix&gt;(func: (x) =&gt; x * 2, x1: 5, x2: 0, size: 10, uniform: true).visible();\n  // y = 2 * x + 1\n  MatrixGeometry.curve&lt;Matrix&gt;(func: (x) =&gt; x * 2, x1: 0, x2: 5, size: 10, vec: [0, 1], uniform: true).visible(format: \"%2.5f\");\n  MatrixGeometry.curve&lt;Matrix&gt;(func: (x) =&gt; x * 2, x1: 5, x2: 9, size: 10, bias: 1, uniform: false).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_4","title":"output","text":"<pre><code>[\n [ 0.00  0.00]\n [ 0.56  1.11]\n [ 1.11  2.22]\n [ 1.67  3.33]\n [ 2.22  4.44]\n [ 2.78  5.56]\n [ 3.33  6.67]\n [ 3.89  7.78]\n [ 4.44  8.89]\n [ 5.00 10.00]\n]\n[\n [ 5.00 10.00]\n [ 4.44  8.89]\n [ 3.89  7.78]\n [ 3.33  6.67]\n [ 2.78  5.56]\n [ 2.22  4.44]\n [ 1.67  3.33]\n [ 1.11  2.22]\n [ 0.56  1.11]\n [ 0.00  0.00]\n]\n[\n [ 0.00000  1.00000]\n [ 0.55556  2.11111]\n [ 1.11111  3.22222]\n [ 1.66667  4.33333]\n [ 2.22222  5.44444]\n [ 2.77778  6.55556]\n [ 3.33333  7.66667]\n [ 3.88889  8.77778]\n [ 4.44444  9.88889]\n [ 5.00000 11.00000]\n]\n[\n [ 5.95 11.71]\n [ 7.45 14.43]\n [ 8.09 15.70]\n [ 5.48 10.99]\n [ 8.78 17.94]\n [ 7.56 15.24]\n [ 7.20 15.13]\n [ 6.81 14.29]\n [ 5.18 10.51]\n [ 8.43 16.87]\n]\n</code></pre>"},{"location":"API/geometry/#custom_curve","title":"custom_curve","text":"<ul> <li>\u6839\u636e\u53c2\u6570\u65b9\u7a0b\u5b9a\u4e49\u4efb\u610f\u66f2\u7ebf\u3002theta_from\u548ctheta_to\u8868\u793a\u53c2\u6570\u7684\u8303\u56f4 <pre><code>static T custom_curve&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double Function(double) xfunc,\n      required double Function(double) yfunc,\n      required double theta_from,\n      required double theta_to,\n      required int size,\n      int? seed,\n      double? bias,\n      bool uniform = true,\n      List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_5","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // \u26aa: x^ 2 + y^2 = 4 \n  MatrixGeometry.custom_curve&lt;Matrix&gt;(\n      xfunc: (x) =&gt; 2.0 * cos(x),\n      yfunc: (y) =&gt; 2.0 * sin(y),\n      theta_from: 0,\n      theta_to: 2 * pi,\n      size: 10,\n      uniform: true\n  ).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_5","title":"output","text":"<pre><code>[\n [ 2.00000  0.00000]\n [ 1.53209  1.28558]\n [ 0.34730  1.96962]\n [-1.00000  1.73205]\n [-1.87939  0.68404]\n [-1.87939 -0.68404]\n [-1.00000 -1.73205]\n [ 0.34730 -1.96962]\n [ 1.53209 -1.28558]\n [ 2.00000 -0.00000]\n]\n</code></pre>"},{"location":"API/geometry/#ellipse_edge","title":"ellipse_edge","text":"<ul> <li>\u692d\u5706\u8fb9\u7f18\u6570\u636e\u6a21\u62df\uff0ca\u662f\u957f\u8f74\u534a\u5f84\uff0cb\u662f\u77ed\u8f74\u534a\u5f84</li> <li>circle_edge\u7c7b\u4f3c\u4f7f\u7528\u65b9\u6cd5 <pre><code>static T ellipse_edge&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double a,\n      required double b,\n      required int size,\n      int? seed,\n      double? bias,\n      bool uniform = true,\n      List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // (x - 2) ^ 2 / 16 + (y - 2) ^ 2 / 9 = 1\u7684\u692d\u5706\n  MatrixGeometry.ellipse_edge&lt;Matrix&gt;(a: 4, b: 3, size: 20, uniform: true, vec: [2, 1])\n    ..visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_6","title":"output","text":"<pre><code>[\n [ 6.00000  1.00000]\n [ 5.78327  1.97410]\n [ 5.15656  2.84264]\n [ 4.18779  3.51150]\n [ 2.98194  3.90820]\n [ 1.66968  3.98975]\n [ 0.39322  3.74732]\n [-0.70913  3.20717]\n [-1.51790  2.42784]\n [-1.94545  1.49378]\n [-1.94545  0.50622]\n [-1.51790 -0.42784]\n [-0.70913 -1.20717]\n [ 0.39322 -1.74732]\n [ 1.66968 -1.98975]\n [ 2.98194 -1.90820]\n [ 4.18779 -1.51150]\n [ 5.15656 -0.84264]\n [ 5.78327  0.02590]\n [ 6.00000  1.00000]\n]\n</code></pre>"},{"location":"API/geometry/#ellipse_area","title":"ellipse_area","text":"<ul> <li>\u692d\u5706\u5185\u90e8\u6570\u636e\u7684\u6a21\u62df</li> <li>circle_area\u7c7b\u4f3c\u4f7f\u7528\u65b9\u6cd5 <pre><code>static T ellipse_area&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double a,\n      required double b,\n      required int size,\n      int? seed,\n      bool uniform = true,\n      List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // x ^ 2 / 16 + y ^ 2 / 9 = 1\u7684\u692d\u5706\n  MatrixGeometry.ellipse_area&lt;Matrix&gt;(a: 4, b: 3, size: 20, uniform: true).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_7","title":"output","text":"<pre><code>[\n [ 3.22287  0.00000]\n [ 0.46328  0.02573]\n [ 2.98519  1.13001]\n [ 2.26187  1.06242]\n [ 0.38793  1.27462]\n [ 0.00000  0.81251]\n [-0.25467  0.20340]\n [-1.32227  1.69598]\n [-3.05319  0.79245]\n [-2.60754  0.67613]\n [-0.37296  0.00000]\n [-1.64220 -0.87490]\n [-0.01710 -0.56296]\n [-1.99511 -0.21927]\n [-0.70147 -1.56219]\n [-0.00000 -1.86214]\n [ 0.08222 -2.06282]\n [ 0.20992 -1.01844]\n [ 1.71985 -0.14007]\n [ 1.54497 -0.59273]\n]\n</code></pre>"},{"location":"API/geometry/#line","title":"line","text":"<ul> <li>\u6839\u636e\u659c\u7387\u548c\u504f\u79fb\u6a21\u62df\u76f4\u7ebf <pre><code>static T line&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double k,\n      required double b,\n      required double x1,\n      required double x2,\n      required int size,\n      int? seed,\n      double? bias,\n      bool uniform = true,\n      List&lt;double&gt; vec = OriginVector}) \n</code></pre></li> </ul>"},{"location":"API/geometry/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // y = 2 * x - 1\n  MatrixGeometry.line&lt;Matrix&gt;(k: 2, b: -1, x1: -1, x2: 1, size: 10, uniform: false).visible();\n  MatrixGeometry.line&lt;Matrix&gt;(k: 2, b: -1, x1: -1, x2: 1, size: 10, uniform: true).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_8","title":"output","text":"<pre><code>[\n [-0.54631 -2.09261]\n [ 0.95080  0.90159]\n [ 0.03006 -0.93987]\n [ 0.54977  0.09954]\n [-0.80347 -2.60695]\n [ 0.86927  0.73855]\n [ 0.81680  0.63361]\n [-0.79911 -2.59822]\n [-0.31727 -1.63453]\n [ 0.11127 -0.77746]\n]\n[\n [-1.00000 -3.00000]\n [-0.77778 -2.55556]\n [-0.55556 -2.11111]\n [-0.33333 -1.66667]\n [-0.11111 -1.22222]\n [ 0.11111 -0.77778]\n [ 0.33333 -0.33333]\n [ 0.55556  0.11111]\n [ 0.77778  0.55556]\n [ 1.00000  1.00000]\n]\n</code></pre>"},{"location":"API/geometry/#xline","title":"xline","text":"<ul> <li>\u4e0ex\u8f74\u5e73\u884c\u7684\u7ebf\uff1ay = a <pre><code>static List&lt;List&lt;double&gt;&gt; xline(\n          {required double a,\n          required double x1,\n          required double x2,\n          required int size,\n          int? seed,\n          double? bias,\n          bool uniform = true,\n          List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // y = 3\n  MatrixGeometry.xline&lt;Matrix&gt;(a: 3, x1: 5, x2: 10, size: 10, uniform: true).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_9","title":"output","text":"<pre><code>[\n [ 5.00000  3.00000]\n [ 5.55556  3.00000]\n [ 6.11111  3.00000]\n [ 6.66667  3.00000]\n [ 7.22222  3.00000]\n [ 7.77778  3.00000]\n [ 8.33333  3.00000]\n [ 8.88889  3.00000]\n [ 9.44444  3.00000]\n [10.00000  3.00000]\n]\n</code></pre>"},{"location":"API/geometry/#yline","title":"yline","text":"<ul> <li>\u4e0ey\u8f74\u5e73\u884c\u7684\u76f4\u7ebf\uff1ax = a <pre><code>static List&lt;List&lt;double&gt;&gt; yline(\n          {required double a,\n          required double y1,\n          required double y2,\n          required int size,\n          int? seed,\n          double? bias,\n          bool uniform = true,\n          List&lt;double&gt; vec = OriginVector})\n</code></pre></li> </ul>"},{"location":"API/geometry/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  // x = 3\n  MatrixGeometry.yline&lt;Matrix&gt;(a: 3, y1: 1, y2: 19, size: 10).visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_10","title":"output","text":"<pre><code>[\n [ 3.00000  1.00000]\n [ 3.00000  3.00000]\n [ 3.00000  5.00000]\n [ 3.00000  7.00000]\n [ 3.00000  9.00000]\n [ 3.00000 11.00000]\n [ 3.00000 13.00000]\n [ 3.00000 15.00000]\n [ 3.00000 17.00000]\n [ 3.00000 19.00000]\n]\n</code></pre>"},{"location":"API/geometry/#camera","title":"camera","text":"<ul> <li>eye\u662f\u89c6\u89c9\u70b9\uff0ca\u3001b\u3001c\u3001d\u8868\u793aax + by + cz + d = 0\u8fd9\u4e2a\u5e73\u9762\uff0ctarget\u662f\u8868\u793a\u76ee\u6807\u7684\u70b9\u96c6 <pre><code>static T camera&lt;T extends MatrixBase&lt;T&gt;&gt;({\n    required List&lt;double&gt; eye,\n    required List&lt;List&lt;double&gt;&gt; target,\n    required double a,\n    required double b,\n    required double c,\n    required double d,\n  }) \n</code></pre></li> </ul>"},{"location":"API/geometry/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.10f\";\n  List&lt;List&lt;double&gt;&gt; vertices = [\n    [0, 0, 1],\n    [-1, -1, 0],\n    [1, -1, 0],\n    [1, 1, 0],\n    [-1, 1, 0]\n  ];\n  var mt = MatrixGeometry.camera&lt;Matrix&gt;(eye: &lt;double&gt;[2, 6, 9], target: vertices, a: 1, b: 1, c: 2, d: 1);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/geometry/#output_11","title":"output","text":"<pre><code>[\n [-0.2500000000 -0.7500000000  0.0000000000]\n [-0.8928571429 -0.7500000000  0.3214285714]\n [ 0.9615384615 -1.2692307692 -0.3461538462]\n [ 0.8750000000  0.3750000000 -1.1250000000]\n [-1.1153846154  0.8076923077 -0.3461538462]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u7ebf\u6027\u4ee3\u6570</p>"},{"location":"API/linalg/","title":"\u7ebf\u6027\u4ee3\u6570","text":""},{"location":"API/linalg/#trace","title":"trace","text":"<ul> <li>\u77e9\u9635\u7684\u8ff9\uff0c\u5982\u679c\u4e0d\u662f\u65b9\u9635\uff0c\u5219\u4ee5\u884c\u548c\u5217\u4e2d\u6700\u5c0f\u503c\u53d6\u65b9\u9635\u7684\u8ff9 <pre><code>double trace()\n</code></pre></li> </ul>"},{"location":"API/linalg/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = MatrixBase.E&lt;Matrix&gt;(n: 4);\n  print(mt.trace());\n  var mt1 = MatrixBase.ELike&lt;Matrix&gt;(row: 3, column: 6);\n  print(mt1.trace());\n}\n</code></pre>"},{"location":"API/linalg/#output","title":"output","text":"<pre><code>4.0\n3.0\n</code></pre>"},{"location":"API/linalg/#elementaryexchange","title":"elementaryExchange","text":"<ul> <li>\u77e9\u9635\u7684\u521d\u7b49\u884c\u53d8\u6362\u2014\u2014\u4ea4\u6362 <pre><code>void elementaryExchange({\n    required int index1, required int index2, bool horizontal = true\n  })\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = MatrixBase.arrange&lt;Matrix&gt;(row: 4, column: 6);\n  mt.visible();\n  mt\n    ..elementaryExchange(index1: 0, index2: 3, horizontal: true)\n    ..visible()\n    ..elementaryExchange(index1: 3, index2: 1, horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_1","title":"output","text":"<pre><code>[\n [  0   1   2   3   4   5]\n [  6   7   8   9  10  11]\n [ 12  13  14  15  16  17]\n [ 18  19  20  21  22  23]\n]\n[\n [ 18  19  20  21  22  23]\n [  6   7   8   9  10  11]\n [ 12  13  14  15  16  17]\n [  0   1   2   3   4   5]\n]\n[\n [ 18  21  20  19  22  23]\n [  6   9   8   7  10  11]\n [ 12  15  14  13  16  17]\n [  0   3   2   1   4   5]\n]\n</code></pre>"},{"location":"API/linalg/#elementarymultiply","title":"elementaryMultiply","text":"<ul> <li>\u77e9\u9635\u7684\u521d\u7b49\u884c\u53d8\u6362\u2014\u2014\u500d\u4e58\u67d0\u884c\uff0c\u8fd9\u91cc\u5141\u8bb8\u4e3a0 <pre><code>void elementaryMultiply({\n    required int index, required double number, bool horizontal = true\n  })\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.1f\";\n  var mt = MatrixBase.arrange&lt;Matrix&gt;(row: 4, column: 6);\n  mt.visible();\n  mt\n    ..elementaryMultiply(index: 1, number: 3.5, horizontal: true)\n    ..visible()\n    ..elementaryMultiply(index: 5, number: 3, horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_2","title":"output","text":"<pre><code>[\n [  0.0   1.0   2.0   3.0   4.0   5.0]\n [  6.0   7.0   8.0   9.0  10.0  11.0]\n [ 12.0  13.0  14.0  15.0  16.0  17.0]\n [ 18.0  19.0  20.0  21.0  22.0  23.0]\n]\n[\n [  0.0   1.0   2.0   3.0   4.0   5.0]\n [ 21.0  24.5  28.0  31.5  35.0  38.5]\n [ 12.0  13.0  14.0  15.0  16.0  17.0]\n [ 18.0  19.0  20.0  21.0  22.0  23.0]\n]\n[\n [  0.0   1.0   2.0   3.0   4.0  15.0]\n [ 21.0  24.5  28.0  31.5  35.0 115.5]\n [ 12.0  13.0  14.0  15.0  16.0  51.0]\n [ 18.0  19.0  20.0  21.0  22.0  69.0]\n]\n</code></pre>"},{"location":"API/linalg/#elementaryadd","title":"elementaryAdd","text":"<ul> <li>\u77e9\u9635\u7684\u521d\u7b49\u53d8\u6362\u2014\u2014\u500d\u4e58\u67d0\u884c\uff08\u5217\uff09index2\u5e76\u4e14\u52a0\u5230\u53e6\u4e00\u884c\uff08\u5217\uff09index1 <pre><code>void elementaryAdd({\n   required int index1,\n   required int index2,\n   required double number,\n   bool horizontal = true\n})\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.1f\";\n  var mt = MatrixBase.arrange&lt;Matrix&gt;(row: 4, column: 6);\n  mt\n    ..visible()\n    ..elementaryAdd(index1: 1, index2: 2, number: 1, horizontal: true)\n    ..visible()\n    ..elementaryAdd(index1: 1, index2: 5, number: 2, horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_3","title":"output","text":"<pre><code>[\n [  0.0   1.0   2.0   3.0   4.0   5.0]\n [  6.0   7.0   8.0   9.0  10.0  11.0]\n [ 12.0  13.0  14.0  15.0  16.0  17.0]\n [ 18.0  19.0  20.0  21.0  22.0  23.0]\n]\n[\n [  0.0   1.0   2.0   3.0   4.0   5.0]\n [ 18.0  20.0  22.0  24.0  26.0  28.0]\n [ 12.0  13.0  14.0  15.0  16.0  17.0]\n [ 18.0  19.0  20.0  21.0  22.0  23.0]\n]\n[\n [  0.0  11.0   2.0   3.0   4.0   5.0]\n [ 18.0  76.0  22.0  24.0  26.0  28.0]\n [ 12.0  47.0  14.0  15.0  16.0  17.0]\n [ 18.0  65.0  20.0  21.0  22.0  23.0]\n]\n</code></pre>"},{"location":"API/linalg/#transposet_","title":"transpose\u3001T_","text":"<ul> <li>\u8f6c\u7f6e\u77e9\u9635 <pre><code>T transpose() \nT get T_\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.0f\";\n  var mt = MatrixBase.arrange&lt;Matrix&gt;(row: 2, column: 3)..visible();\n  mt.T_.visible();\n  mt.transpose().visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_4","title":"output","text":"<pre><code>[\n [   0    1    2]\n [   3    4    5]\n]\n[\n [   0    3]\n [   1    4]\n [   2    5]\n]\n[\n [   0    3]\n [   1    4]\n [   2    5]\n]\n</code></pre>"},{"location":"API/linalg/#det","title":"det","text":"<ul> <li>\u65b9\u9635\u7684\u884c\u5217\u5f0f\u503c <pre><code>double get det\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [3, 2, 6],\n    [0, 8, 12],\n    [1, 4, 2]\n  ]);\n  print(mt.det);\n}\n</code></pre>"},{"location":"API/linalg/#output_5","title":"output","text":"<pre><code>-120.0\n</code></pre>"},{"location":"API/linalg/#adjugate","title":"adjugate","text":"<ul> <li>\u83b7\u53d6\u65b9\u9635\u7684\u4f34\u968f\u77e9\u9635 <pre><code>T get adjugate\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.0f\";\n  var mt = Matrix.fromList([\n    [3, 2, 6],\n    [0, 8, 12],\n    [1, 4, 2]\n  ]);\n  var mt1 = mt.adjugate;\n  print(mt1);\n  // A product Aadj = Adet * E;\n  print(mt.product(other: mt1));\n}\n</code></pre>"},{"location":"API/linalg/#output_6","title":"output","text":"<pre><code>[\n [ -32   20  -24]\n [  12    0  -36]\n [  -8  -10   24]\n]\n[\n [-120    0    0]\n [   0 -120    0]\n [   0    0 -120]\n]\n</code></pre>"},{"location":"API/linalg/#inverse","title":"inverse","text":"<ul> <li>Get the inverse of a nonsingular square matrix <pre><code>T get inverse\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([\n    [3, 2, 6],\n    [0, 8, 12],\n    [1, 4, 2]\n  ]);\n  var mt1 = mt.inverse;\n  print(mt1);\n  print(mt.product(other: mt1));\n}\n</code></pre>"},{"location":"API/linalg/#output_7","title":"output","text":"<pre><code>[\n [  0.26667  -0.16667   0.20000]\n [ -0.10000  -0.00000   0.30000]\n [  0.06667   0.08333  -0.20000]\n]\n[\n [  1.00000   0.00000   0.00000]\n [  0.00000   1.00000  -0.00000]\n [ -0.00000   0.00000   1.00000]\n]\n</code></pre>"},{"location":"API/linalg/#rank","title":"rank","text":"<ul> <li>\u77e9\u9635\u7684\u79e9 <pre><code>int get rank\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(3, (c) =&gt; r * 3 + c + 1)))\n    ..visible();\n  print(mt.rank);\n}\n</code></pre>"},{"location":"API/linalg/#output_8","title":"output","text":"<pre><code>[\n [  1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000]\n [  7.00000   8.00000   9.00000]\n]\n2\n</code></pre>"},{"location":"API/linalg/#rref","title":"rref","text":"<ul> <li>\u901a\u8fc7\u9ad8\u65af\u6d88\u5143\u6cd5\u5316\u6700\u7b80\u884c\u9636\u68af\u578b</li> <li>rank\u3001rref\u3001\u5224\u65ad\u5947\u5f02\u77e9\u9635\u90fd\u662f\u901a\u8fc7tolerance_round\u5bb9\u5fcd\u503c\u63a7\u5236\u7684 <pre><code>T get rref\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(3, (c) =&gt; r * 3 + c + 1)))\n    ..visible();\n  print(mt.rref);\n  print(mt.rank);\n}\n</code></pre>"},{"location":"API/linalg/#output_9","title":"output","text":"<pre><code>[\n [  1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000]\n [  7.00000   8.00000   9.00000]\n]\n[\n [  1.00000   0.00000  -1.00000]\n [ -0.00000   1.00000   2.00000]\n [  0.00000   0.00000   0.00000]\n]\n2\n</code></pre>"},{"location":"API/linalg/#coincidental","title":"coincidental","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u53bb\u6389row\u548ccolumn\u7684\u4f59\u5b50\u5f0f <pre><code>T coincidental({required int row, required int column})\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList(List.generate(5, (r) =&gt; List.generate(6, (c) =&gt; r * 3 + c + 1)))\n    ..visible();\n  mt.coincidental(row: 2, column: 4).visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_10","title":"output","text":"<pre><code>[\n [  1   2   3   4   5   6]\n [  4   5   6   7   8   9]\n [  7   8   9  10  11  12]\n [ 10  11  12  13  14  15]\n [ 13  14  15  16  17  18]\n]\n[\n [  1   2   3   4   6]\n [  4   5   6   7   9]\n [ 10  11  12  13  15]\n [ 13  14  15  16  18]\n]\n</code></pre>"},{"location":"API/linalg/#product","title":"product","text":"<ul> <li>\u77e9\u9635\u7684\u6807\u51c6\u4e58\u6cd5 <pre><code>T product({required T other})\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(3, (c) =&gt; r * 3 + c + 1)))\n    ..visible();\n  var mt1 = Matrix.fromList([\n    [2, 2, 1],\n    [0, 9, 2],\n    [2, 4, 6]\n  ]);\n  print(mt.product(other: mt1));\n}\n</code></pre>"},{"location":"API/linalg/#output_11","title":"output","text":"<pre><code>[\n [  1   2   3]\n [  4   5   6]\n [  7   8   9]\n]\n[\n [  8  32  23]\n [ 20  77  50]\n [ 32 122  77]\n]\n</code></pre>"},{"location":"API/linalg/#kronecker","title":"kronecker","text":"<ul> <li>\u514b\u7f57\u5185\u514b\u79ef <pre><code>T kronecker({required T other})\n</code></pre></li> </ul>"},{"location":"API/linalg/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(3, (c) =&gt; r * 3 + c + 1)))\n    ..visible();\n  var mt1 = Matrix.fromList([\n    [2, 2, 1],\n    [0, 9, 2],\n    [2, 4, 6]\n  ]);\n  print(mt.kronecker(other: mt1));\n}\n</code></pre>"},{"location":"API/linalg/#output_12","title":"output","text":"<pre><code>[\n [  1   2   3]\n [  4   5   6]\n [  7   8   9]\n]\n[\n [  2   2   1   4   4   2   6   6   3]\n [  0   9   2   0  18   4   0  27   6]\n [  2   4   6   4   8  12   6  12  18]\n [  8   8   4  10  10   5  12  12   6]\n [  0  36   8   0  45  10   0  54  12]\n [  8  16  24  10  20  30  12  24  36]\n [ 14  14   7  16  16   8  18  18   9]\n [  0  63  14   0  72  16   0  81  18]\n [ 14  28  42  16  32  48  18  36  54]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u7eaf\u6570\u5b66\u5de5\u5177</p>"},{"location":"API/math/","title":"\u7eaf\u6570\u5b66\u5de5\u5177","text":""},{"location":"API/math/#min","title":"min","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u6700\u5c0f\u503c <pre><code>Object min({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [double.nan, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt.min(dim: 0));\n  print(mt.min(dim: 1));\n  print(mt.min(dim: 2));\n  print(min(double.nan, double.negativeInfinity));\n}\n</code></pre>"},{"location":"API/math/#output","title":"output","text":"<pre><code>[NaN, -Infinity, -5.0]\n[NaN, 3.0, -5.0, -Infinity]\nNaN\nNaN\n</code></pre>"},{"location":"API/math/#max","title":"max","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u6700\u5927\u503c <pre><code>Object max({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_1","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [double.nan, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt.max(dim: 0));\n  print(mt.max(dim: 1));\n  print(mt.max(dim: 2));\n  print(max(double.nan, double.infinity));\n}\n</code></pre>"},{"location":"API/math/#output_1","title":"output","text":"<pre><code>[NaN, 10.0, Infinity]\n[NaN, 9.0, 10.0, Infinity]\nNaN\nNaN\n</code></pre>"},{"location":"API/math/#argmin","title":"argmin","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u6700\u5c0f\u503c\u7684\u7d22\u5f15 <pre><code>Object argmin({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [double.nan, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt.argmin(dim: 0));\n  print(mt.argmin(dim: 1));\n  print(mt.argmin(dim: 2));\n  print(double.nan == double.nan);  // always false\n\n  var mt2 = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt2.argmin(dim: 0));\n  print(mt2.argmin(dim: 1));\n  print(mt2.argmin(dim: 2));\n}\n</code></pre>"},{"location":"API/math/#output_2","title":"output","text":"<pre><code>[-1, 3, 0]\n[-1, 0, 0, 1]\n-1\nfalse\n[2, 3, 0]\n[2, 0, 0, 1]\n7\n</code></pre>"},{"location":"API/math/#argmax","title":"argmax","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u6700\u5927\u503c\u7684\u7d22\u5f15 <pre><code>Object argmax({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [double.nan, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt.argmax(dim: 0));\n  print(mt.argmax(dim: 1));\n  print(mt.argmax(dim: 2));\n  print(double.nan == double.nan);  // always false\n\n  var mt2 = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt2.argmax(dim: 0));\n  print(mt2.argmax(dim: 1));\n  print(mt2.argmax(dim: 2));\n}\n</code></pre>"},{"location":"API/math/#output_3","title":"output","text":"<pre><code>[-1, 2, 3]\n[-1, 1, 1, 2]\n-1\nfalse\n[0, 2, 3]\n[1, 1, 1, 2]\n11\n</code></pre>"},{"location":"API/math/#getrange","title":"getRange","text":"<ul> <li>\u83b7\u53d6\u77e9\u9635\u7684\u503c\u57df\uff0c\u8fd4\u56de\u503c\u4e3a\u4e0eRange\u76f8\u5173\u7684\u7c7b\u578b <pre><code>Object getRange({int dim = -1}) \n</code></pre></li> </ul>"},{"location":"API/math/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt2 = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt2.getRange(dim: 0));\n  print(mt2.getRange(dim: 1));\n  print(mt2.getRange(dim: 2));\n}\n</code></pre>"},{"location":"API/math/#output_4","title":"output","text":"<pre><code>[Range: [-5.0, 4.3], count: 0, Range: (-Infinity, 10.0], count: 0, Range: [-5.0, Infinity), count: 0]\n[Range: [-5.0, 5.0], count: 0, Range: [3.0, 9.0], count: 0, Range: [-5.0, 10.0], count: 0, Range: (-Infinity, Infinity), count: 0]\nRange: (-Infinity, Infinity), count: 0\n</code></pre>"},{"location":"API/math/#sum","title":"sum","text":"<ul> <li>\u6c42\u548c <pre><code>Object sum({int dim = -1}) \n</code></pre></li> </ul>"},{"location":"API/math/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, 6],\n    [-5, 3, 0, double.infinity],\n  ]);\n  print(mt.sum(dim: 0));\n  print(mt.sum(dim: 1));\n  print(mt.sum(dim: 2));\n}\n</code></pre>"},{"location":"API/math/#output_5","title":"output","text":"<pre><code>[2.8, 30.0, Infinity]\n[4.300000000000001, 15.0, 5.0, Infinity]\nInfinity\n</code></pre>"},{"location":"API/math/#power","title":"power","text":"<ul> <li>\u77e9\u9635\u7684\u6570\u636e\u7684number\u5e42\u6b21\u65b9\uff0creverse\u4e3atrue\u5219\u8868\u793a\u77e9\u9635\u6570\u636e\u4e3a\u5e42 <pre><code>T power({required double number, bool reverse = false})\n</code></pre></li> </ul>"},{"location":"API/math/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([\n    [4.3, 3, -5, 0.5],\n    [5, 9, 10, double.negativeInfinity],\n    [-5, 3, 0, double.infinity],\n  ]);\n  mt.power(number: 2, reverse: true).visible();\n  mt.power(number: 2, reverse: false).visible();\n  (mt ^ 2).visible();\n}\n</code></pre>"},{"location":"API/math/#output_6","title":"output","text":"<pre><code>[\n [ 19.69831   8.00000   0.03125   1.41421]\n [ 32.00000 512.00000 1024.00000   0.00000]\n [  0.03125   8.00000   1.00000  Infinity]\n]\n[\n [ 18.49000   9.00000  25.00000   0.25000]\n [ 25.00000  81.00000 100.00000  Infinity]\n [ 25.00000   9.00000   0.00000  Infinity]\n]\n[\n [ 18.49000   9.00000  25.00000   0.25000]\n [ 25.00000  81.00000 100.00000  Infinity]\n [ 25.00000   9.00000   0.00000  Infinity]\n]\n</code></pre>"},{"location":"API/math/#atan2","title":"atan2","text":"<ul> <li>\u65b9\u4f4d\u89d2\u516c\u5f0f\uff0creverse\u4e3atrue\u8868\u793anumber\u4e3a\u5206\u6bcd\uff0c\u53cd\u4e4b\u4e3a\u5206\u5b50 <pre><code>T atan2({required double number, bool reverse = false})\n</code></pre></li> </ul>"},{"location":"API/math/#test_7","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([\n    [1, sqrt(3), sqrt(3) / 3]\n  ]);\n  mt.atan2(number: 1, reverse: true).visible();\n  mt.atan2(number: 1, reverse: false).visible();\n}\n</code></pre>"},{"location":"API/math/#output_7","title":"output","text":"<pre><code>[\n [  0.78540   0.52360   1.04720]\n]\n[\n [  0.78540   1.04720   0.52360]\n]\n</code></pre>"},{"location":"API/math/#_2","title":"\u4e00\u4e9b\u5355\u53d8\u91cf\u901a\u7528\u6570\u5b66\u65b9\u6cd5","text":"<pre><code>T get sin =&gt; _fromList(self.sinExtension);\nT get cos =&gt; _fromList(self.cosExtension);\nT get tan =&gt; _fromList(self.tanExtension);\nT get asin =&gt; _fromList(self.asinExtension);\nT get acos =&gt; _fromList(self.acosExtension);\nT get atan =&gt; _fromList(self.atanExtension);\nT get sinh =&gt; _fromList(self.sinhExtension);\nT get cosh =&gt; _fromList(self.coshExtension);\nT get tanh =&gt; _fromList(self.tanhExtension);\nT get asinh =&gt; _fromList(self.asinhExtension);\nT get acosh =&gt; _fromList(self.acoshExtension);\nT get atanh =&gt; _fromList(self.atanhExtension);\nT get exp =&gt; _fromList(self.expExtension);\nT get log =&gt; _fromList(self.logExtension);\nT get sqrt =&gt; _fromList(self.sqrtExtension);\nT get log10 =&gt; _fromList(self.log10Extension);\nT get square =&gt; _fromList(self.squareExtension);\nT get cube =&gt; _fromList(self.cubeExtension);\nT get abs =&gt; _fromList(self.absExtension);\nT get ceil =&gt; _fromList(self.ceilExtension);\nT get floor =&gt; _fromList(self.floorExtension);\nT get round =&gt; _fromList(self.roundExtension);\nT get degree =&gt; _fromList(self.degreeExtension);\nT get radian =&gt; _fromList(self.radianExtension);\n</code></pre>"},{"location":"API/math/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([List.generate(9, (_) =&gt; _ + 0.0)].reshape(row: 3, column: 3));\n  mt.visible();\n  mt.sin.visible(start_point: '-----sin-----');\n  mt.cos.visible(start_point: '-----cos-----');\n  mt.tan.visible(start_point: '-----tan-----');\n  mt.asin.visible(start_point: '-----asin-----');\n  mt.acos.visible(start_point: '-----acos-----');\n  mt.atan.visible(start_point: '-----atan-----');\n  mt.sinh.visible(start_point: '-----sinh-----');\n  mt.cosh.visible(start_point: '-----cosh-----');\n  mt.tanh.visible(start_point: '-----tanh-----');\n  mt.asinh.visible(start_point: '-----asinh-----');\n  mt.acosh.visible(start_point: '-----acosh-----');\n  mt.atanh.visible(start_point: '-----atanh-----');\n  mt.exp.visible(start_point: '-----exp-----');\n  mt.log.visible(start_point: '-----log-----');\n  mt.sqrt.visible(start_point: '-----sqrt-----');\n  mt.log10.visible(start_point: '-----log10-----');\n  mt.square.visible(start_point: '-----square-----');\n  mt.cube.visible(start_point: '-----cube-----');\n  mt.abs.visible(start_point: '-----abs-----');\n  mt.ceil.visible(start_point: '-----ceil-----');\n  mt.floor.visible(start_point: '-----floor-----');\n  mt.round.visible(start_point: '-----round-----');\n  mt.degree.visible(start_point: '-----degree-----');\n  mt.radian.visible(start_point: '-----radian-----');\n}\n</code></pre>"},{"location":"API/math/#output_8","title":"output","text":"<pre><code>[\n [  0.00000   1.00000   2.00000]\n [  3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000]\n]\n-----sin-----\n[\n [  0.00000   0.84147   0.90930]\n [  0.14112  -0.75680  -0.95892]\n [ -0.27942   0.65699   0.98936]\n]\n-----cos-----\n[\n [  1.00000   0.54030  -0.41615]\n [ -0.98999  -0.65364   0.28366]\n [  0.96017   0.75390  -0.14550]\n]\n-----tan-----\n[\n [  0.00000   1.55741  -2.18504]\n [ -0.14255   1.15782  -3.38052]\n [ -0.29101   0.87145  -6.79971]\n]\n-----asin-----\n[\n [  0.00000   1.57080       NaN]\n [      NaN       NaN       NaN]\n [      NaN       NaN       NaN]\n]\n-----acos-----\n[\n [  1.57080   0.00000       NaN]\n [      NaN       NaN       NaN]\n [      NaN       NaN       NaN]\n]\n-----atan-----\n[\n [  0.00000   0.78540   1.10715]\n [  1.24905   1.32582   1.37340]\n [  1.40565   1.42890   1.44644]\n]\n-----sinh-----\n[\n [  0.00000   1.17520   3.62686]\n [ 10.01787  27.28992  74.20321]\n [201.71316 548.31612 1490.47883]\n]\n-----cosh-----\n[\n [  1.00000   1.54308   3.76220]\n [ 10.06766  27.30823  74.20995]\n [201.71564 548.31704 1490.47916]\n]\n-----tanh-----\n[\n [  0.00000   0.76159   0.96403]\n [  0.99505   0.99933   0.99991]\n [  0.99999   1.00000   1.00000]\n]\n-----asinh-----\n[\n [  0.00000   0.88137   1.44364]\n [  1.81845   2.09471   2.31244]\n [  2.49178   2.64412   2.77647]\n]\n-----acosh-----\n[\n [      NaN   0.00000   1.31696]\n [  1.76275   2.06344   2.29243]\n [  2.47789   2.63392   2.76866]\n]\n-----atanh-----\n[\n [  0.00000  Infinity       NaN]\n [      NaN       NaN       NaN]\n [      NaN       NaN       NaN]\n]\n-----exp-----\n[\n [  1.00000   2.71828   7.38906]\n [ 20.08554  54.59815 148.41316]\n [403.42879 1096.63316 2980.95799]\n]\n-----log-----\n[\n [-Infinity   0.00000   0.69315]\n [  1.09861   1.38629   1.60944]\n [  1.79176   1.94591   2.07944]\n]\n-----sqrt-----\n[\n [  0.00000   1.00000   1.41421]\n [  1.73205   2.00000   2.23607]\n [  2.44949   2.64575   2.82843]\n]\n-----log10-----\n[\n [-Infinity   0.00000   0.30103]\n [  0.47712   0.60206   0.69897]\n [  0.77815   0.84510   0.90309]\n]\n-----square-----\n[\n [  0.00000   1.00000   4.00000]\n [  9.00000  16.00000  25.00000]\n [ 36.00000  49.00000  64.00000]\n]\n-----cube-----\n[\n [  0.00000   1.00000   8.00000]\n [ 27.00000  64.00000 125.00000]\n [216.00000 343.00000 512.00000]\n]\n-----abs-----\n[\n [  0.00000   1.00000   2.00000]\n [  3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000]\n]\n-----ceil-----\n[\n [  0.00000   1.00000   2.00000]\n [  3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000]\n]\n-----floor-----\n[\n [  0.00000   1.00000   2.00000]\n [  3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000]\n]\n-----round-----\n[\n [  0.00000   1.00000   2.00000]\n [  3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000]\n]\n-----degree-----\n[\n [  0.00000  57.29578 114.59156]\n [171.88734 229.18312 286.47890]\n [343.77468 401.07046 458.36624]\n]\n-----radian-----\n[\n [  0.00000   0.01745   0.03491]\n [  0.05236   0.06981   0.08727]\n [  0.10472   0.12217   0.13963]\n]\n</code></pre>"},{"location":"API/math/#add","title":"add","text":"<ul> <li>\u4e24\u4e2a\u77e9\u9635\u540c\u4f4d\u7f6e\u6570\u636e\u6216\u8005\u77e9\u9635\u4e0e\u6570\u7684\u52a0\u6cd5</li> <li>\u8be5\u65b9\u6cd5\u652f\u6301\u5e7f\u64ad\uff0cdim\u4e3a0\u5219\u6309\u7167\u884c\u65b9\u5411\uff0cdim\u4e3a1\u5219\u6309\u7167\u5217\u65b9\u5411\uff0c\u5176\u4ed6\u5219\u548c\u4e24\u4e2a\u540c\u5f62\u72b6\u77e9\u9635\u52a0\u6cd5\u4e00\u6837\u7684\u6548\u679c <pre><code>T add({required Object other, int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([List.generate(12, (_) =&gt; _ + 0.0)].reshape(row: 3, column: 4));\n  mt.visible();\n  mt.add(other: mt).visible();\n  mt.add(other: 2).visible();\n  mt.add(other: Matrix([[4, 2, 1, 3]]), dim: 0).visible();\n  mt.add(other: Matrix([[4, 2, 1]]).T_, dim: 1).visible();\n}\n</code></pre>"},{"location":"API/math/#output_9","title":"output","text":"<pre><code>[\n [  0.00000   1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000   7.00000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n[\n [  0.00000   2.00000   4.00000   6.00000]\n [  8.00000  10.00000  12.00000  14.00000]\n [ 16.00000  18.00000  20.00000  22.00000]\n]\n[\n [  2.00000   3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000   9.00000]\n [ 10.00000  11.00000  12.00000  13.00000]\n]\n[\n [  4.00000   3.00000   3.00000   6.00000]\n [  8.00000   7.00000   7.00000  10.00000]\n [ 12.00000  11.00000  11.00000  14.00000]\n]\n[\n [  4.00000   5.00000   6.00000   7.00000]\n [  6.00000   7.00000   8.00000   9.00000]\n [  9.00000  10.00000  11.00000  12.00000]\n]\n</code></pre>"},{"location":"API/math/#_3","title":"\u7eaf\u6570\u5b66\u5de5\u5177","text":"<ul> <li>\u4e24\u4e2a\u77e9\u9635\u540c\u4f4d\u7f6e\u6570\u636e\u6216\u8005\u77e9\u9635\u4e0e\u6570\u7684\u51cf\u6cd5</li> <li>\u8be5\u65b9\u6cd5\u652f\u6301\u5e7f\u64ad\uff0cdim\u4e3a0\u5219\u6309\u7167\u884c\u65b9\u5411\uff0cdim\u4e3a1\u5219\u6309\u7167\u5217\u65b9\u5411\uff0c\u5176\u4ed6\u5219\u548c\u4e24\u4e2a\u540c\u5f62\u72b6\u77e9\u9635\u51cf\u6cd5\u4e00\u6837\u7684\u6548\u679c <pre><code>T minus({required Object other, int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([List.generate(12, (_) =&gt; _ + 0.0)].reshape(row: 3, column: 4));\n  mt.visible();\n  mt.minus(other: mt).visible();\n  mt.minus(other: 2).visible();\n  mt.minus(other: Matrix([[4, 2, 1, 3]]), dim: 0).visible();\n  mt.minus(other: Matrix([[4, 2, 1]]).T_, dim: 1).visible();\n}\n</code></pre>"},{"location":"API/math/#output_10","title":"output","text":"<pre><code>[\n [  0.00000   1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000   7.00000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n[\n [  0.00000   0.00000   0.00000   0.00000]\n [  0.00000   0.00000   0.00000   0.00000]\n [  0.00000   0.00000   0.00000   0.00000]\n]\n[\n [ -2.00000  -1.00000   0.00000   1.00000]\n [  2.00000   3.00000   4.00000   5.00000]\n [  6.00000   7.00000   8.00000   9.00000]\n]\n[\n [ -4.00000  -1.00000   1.00000   0.00000]\n [  0.00000   3.00000   5.00000   4.00000]\n [  4.00000   7.00000   9.00000   8.00000]\n]\n[\n [ -4.00000  -3.00000  -2.00000  -1.00000]\n [  2.00000   3.00000   4.00000   5.00000]\n [  7.00000   8.00000   9.00000  10.00000]\n]\n</code></pre>"},{"location":"API/math/#multiply","title":"multiply","text":"<ul> <li>\u4e24\u4e2a\u77e9\u9635\u540c\u4f4d\u7f6e\u6570\u636e\u6216\u8005\u77e9\u9635\u4e0e\u6570\u7684\u4e58\u6cd5</li> <li>\u8be5\u65b9\u6cd5\u652f\u6301\u5e7f\u64ad\uff0cdim\u4e3a0\u5219\u6309\u7167\u884c\u65b9\u5411\uff0cdim\u4e3a1\u5219\u6309\u7167\u5217\u65b9\u5411\uff0c\u5176\u4ed6\u5219\u548c\u4e24\u4e2a\u540c\u5f62\u72b6\u77e9\u9635\u4e58\u6cd5\u4e00\u6837\u7684\u6548\u679c <pre><code>T multiply({required Object other, int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/math/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([List.generate(12, (_) =&gt; _ + 0.0)].reshape(row: 3, column: 4));\n  mt.visible();\n  mt.multiply(other: mt).visible();\n  mt.multiply(other: 2).visible();\n  mt.multiply(other: Matrix([[4, 2, 1, 3]]), dim: 0).visible();\n  mt.multiply(other: Matrix([[4, 2, 1]]).T_, dim: 1).visible();\n}\n</code></pre>"},{"location":"API/math/#output_11","title":"output","text":"<pre><code>[\n [  0.00000   1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000   7.00000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n[\n [  0.00000   1.00000   4.00000   9.00000]\n [ 16.00000  25.00000  36.00000  49.00000]\n [ 64.00000  81.00000 100.00000 121.00000]\n]\n[\n [  0.00000   2.00000   4.00000   6.00000]\n [  8.00000  10.00000  12.00000  14.00000]\n [ 16.00000  18.00000  20.00000  22.00000]\n]\n[\n [  0.00000   2.00000   2.00000   9.00000]\n [ 16.00000  10.00000   6.00000  21.00000]\n [ 32.00000  18.00000  10.00000  33.00000]\n]\n[\n [  0.00000   4.00000   8.00000  12.00000]\n [  8.00000  10.00000  12.00000  14.00000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n</code></pre>"},{"location":"API/math/#t-dividerequired-object-other-int-dim-1","title":"T divide({required Object other, int dim = -1})","text":"<ul> <li>\u4e24\u4e2a\u77e9\u9635\u540c\u4f4d\u7f6e\u6570\u636e\u6216\u8005\u77e9\u9635\u4e0e\u6570\u7684\u9664\u6cd5</li> <li>\u8be5\u65b9\u6cd5\u652f\u6301\u5e7f\u64ad\uff0cdim\u4e3a0\u5219\u6309\u7167\u884c\u65b9\u5411\uff0cdim\u4e3a1\u5219\u6309\u7167\u5217\u65b9\u5411\uff0c\u5176\u4ed6\u5219\u548c\u4e24\u4e2a\u540c\u5f62\u72b6\u77e9\u9635\u9664\u6cd5\u4e00\u6837\u7684\u6548\u679c </li> </ul>"},{"location":"API/math/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  var mt = Matrix.fromList([List.generate(12, (_) =&gt; _ + 0.0)].reshape(row: 3, column: 4));\n  mt.visible();\n  mt.divide(other: mt).visible();\n  mt.divide(other: 2).visible();\n  mt.divide(other: Matrix([[4, 2, 1, 3]]), dim: 0).visible();\n  mt.divide(other: Matrix([[4, 2, 1]]).T_, dim: 1).visible();\n}\n</code></pre>"},{"location":"API/math/#output_12","title":"output","text":"<pre><code>[\n [  0.00000   1.00000   2.00000   3.00000]\n [  4.00000   5.00000   6.00000   7.00000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n[\n [      NaN   1.00000   1.00000   1.00000]\n [  1.00000   1.00000   1.00000   1.00000]\n [  1.00000   1.00000   1.00000   1.00000]\n]\n[\n [  0.00000   0.50000   1.00000   1.50000]\n [  2.00000   2.50000   3.00000   3.50000]\n [  4.00000   4.50000   5.00000   5.50000]\n]\n[\n [  0.00000   0.50000   2.00000   1.00000]\n [  1.00000   2.50000   6.00000   2.33333]\n [  2.00000   4.50000  10.00000   3.66667]\n]\n[\n [  0.00000   0.25000   0.50000   0.75000]\n [  2.00000   2.50000   3.00000   3.50000]\n [  8.00000   9.00000  10.00000  11.00000]\n]\n</code></pre>"},{"location":"API/math/#fftcomplex","title":"fftComplex","text":"<ul> <li>\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u57fa\u4e8eCooley\u2013Tukey FFT algorithm</li> <li>\u9ed8\u8ba4\u6bcf\u884c\u90fd\u662f\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u590d\u6570\u4e2a\u6570\u5fc5\u987b\u662f2\u7684\u5e42 <pre><code>T fftComplex() \n</code></pre></li> </ul>"},{"location":"API/math/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%8.5f\";\n  var t1 = Matrix.fromList([\n    [3, 6],\n    [0, 2],\n    [9, -0.2],\n    [5, 2]\n  ]);\n  print(t1.fftComplex());\n}\n</code></pre>"},{"location":"API/math/#output_13","title":"output","text":"<pre><code>[\n [      17.00000        9.80000]\n [      -6.00000       11.20000]\n [       7.00000        1.80000]\n [      -6.00000        1.20000]\n]\n</code></pre>"},{"location":"API/math/#tocomplexlike","title":"toComplexLike","text":"<ul> <li>\u628a\u4e00\u4e2arow * column\u7684\u77e9\u9635\u8f6c\u6362\u4e3asize\u4e2a\u590d\u6570\u6a21\u6837\u7684\u77e9\u9635\uff0cisReal\u4e3atrue\u8868\u793a\u77e9\u9635\u7684\u5143\u7d20\u4f5c\u4e3a\u590d\u6570\u5b9e\u90e8\uff0c\u53cd\u4e4b\u4e3a\u865a\u90e8 <pre><code>##T toComplexLike({bool isReal = true})\n</code></pre></li> </ul>"},{"location":"API/math/#test_14","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var t1 = Matrix.fromList([\n    [3, 6],\n    [0, 2],\n    [9, -0.2],\n    [5, 2]\n  ]);\n  print(t1.toComplexLike(isReal: true));\n  print(t1.toComplexLike(isReal: false));\n}\n</code></pre>"},{"location":"API/math/#output_14","title":"output","text":"<pre><code>[\n [ 3.00  0.00]\n [ 6.00  0.00]\n [ 0.00  0.00]\n [ 2.00  0.00]\n [ 9.00  0.00]\n [-0.20  0.00]\n [ 5.00  0.00]\n [ 2.00  0.00]\n]\n[\n [ 0.00  3.00]\n [ 0.00  6.00]\n [ 0.00  0.00]\n [ 0.00  2.00]\n [ 0.00  9.00]\n [ 0.00 -0.20]\n [ 0.00  5.00]\n [ 0.00  2.00]\n]\n</code></pre>"},{"location":"API/math/#dftcomplex","title":"dftComplex","text":"<ul> <li>\u5bf9\u4e00\u4e2a\u590d\u6570\u77e9\u9635\u8fdb\u884c\u5085\u91cc\u53f6\u53d8\u6362 <pre><code>T dftComplex()\n</code></pre></li> </ul>"},{"location":"API/math/#test_15","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.4f\";\n  var t1 = Matrix.fromList([\n    [3, 6],\n    [0, 2],\n    [9, -0.2],\n    [5, 2],\n    [4, 7]\n  ]);\n  print(t1.dftComplex());\n}\n</code></pre>"},{"location":"API/math/#output_15","title":"output","text":"<pre><code>[\n [21.0000 16.8000]\n [-13.1386  8.7780]\n [ 3.2436  5.4304]\n [ 4.9368 -6.8803]\n [-1.0418  5.8718]\n]\n</code></pre>"},{"location":"API/math/#dft","title":"dft","text":"<ul> <li>\u5085\u91cc\u53f6\u53d8\u6362 <pre><code>List&lt;List&lt;Complex&gt;&gt; dft()\n</code></pre></li> </ul>"},{"location":"API/math/#test_16","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.4f\";\n  var t1 = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(4, (c) =&gt; r * 3.0 + c)))..visible();\n  t1.dft().forEach((list) =&gt; list.forEach((c) =&gt; print(c)));\n}\n</code></pre>"},{"location":"API/math/#output_16","title":"output","text":"<pre><code>[\n [ 0.0000  1.0000  2.0000  3.0000]\n [ 3.0000  4.0000  5.0000  6.0000]\n [ 6.0000  7.0000  8.0000  9.0000]\n]\nComplex(54.0, 0.0)\nComplex(-6.000000000000002, 5.999999999999998)\nComplex(-6.0, -4.408728476930472e-15)\nComplex(-5.999999999999992, -6.000000000000005)\nComplex(-18.000000000000007, 10.39230484541326)\nComplex(8.881784197001252e-15, 0.0)\nComplex(6.217248937900877e-15, 6.217248937900877e-15)\nComplex(8.881784197001252e-15, -4.440892098500626e-15)\nComplex(-17.999999999999986, -10.392304845413282)\nComplex(1.4210854715202004e-14, 1.509903313490213e-14)\nComplex(0.0, 5.329070518200751e-15)\nComplex(-3.552713678800501e-15, 1.3322676295501878e-14)\n</code></pre>"},{"location":"API/math/#diff","title":"diff","text":"<ul> <li>\u57fa\u4e8e\u4e2d\u5fc3\u5dee\u5206\u8fdb\u884c\u51fd\u6570\u6c42\u5bfc <pre><code>T diff(double Function(double) func)\n</code></pre></li> </ul>"},{"location":"API/math/#test_17","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%10.5f\";\n  var t1 = Matrix.fromList(List.generate(3, (r) =&gt; List.generate(4, (c) =&gt; r * 3.0 + c)))..visible();\n  f(double x) =&gt; x * 2 + 5 * sin(x) - exp(x * 2) + pow(5, 1 / (x + 1));\n  f1(double x) =&gt; 2 + 5 * cos(x) - exp(x * 2) * 2 + pow(5, 1 / (x + 1)) * log(5) * (-1 / pow(x + 1, 2));\n  var get1 = t1.diff(f)..visible();\n  var get2 = t1.customize(f1)..visible();\n  (get1 - get2).visible(format: \"%3.8f\");\n}\n</code></pre>"},{"location":"API/math/#output_17","title":"output","text":"<pre><code>[\n [         0.00000          1.00000          2.00000          3.00000]\n [         3.00000          4.00000          5.00000          6.00000]\n [         6.00000          7.00000          8.00000          9.00000]\n]\n[\n [        -3.04719        -10.97630       -109.58282       -809.95797]\n [      -809.95797      -5963.27302     -44049.57174    -325502.82332]\n [   -325502.82332   -2405202.82653  -17772219.69551 -131319936.34594]\n]\n[\n [        -3.04719        -10.97630       -109.58282       -809.95797]\n [      -809.95797      -5963.27302     -44049.57174    -325502.82332]\n [   -325502.82332   -2405202.82957  -17772219.79228 -131319940.84922]\n]\n[\n [ -0.00000000  -0.00000000   0.00000000   0.00000000]\n [  0.00000000  -0.00000036   0.00000059   0.00000185]\n [  0.00000185   0.00304389   0.09676288   4.50327742]\n]\n</code></pre>"},{"location":"API/math/#sgn","title":"sgn","text":"<ul> <li>\u6620\u5c04\u4e3a\u7b26\u53f7\u77e9\u9635 <pre><code>T get sgn\n</code></pre></li> </ul>"},{"location":"API/math/#test_18","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var t1 = Matrix.fromList(\n      List.generate(3, (r) =&gt; List.generate(4, (c) =&gt; r * 3.0 + c))\n  )..[0][2] = -5\n  ..[1][1] = double.nan\n    ..visible();\n  t1.sgn.visible();\n}\n</code></pre>"},{"location":"API/math/#output_18","title":"output","text":"<pre><code>[\n [  0   1  -5   3]\n [  3 NaN   5   6]\n [  6   7   8   9]\n]\n[\n [  0   1  -1   1]\n [  1 NaN   1   1]\n [  1   1   1   1]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u5de5\u5177\u7684\u7b80\u5355\u5b9e\u73b0</p>"},{"location":"API/ml/","title":"\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u5de5\u5177\u7684\u7b80\u5355\u5b9e\u73b0","text":""},{"location":"API/ml/#softmax","title":"Softmax","text":"<ul> <li>\u5c06\u6570\u636e\u901a\u8fc7Softmax\u6620\u5c04\uff0c\u5b9e\u9645\u4e2d\u4f1a\u8003\u8651\u6392\u9664\u6570\u636e\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd9\u91cc\u4e0d\u8003\u8651 <pre><code>T Softmax({int dim = -1}) \n</code></pre> $$ Softmax(X) = \\frac{e^{x_i}}{\\displaystyle \\sum_{i \\in N } e^{x_i}} $$</li> </ul>"},{"location":"API/ml/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.3f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 3, 4, 9],\n    [3, 5, 7, 6]\n  ]);\n  print(mt.Softmax(dim: 0));\n  print(mt.Softmax(dim: 1));\n  print(mt.Softmax(dim: 2));\n}\n</code></pre>"},{"location":"API/ml/#output","title":"output","text":"<pre><code>[\n [ 0.083  0.225  0.610  0.083]\n [ 0.001  0.002  0.007  0.990]\n [ 0.012  0.089  0.657  0.242]\n]\n[\n [ 0.090  0.042  0.017  0.000]\n [ 0.245  0.114  0.047  0.952]\n [ 0.665  0.844  0.936  0.047]\n]\n[\n [ 0.000  0.001  0.002  0.000]\n [ 0.001  0.002  0.006  0.820]\n [ 0.002  0.015  0.111  0.041]\n]\n</code></pre>"},{"location":"API/ml/#leakyrelu","title":"LeakyReLU","text":"<ul> <li>LeakyReLU\u662f\u4e00\u79cd\u6539\u8fdb\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u65e8\u5728\u89e3\u51b3ReLU\u51fd\u6570\u4e2d\u8d1f\u8f93\u5165\u5bfc\u81f4\u7684\u96f6\u68af\u5ea6\u95ee\u9898 <pre><code>T LeakyReLU({double alpha = 0.01})\n</code></pre></li> </ul> <p>$$ LeakyReLU(X) = \\begin{cases} x, &amp; x 0 \\ \\alpha x, &amp; x \\le 0 \\end{cases} $$</p>"},{"location":"API/ml/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.6f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.LeakyReLU());\n}\n</code></pre>"},{"location":"API/ml/#output_1","title":"output","text":"<pre><code>[\n [ 1.000000  2.000000  3.000000  1.000000]\n [ 2.000000  0.000000 -0.040000 -0.020000]\n [ 0.000000  5.000000  7.000000 -0.060000]\n]\n</code></pre>"},{"location":"API/ml/#relu","title":"ReLU","text":"<ul> <li>\u6fc0\u6d3b\u51fd\u6570ReLU <pre><code>T ReLU()\n</code></pre> $$ ReLU(x) = max(x, 0) $$</li> </ul>"},{"location":"API/ml/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.ReLU());\n}\n</code></pre>"},{"location":"API/ml/#output_2","title":"output","text":"<pre><code>[\n [  1   2   3   1]\n [  2   0  -0  -0]\n [  0   5   7  -0]\n]\n</code></pre>"},{"location":"API/ml/#sigmoid","title":"Sigmoid","text":"<ul> <li>\u6fc0\u6d3b\u51fd\u6570\uff0c\u4e5f\u88ab\u79f0\u4e3aS\u578b\u751f\u957f\u66f2\u7ebf <pre><code>T Sigmoid()\n</code></pre> $$ Sigmoid(x) = \\frac{1}{1 + e^{-x}} $$</li> </ul>"},{"location":"API/ml/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.Sigmoid());\n}\n</code></pre>"},{"location":"API/ml/#output_3","title":"output","text":"<pre><code>[\n [ 0.73106  0.88080  0.95257  0.73106]\n [ 0.88080  0.50000  0.01799  0.11920]\n [ 0.50000  0.99331  0.99909  0.00247]\n]\n</code></pre>"},{"location":"API/ml/#elu","title":"ELU","text":"<ul> <li>\u6fc0\u6d3b\u51fd\u6570ELU <pre><code>T ELU({required double alpha}) \n</code></pre> $$ ELU(x) = \\begin{cases} x, &amp;x 0 \\ \\alpha (e^x - 1), &amp; x \\le 0\\end{cases} $$</li> </ul>"},{"location":"API/ml/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.ELU(alpha: 0.1));\n}\n</code></pre>"},{"location":"API/ml/#output_4","title":"output","text":"<pre><code>[\n [ 1.00000  2.00000  3.00000  1.00000]\n [ 2.00000  0.00000 -0.09817 -0.08647]\n [ 0.00000  5.00000  7.00000 -0.09975]\n]\n</code></pre>"},{"location":"API/ml/#swish","title":"Swish","text":"<ul> <li>Swish\u662f\u4e00\u79cd\u81ea\u6211\u95e8\u63a7\u7684\u6fc0\u6d3b\u51fd\u6570 <pre><code>T Swish()\n</code></pre> $$ Swish(x) = x * Sigmoid(x) $$</li> </ul>"},{"location":"API/ml/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.Swish());\n}\n</code></pre>"},{"location":"API/ml/#output_5","title":"output","text":"<pre><code>[\n [ 0.73106  1.76159  2.85772  0.73106]\n [ 1.76159  0.00000 -0.07194 -0.23841]\n [ 0.00000  4.96654  6.99362 -0.01484]\n]\n</code></pre>"},{"location":"API/ml/#softsign","title":"Softsign","text":"<ul> <li>Softsign\u51fd\u6570\u662fTanh\u51fd\u6570\u7684\u53e6\u4e00\u4e2a\u66ff\u4ee3\u9009\u62e9 <pre><code>T Softsign()\n</code></pre> $$ Softsign(x) = \\frac{x}{1+ |x|} $$</li> </ul>"},{"location":"API/ml/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.Softsign());\n}\n</code></pre>"},{"location":"API/ml/#output_6","title":"output","text":"<pre><code>[\n [ 0.50000  0.66667  0.75000  0.50000]\n [ 0.66667  0.00000 -0.80000 -0.66667]\n [ 0.00000  0.83333  0.87500 -0.85714]\n]\n</code></pre>"},{"location":"API/ml/#softplus","title":"Softplus","text":"<ul> <li>Softplus\u51fd\u6570\u53ef\u4ee5\u770b\u4f5c\u662fReLU\u51fd\u6570\u7684\u5e73\u6ed1 <pre><code>T Softplus()\n</code></pre></li> </ul> <p>$$ Softplus(x) = log(1 + e^x) $$</p>"},{"location":"API/ml/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, -2],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.Softplus());\n}\n</code></pre>"},{"location":"API/ml/#output_7","title":"output","text":"<pre><code>[\n [ 1.31326  2.12693  3.04859  1.31326]\n [ 2.12693  0.69315  0.01815  0.12693]\n [ 0.69315  5.00672  7.00091  0.00248]\n]\n</code></pre>"},{"location":"API/ml/#mae","title":"MAE","text":"<ul> <li>\u5e73\u5747\u7edd\u5bf9\u503c\u8bef\u5dee\uff0c\u5b83\u8868\u793a\u9884\u6d4b\u503c\u548c\u89c2\u6d4b\u503c\u4e4b\u95f4\u7edd\u5bf9\u8bef\u5dee\u7684\u5e73\u5747\u503c <pre><code>Object MAE({required Matrix other, int dim = -1})\n</code></pre> $$ MAE(X, h) = \\frac{1}{n} \\displaystyle \\sum_{i \\in N} |y_i - \\hat{y_i}| $$</li> </ul>"},{"location":"API/ml/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [1.2, 1.3, 4.2, 2.2, 1.4],\n    [0, 0.3, 2.3, 1.3, 1.7],\n    [1.9, 1.83, 1.2, 2, 2.1]\n  ]);\n  print(mt.MAE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 0));\n  print(mt.MAE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 1));\n  print(mt.MAE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 2));\n}\n</code></pre>"},{"location":"API/ml/#output_8","title":"output","text":"<pre><code>[1.06, 0.8, 0.8059999999999998]\n[0.6999999999999998, 0.61, 1.5666666666666667, 0.8333333333333334, 0.7333333333333334]\n0.8886666666666666\n</code></pre>"},{"location":"API/ml/#mse","title":"MSE","text":"<ul> <li>MSE\u901a\u8fc7\u8ba1\u7b97\u9884\u6d4b\u503c\u548c\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8bef\u5dee\u5e73\u65b9\u7684\u5e73\u5747\u503c\uff0c\u6765\u8861\u91cf\u6a21\u578b\u7684\u9884\u6d4b\u6027\u80fd <pre><code>Object MSE({required Matrix other, int dim = -1})\n</code></pre></li> </ul> <p>$$ MSE = \\frac{1}{n} \\displaystyle \\sum_{i \\in N} (y_i - \\hat{y}_i) ^2 $$</p>"},{"location":"API/ml/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  var mt = Matrix.fromList([\n    [1.2, 1.3, 4.2, 2.2, 1.4],\n    [0, 0.3, 2.3, 1.3, 1.7],\n    [1.9, 1.83, 1.2, 2, 2.1]\n  ]);\n  print(mt.MSE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 0));\n  print(mt.MSE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 1));\n  print(mt.MSE(other: Matrix.fill(number: 1, row: mt.shape[0], column: mt.shape[1]), dim: 2));\n}\n</code></pre>"},{"location":"API/ml/#output_9","title":"output","text":"<pre><code>[2.3940000000000006, 0.7519999999999999, 0.74978]\n[0.6166666666666666, 0.42296666666666666, 3.99, 0.8433333333333334, 0.62]\n1.2985933333333333\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1</p>"},{"location":"API/random/","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":""},{"location":"API/random/#mean","title":"mean","text":"<ul> <li>\u83b7\u53d6\u5747\u503c <pre><code>Object mean({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/random/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, double.infinity],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.mean(dim: 0));\n  print(mt.mean(dim: 1));\n  print(mt.mean(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output","title":"output","text":"<pre><code>[1.75, Infinity, 1.5]\n[1.0, 2.3333333333333335, 2.0, Infinity]\nInfinity\n</code></pre>"},{"location":"API/random/#median","title":"median","text":"<ul> <li>\u83b7\u53d6\u4e2d\u4f4d\u6570 <pre><code>Object median({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/random/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, double.infinity],\n    [0, 5, 7, -6]\n  ]);\n  print(mt.median(dim: 0));\n  print(mt.median(dim: 1));\n  print(mt.median(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output_1","title":"output","text":"<pre><code>[1.5, 1.0, 2.5]\n[1.0, 2.0, 3.0, 1.0]\n1.5\n</code></pre>"},{"location":"API/random/#mode","title":"mode","text":"<ul> <li>\u6839\u636e\u89c4\u5219\uff0c\u5728n\u79cd\u5143\u7d20\u4e2d\u83b7\u53d6\u4f17\u6570</li> <li>\u5f53\u5143\u7d20\u4e2a\u6570\u90fd\u4e00\u6837\u7684\u65f6\u5019\u8fd4\u56denull</li> <li>\u5f53\u6709t\u79cd\u5143\u7d20\u4e2a\u6570\u76f8\u540c\u7684\u65f6\u5019\uff08t&lt;n\uff09\uff0c\u53d6\u7b2c\u4e00\u79cd\u5143\u7d20 <pre><code>dynamic mode({int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/random/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, double.infinity],\n    [0, 5, 7, -6],\n    [1, 2, 7, -6],\n    [1, 1, 2, 2]\n  ]);\n  print(mt.mode(dim: 0));\n  print(mt.mode(dim: 1));\n  print(mt.mode(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output_2","title":"output","text":"<pre><code>[1.0, null, null, null, null]\n[1.0, 2.0, 7.0, -6.0]\n1.0\n</code></pre>"},{"location":"API/random/#shaketotal","title":"shakeTotal","text":"<ul> <li>\u5bf9\u6570\u636e\u8fdb\u884c\u968f\u673a\u6296\u52a8\uff0c\u8303\u56f4(-bias,bias) <pre><code>void shakeTotal({double bias = 1.0, int? seed}) \n</code></pre></li> </ul>"},{"location":"API/random/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, -4, double.infinity],\n    [0, 5, 7, -6],\n    [1, 2, 7, -6],\n    [1, 1, 2, 2]\n  ]);\n  mt..shakeTotal(bias: 1)..visible();\n}\n</code></pre>"},{"location":"API/random/#output_3","title":"output","text":"<pre><code>[\n [ 1.12163  1.92272  3.81764  0.58426]\n [ 1.56001  0.71463 -3.86042 Infinity]\n [ 0.74075  4.35658  6.08286 -5.54264]\n [ 1.96749  1.04282  7.97017 -6.52791]\n [ 0.38011  1.53244  1.20357  2.65322]\n]\n</code></pre>"},{"location":"API/random/#shakepercent","title":"shakePercent","text":"<ul> <li>\u5bf9\u6307\u5b9a\u6bd4\u4f8b\u7684\u6570\u636e\u8fdb\u884c\u968f\u673a\u6296\u52a8\uff0c\u8303\u56f4(-bias,bias) <pre><code>void shakePercent({double bias = 1.0, double percent = 0.5, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, 9, 7],\n    [0, 5, 7, -6],\n    [1, 2, 7, -6],\n    [1, 1, 2, 2]\n  ]);\n  mt..shakePercent(bias: 1, percent: 0.5, seed: 0)..visible();\n  print(mt.count((x) =&gt; x == x.toInt(), dim: -1));\n}\n</code></pre>"},{"location":"API/random/#output_4","title":"output","text":"<pre><code>[\n [ 1.00000  2.00000  3.00000  1.59552]\n [ 2.00000 -0.16072 -4.00000 Infinity]\n [ 0.36040  5.59324  7.00000 -6.78034]\n [ 1.64683  2.62451  7.00000 -6.00000]\n [ 1.00000  1.00000  1.14995  2.11472]\n]\n10\n</code></pre>"},{"location":"API/random/#shakeprobably","title":"shakeProbably","text":"<ul> <li>\u5bf9\u6bcf\u4e2a\u6570\u636e\u6982\u7387\u6027\u968f\u673a\u6296\u52a8\uff0c\u8303\u56f4(-bias,bias) <pre><code>void shakeProbably({double bias = 1.0, double p = 0.5, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = Matrix.fromList([\n    [1, 2, 3, 1],\n    [2, 0, 9, 7],\n    [0, 5, 7, -6],\n    [1, 2, 7, -6],\n    [1, 1, 2, 2]\n  ]);\n  mt\n    ..shakeProbably(bias: 1, p: 0.75, seed: 0)\n    ..visible()\n    ..shakeProbably(bias: 1, p: 0.2, seed: 0)\n    ..visible();\n}\n</code></pre>"},{"location":"API/random/#output_5","title":"output","text":"<pre><code>[\n [ 1.00000  2.00000  3.11472  1.95573]\n [ 2.00000  0.62451  8.18995  7.97010]\n [ 0.79149  5.74322  7.02362 -5.83102]\n [ 1.00000  1.31213  6.28323 -6.08534]\n [ 0.03197  0.66427  2.21624  2.00000]\n]\n[\n [ 1.00000  2.00000  3.11472  1.95573]\n [ 2.00000  0.62451  8.18995  7.97010]\n [ 0.79149  5.68677  7.02362 -5.83102]\n [ 1.00000  1.31213  6.28323 -6.08534]\n [ 0.03197  0.66427  2.21624  2.02362]\n]\n</code></pre>"},{"location":"API/random/#shuffle","title":"shuffle","text":"<ul> <li>\u6253\u4e71\u6570\u636e <pre><code>void shuffle({int? seed, int dim = -1})\n</code></pre></li> </ul>"},{"location":"API/random/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%8.0f\";\n  var mt = Matrix.fromList([\n    [1, double.nan, 3, 1],\n    [2, 0, 9, 7],\n    [0, 5, 7, -6],\n    [1, double.infinity, 7, -6],\n    [1, 1, double.negativeInfinity, 2]\n  ]);\n  mt\n    ..shuffle(dim: 0)\n    ..visible()\n    ..shuffle(dim: 1)\n    ..visible()\n    ..shuffle(dim: 2)\n    ..visible();\n}\n</code></pre>"},{"location":"API/random/#output_6","title":"output","text":"<pre><code>[\n [        1       NaN         1         3]\n [        9         7         0         2]\n [        7         5        -6         0]\n [       -6  Infinity         1         7]\n [        1 -Infinity         2         1]\n]\n[\n [       -6 -Infinity         1         0]\n [        1         7         2         7]\n [        9  Infinity        -6         2]\n [        7         5         0         3]\n [        1       NaN         1         1]\n]\n[\n [        1         1         2 -Infinity]\n [       -6         7         0         2]\n [ Infinity         5         1         7]\n [       -6         1         0         1]\n [        3         9       NaN         7]\n]\n</code></pre>"},{"location":"API/random/#uniform","title":"uniform","text":"<ul> <li>\u5747\u5300\u5206\u5e03 <pre><code>static T uniform&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {double lb = 0.0,\n      double ub = 1.0,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.uniform&lt;Matrix&gt;(row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_7","title":"output","text":"<pre><code>[\n [ 0.72182  0.36967  0.50301  0.59886  0.95493  0.90183  0.50644  0.13281]\n [ 0.92723  0.96414  0.03060  0.92897  0.90201  0.29696  0.81846  0.58139]\n]\n</code></pre>"},{"location":"API/random/#normal","title":"normal","text":"<ul> <li>\u6b63\u6001\u5206\u5e03 <pre><code>static T normal&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {double mu = 0.0,\n      double sigma = 1.0,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.normal&lt;Matrix&gt;(row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_8","title":"output","text":"<pre><code>[\n [-2.11616 -2.44480  2.95000  1.16511 -1.44609  1.14767 -0.28159 -0.22208]\n [-0.23525  0.78347 -0.37689  1.11326 -0.02535  0.54844 -1.11553  0.25712]\n]\n</code></pre>"},{"location":"API/random/#binomial","title":"binomial","text":"<ul> <li>\u4e8c\u9879\u5206\u5e03</li> <li>n\u662f\u8bd5\u9a8c\u6b21\u6570\uff0cp\u662f\u6210\u529f\u7684\u6982\u7387 <pre><code>static T binomial&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int n,\n      required double p,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  MatrixRandom.binomial&lt;Matrix&gt;(n: 10, p: 0.4, row: 2, column: 5).visible();\n}\n</code></pre>"},{"location":"API/random/#output_9","title":"output","text":"<pre><code>[\n [  5   6   4   3   4]\n [  4   1   3   4   4]\n]\n</code></pre>"},{"location":"API/random/#chisquare","title":"chisquare","text":"<ul> <li>\u5361\u65b9\u5206\u5e03\uff0c\u5176\u4e2d\u6b63\u6574\u6570df\u662f\u81ea\u7531\u5ea6 <pre><code>static T chisquare&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int df, required int row, required int column, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.chisquare&lt;Matrix&gt;(df: 5, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_10","title":"output","text":"<pre><code>[\n [ 2.02621  3.94982  2.45784  3.73202  4.25828  8.80980  3.70948 10.56275]\n [ 3.50148  1.81609  6.09900  7.97319  7.45826  4.74143  2.30963  8.61327]\n]\n</code></pre>"},{"location":"API/random/#exponential","title":"exponential","text":"<ul> <li>\u6307\u6570\u5206\u5e03\uff0c\u6b63\u5b9e\u6570lambda\u662f\u901f\u7387\u53c2\u6570 <pre><code>static T exponential&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double lambda,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.exponential&lt;Matrix&gt;(lambda: 2.5, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_11","title":"output","text":"<pre><code>[\n [ 0.08276  0.00139  0.29485  0.79533  0.12472  0.98942  0.74717  0.62893]\n [ 0.61888  1.48321  0.20256  0.03876  0.70940  0.35311  0.40923  0.24835]\n]\n</code></pre>"},{"location":"API/random/#f","title":"f","text":"<ul> <li>F \u5206\u5e03\u3002\u5176\u4e2dd1\u548cd2\u662f\u4e24\u4e2a\u72ec\u7acb\u5361\u65b9\u5206\u5e03\u7684\u81ea\u7531\u5ea6 <pre><code>static T f&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int d1,\n      required int d2,\n      required int row,\n      required int column,\n      int? seed}) \n</code></pre></li> </ul>"},{"location":"API/random/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.f&lt;Matrix&gt;(d1: 1, d2: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_12","title":"output","text":"<pre><code>[\n [  4.93056   0.11101   0.01529   1.57699   1.16049   0.71412   0.59531   1.83859]\n [  4.73860   0.91165   2.57683   0.11337   5.69172   0.01585   0.11492   0.44708]\n]\n</code></pre>"},{"location":"API/random/#gamma","title":"gamma","text":"<ul> <li>\u4f3d\u9a6c\u5206\u5e03\u3002\u5176\u4e2dk\u662f\u5f62\u72b6\u53c2\u6570\uff0ctheta\u662f\u5c3a\u5ea6\u53c2\u6570\u3002\u5b83\u4fe9\u90fd\u662f\u6b63\u6570 <pre><code>static T gamma&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double k,\n      required double theta,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.gamma&lt;Matrix&gt;(k: 1, theta: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_13","title":"output","text":"<pre><code>[\n [  5.14067   1.42020   1.75349   0.71228   0.01489   0.82426   0.00388   0.06545]\n [  2.22228   7.38054   0.33947   0.71414   0.19316   3.16064   0.71124   3.24876]\n]\n</code></pre>"},{"location":"API/random/#beta","title":"beta","text":"<ul> <li>Beta\u5206\u5e03\uff0c\u53c2\u6570a\u548cb\u5206\u522b\u662f\u5206\u5b50\u548c\u5206\u6bcd\u7684\u5f62\u72b6\u53c2\u6570 <pre><code>static T beta&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double a,\n      required double b,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_14","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.beta&lt;Matrix&gt;(a: 1, b: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_14","title":"output","text":"<pre><code>[\n [  0.49407   0.39837   0.09070   0.11256   0.59922   0.50666   0.15258   0.70883]\n [  0.18135   0.19389   0.18008   0.41081   0.25688   0.21515   0.07910   0.33202]\n]\n</code></pre>"},{"location":"API/random/#dirichlet","title":"dirichlet","text":"<ul> <li>\u72c4\u5229\u514b\u96f7\u5206\u5e03\uff0calpha\u53c2\u6570\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5217\u4e14\u4e0d\u5c0f\u4e8e2\u7684\u6d6e\u70b9\u5e8f\u5217</li> <li>alpha \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd\u5fc5\u987b\u5927\u4e8e0 <pre><code>static T dirichlet&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required List&lt;double&gt; alpha, required int row, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_15","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.dirichlet&lt;Matrix&gt;(alpha: [1, 3.3, 1.5, 0.78, 2, 2, 1.7, 2], row: 2).visible();\n}\n</code></pre>"},{"location":"API/random/#output_15","title":"output","text":"<pre><code>[\n [  0.09739   0.46528   0.03357   0.00008   0.14472   0.13976   0.08812   0.03108]\n [  0.19171   0.25310   0.14525   0.02408   0.14559   0.16670   0.03892   0.03466]\n]\n</code></pre>"},{"location":"API/random/#geometric","title":"geometric","text":"<ul> <li>\u51e0\u4f55\u5206\u5e03\uff0c\u5176\u4e2dp\u662f\u6210\u529f\u7684\u6982\u7387 <pre><code>static T geometric&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double p, required int row, required int column, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_16","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  MatrixRandom.geometric&lt;Matrix&gt;(p: 0.25, row: 2, column: 10).visible();\n}\n</code></pre>"},{"location":"API/random/#output_16","title":"output","text":"<pre><code>[\n [  7   2   3   1   1   5   4   1  18   1]\n [ 10   1   4   2   1   7   2   2   3   9]\n]\n</code></pre>"},{"location":"API/random/#gumbel","title":"gumbel","text":"<ul> <li>Gumbel \u5206\u5e03</li> <li>\u5176\u4e2dloc\u662f\u5206\u5e03\u4f17\u6570\u7684\u4f4d\u7f6e</li> <li>scale\u662f\u5206\u5e03\u7684\u5c3a\u5ea6\u53c2\u6570\uff0c\u5fc5\u987b\u4e3a\u975e\u8d1f\u503c <pre><code>static T gumbel&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double loc,\n      required double scale,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_17","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.gumbel&lt;Matrix&gt;(loc: 2, scale: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_17","title":"output","text":"<pre><code>[\n [ 0.79973  1.47329  0.77731  1.35254  1.03301  6.36100  5.02553  0.39647]\n [ 2.50385  3.34456  1.25769 -0.80591  6.03160  2.28924  2.21749  1.99499]\n]\n</code></pre>"},{"location":"API/random/#hypergeometric","title":"hypergeometric","text":"<ul> <li>\u8d85\u51e0\u4f55\u5206\u5e03\uff0c\u53c2\u6570N\u3001K\u3001n\u5206\u522b\u8868\u793a\u5143\u7d20\u603b\u6570\u3001\u76ee\u6807\u5143\u7d20\u603b\u6570\u3001\u62bd\u53d6\u6837\u672c\u6570\uff0c\u6700\u7ec8\u5f97\u5230\u6837\u672c\u4e2d\u76ee\u6807\u5143\u7d20\u7684\u6570\u91cf <pre><code>static T hypergeometric&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int N,\n      required int K,\n      required int n,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_18","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  MatrixRandom.hypergeometric&lt;Matrix&gt;(N: 20,\n      K: 10,\n      n: 5,\n      row: 2,\n      column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_18","title":"output","text":"<pre><code>[\n [  0   2   2   2   2   2   2   1]\n [  3   2   1   2   4   2   3   3]\n]\n</code></pre>"},{"location":"API/random/#laplace","title":"laplace","text":"<ul> <li>\u62c9\u666e\u62c9\u65af\u5206\u5e03\uff0c\u53c8\u79f0\u53cc\u6307\u6570\u5206\u5e03\uff0cmu\u4e3a\u4f4d\u7f6e\u53c2\u6570\uff0c\u975e\u8d1fb\u4e3a\u5c3a\u5ea6\u53c2\u6570\u3002 <pre><code>static T laplace&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double mu,\n      required double b,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_19","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.laplace&lt;Matrix&gt;(mu: 0, b: 0.5, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_19","title":"output","text":"<pre><code>[\n [ 0.62375 -0.39557  0.05964  0.69604 -0.19187 -0.31969 -0.05227  0.16362]\n [ 0.00698 -1.03409 -0.06551  0.76127  2.03078 -0.47385  0.63251  0.91648]\n]\n</code></pre>"},{"location":"API/random/#logistic","title":"logistic","text":"<ul> <li>Logistic\u5206\u5e03\uff0c\u5176\u4e2dmu\u548cs\u5206\u522b\u662f\u4f4d\u7f6e\u548c\u5c3a\u5ea6\u53c2\u6570\uff0c\u4e14s\u5927\u4e8e 0 <pre><code>static T logistic&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double mu,\n      required double s,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_20","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.logistic&lt;Matrix&gt;(mu: 1, s: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_20","title":"output","text":"<pre><code>[\n [-5.19389 -5.07993 -0.57864  3.94618 -2.20507 -1.24739  1.12640  2.20015]\n [ 0.49239  3.60076  3.29199  2.94326 -1.70884  4.28270  2.13897 -4.37265]\n]\n</code></pre>"},{"location":"API/random/#lognormal","title":"lognormal","text":"<ul> <li>\u5bf9\u6570\u6b63\u6001\u5206\u5e03\uff0c\u5176\u4e2dmu\u548csigma\u5206\u522b\u662f\u4f4d\u7f6e\u53c2\u6570\u548c\u5c3a\u5ea6\u53c2\u6570\uff0c\u4e14sigma\u5927\u4e8e 0 <pre><code>static T lognormal&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double mu,\n      required double sigma,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_21","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.lognormal&lt;Matrix&gt;(mu: 2, sigma: 0.5, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_21","title":"output","text":"<pre><code>[\n [18.12334 12.84363  5.79773  6.37634  4.43129  8.25890  5.64034  7.05924]\n [ 9.87825  7.99804  6.27516  4.19677 11.05468 11.32761  6.01271  5.69678]\n]\n</code></pre>"},{"location":"API/random/#multinomial","title":"multinomial","text":"<ul> <li>\u591a\u9879\u5206\u5e03\uff0c\u5176\u4e2dn\u662f\u8bd5\u9a8c\u6b21\u6570\uff0cp\u662f\u603b\u548c\u4e3a1\u7684\u6982\u7387\u5217\u8868 <pre><code>static T multinomial&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int n, required List&lt;double&gt; p, required int row, int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_22","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  MatrixRandom.multinomial&lt;Matrix&gt;(n: 10, p: [0.1, 0.15, 0.05, 0.2, 0.4, 0.1], row: 2).visible();\n}\n</code></pre>"},{"location":"API/random/#output_22","title":"output","text":"<pre><code>[\n [  0   2   0   2   5   1]\n [  1   1   0   4   4   0]\n]\n</code></pre>"},{"location":"API/random/#poisson","title":"poisson","text":"<ul> <li>\u6cca\u677e\u5206\u5e03\uff0c\u53c2\u6570lambda\u8868\u793a\u5e73\u5747\u503c <pre><code>static T poisson&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double lambda,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_23","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  MatrixRandom.poisson&lt;Matrix&gt;(lambda: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_23","title":"output","text":"<pre><code>[\n [  4   2   5   0   3   4   1   1]\n [  3   1   0   3   2   3   5   0]\n]\n</code></pre>"},{"location":"API/random/#cauchy","title":"cauchy","text":"<ul> <li>\u67ef\u897f\u5206\u5e03\uff0c\u53c2\u6570x0\u8868\u793a\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u6b63\u6570gamma\u8868\u793a\u5c3a\u5ea6 <pre><code>static T cauchy&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double x0,\n      required double gamma,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_24","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.cauchy&lt;Matrix&gt;(x0: 0, gamma: 1, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_24","title":"output","text":"<pre><code>[\n [-36.62911  0.72481  3.37703  1.14735  0.12744 -0.28093 -5.73963  0.85222]\n [ 2.07105  1.33930 -0.90362 -0.71522 -4.79772  3.65556 -0.45629 -0.69549]\n]\n</code></pre>"},{"location":"API/random/#pareto","title":"pareto","text":"<ul> <li>\u5e15\u7d2f\u6258\u5206\u5e03\uff0c\u6b63\u6570xm\u662f\u5c3a\u5ea6\u53c2\u6570\uff0c\u6b63\u6570alpha\u662f\u5f62\u72b6\u53c2\u6570 <pre><code>static T pareto&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double xm,\n      required double alpha,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_25","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.pareto&lt;Matrix&gt;(xm: 1, alpha: 1, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_25","title":"output","text":"<pre><code>[\n [ 2.13617  1.05138  2.59410  1.69382  2.13383  7.34943  1.93597  1.61736]\n [ 1.35915  1.16898  4.63186  4.15207  1.76849 14.69354  2.31302  2.73154]\n]\n</code></pre>"},{"location":"API/random/#rayleigh","title":"rayleigh","text":"<ul> <li>\u745e\u5229\u5206\u5e03\uff0c\u6b63\u6570sigma\u662f\u5c3a\u5ea6\u53c2\u6570\u3002 <pre><code>static T rayleigh&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double sigma,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_26","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.rayleigh&lt;Matrix&gt;(sigma: 1, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_26","title":"output","text":"<pre><code>[\n [ 1.07546  2.06677  1.11999  0.53733  1.10249  1.15054  2.22445  1.53285]\n [ 0.77856  1.41063  0.24988  2.02035  1.24209  1.57036  1.73024  2.23977]\n]\n</code></pre>"},{"location":"API/random/#triangular","title":"triangular","text":"<ul> <li>\u4e09\u89d2\u5206\u5e03\uff0c\u4e0b\u9650a\uff0c\u4e0a\u9650b\uff0c\u4f17\u6570c\u3002 <pre><code>static T triangular&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double a,\n      required double b,\n      required double c,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_27","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.triangular&lt;Matrix&gt;(a: -2, b: 3, c: 0, row: 2, column: 9).visible();\n}\n</code></pre>"},{"location":"API/random/#output_27","title":"output","text":"<pre><code>[\n [ 0.71009 -0.91656  0.16837 -1.15603  1.52162  0.94240  0.88847  0.36057  0.14813]\n [ 1.97316 -0.85960  0.44336 -0.01748  0.50504  2.18705 -0.69879 -0.07549 -0.01691]\n]\n</code></pre>"},{"location":"API/random/#wald","title":"wald","text":"<ul> <li>\u9006\u9ad8\u65af\u5206\u5e03\uff08\u4e5f\u79f0\u4e3a Wald \u5206\u5e03\uff09\uff0c\u5747\u503c\u4e3a\u6b63\u6570mu\uff0c\u5f62\u72b6\u53c2\u6570\u4e3alambda <pre><code>static T wald&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double mu,\n      required double lambda,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_28","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.wald&lt;Matrix&gt;(mu: 1, lambda: 2, row: 2, column: 9).visible();\n}\n</code></pre>"},{"location":"API/random/#output_28","title":"output","text":"<pre><code>[\n [ 0.81247  0.62909  0.45730  3.96918  1.60884  0.48366  2.83001  1.14535  0.35252]\n [ 0.59226  0.86075  1.60548  0.96771  0.46557  0.68437  0.45168  1.52735  0.64942]\n]\n</code></pre>"},{"location":"API/random/#weibull","title":"weibull","text":"<ul> <li>\u5a01\u5e03\u5c14\u5206\u5e03\uff0c\u5c3a\u5ea6\u53c2\u6570lambda\u548c\u5f62\u72b6\u53c2\u6570k\u5747\u4e3a\u6b63\u6570 <pre><code>static T weibull&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double k,\n      required double lambda,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_29","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.weibull&lt;Matrix&gt;(k: 1, lambda: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_29","title":"output","text":"<pre><code>[\n [ 1.77253  2.04454  0.79726  0.03651  0.41815  1.14795  0.26157  0.63567]\n [ 1.26025  0.62709  2.27595  0.50974  0.14316  2.67833  0.65225  1.38974]\n]\n</code></pre>"},{"location":"API/random/#vonmises","title":"vonmises","text":"<ul> <li>\u51af\u00b7\u7c73\u585e\u65af\u5206\u5e03\uff0c\u53c2\u6570mu\u548ck\u5206\u522b\u8868\u793a\u4f4d\u7f6e\u548c\u6d53\u5ea6\uff0ck &gt; 0 <pre><code>static T vonmises&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double k,\n      required double mu,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_30","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.vonmises&lt;Matrix&gt;(k: 1, mu: 2, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_30","title":"output","text":"<pre><code>[\n [ 0.21612  2.38583  2.33520  2.44294  0.70750  1.90340  2.35548  1.59108]\n [ 3.54407  2.16340  1.06748  3.17789  0.73116  1.55998  3.85376  1.58202]\n]\n</code></pre>"},{"location":"API/random/#t","title":"t","text":"<ul> <li>\u5b66\u751f t \u5206\u5e03\uff0c\u6b63\u6574\u6570 v\u8868\u793a\u81ea\u7531\u5ea6\uff0cmu\u662f\u975e\u4e2d\u5fc3\u53c2\u6570\u3002 <pre><code>static T t&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required int v,\n      required double mu,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_31","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.t&lt;Matrix&gt;(v: 5, mu: 1, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_31","title":"output","text":"<pre><code>[\n [ 0.62758  2.62640  2.62945  1.69008 -2.20297 -0.34357  2.35201  0.05813]\n [ 0.77000  0.98190  4.40171  1.47281  2.35428  0.31133  2.76713  1.65198]\n]\n</code></pre>"},{"location":"API/random/#frechet","title":"frechet","text":"<ul> <li>Fr\u00e9chet\u5206\u5e03\uff0c\u4e5f\u79f0\u4e3a\u9006\u5a01\u5e03\u5c14\u5206\u5e03\uff0c\u6b63\u6570alpha\u662f\u5f62\u72b6\u53c2\u6570\uff0c\u6bd4\u4f8b\u53c2\u6570s\u4e5f\u662f\u6b63\u6570\uff0cm\u662f\u4f4d\u7f6e\u53c2\u6570 <pre><code>static T frechet&lt;T extends MatrixBase&lt;T&gt;&gt;(\n      {required double alpha,\n      double s = 1.0,\n      double m = 0.0,\n      required int row,\n      required int column,\n      int? seed})\n</code></pre></li> </ul>"},{"location":"API/random/#test_32","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.5f\";\n  MatrixRandom.frechet&lt;Matrix&gt;(alpha: 1, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_32","title":"output","text":"<pre><code>[\n [ 1.03756  0.66498  6.86990  0.72205  1.37044 83.75532  0.82821  0.91106]\n [ 0.80854  2.80326  0.72205  2.69117  6.89905  0.71063  2.93813  2.07763]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u53ef\u89c6\u5316\u7684\u62bd\u8c61\u5b9e\u73b0</p>"},{"location":"API/utils/","title":"\u5de5\u5177\u5305","text":""},{"location":"API/utils/#typed","title":"Typed","text":"<ul> <li>Typed\u679a\u4e3e\u76ee\u524d\u4f5c\u7528\u4e8e\u8f6c\u6362Matrix\u6570\u636e\u5230\u6307\u5b9a\u7c7b\u578b\u7684\u4e8c\u7ef4\u5217\u8868\uff0c\u5177\u4f53\u8bf7\u770btoList <pre><code>enum Typed { int8, int16, int32, int64, int, float32, float64, double, bool, uint8, uint16, uint32, uint64, complex }\n</code></pre></li> </ul>"},{"location":"API/utils/#alert","title":"Alert","text":"<ul> <li>Alert\u7c7b\u7528\u4e8e\u8b66\u544a\u67d0\u4e9b\u7c7b\u6216\u8005\u65b9\u6cd5 <pre><code>final class Alert {\n  final String msg;\n  const Alert(this.msg);\n  String toString() =&gt; 'Alert : $msg';\n}\n</code></pre></li> </ul>"},{"location":"API/utils/#since","title":"Since","text":"<ul> <li>Since\u7c7b\u7528\u4e8e\u5728\u67d0\u4e9b\u7c7b\u6216\u8005\u65b9\u6cd5\u53d1\u751f\u91cd\u5927\u53d8\u5316\u7684\u65f6\u5019\u5907\u6ce8 <pre><code>final class Since {\n  final String msg;\n  const Since(this.msg);\n  String toString() =&gt; 'Since : $msg';\n}\n</code></pre></li> </ul>"},{"location":"API/utils/#marker","title":"Marker","text":"<ul> <li>\u901a\u7528\u6807\u8bb0 <pre><code>final class Marker {\n  final String? msg;\n  const Marker([String? msg]) : msg = msg ?? \"\";\n  String toString() =&gt; 'Marker : $msg';\n}\n</code></pre></li> </ul>"},{"location":"API/utils/#range","title":"Range","text":"<ul> <li>[Range] \u662f\u8303\u56f4\u7684\u62bd\u8c61\uff0c\u5176\u4e2d [start] \u4e0d\u80fd\u5927\u4e8e [end]</li> <li>[count] \u8868\u793a\u8303\u56f4\u7684\u7b49\u4efd\u6570</li> <li>\u5f53 [count] \u7b49\u4e8e\u96f6\u65f6\uff0c\u8868\u793a\u8fde\u7eed\u8303\u56f4</li> <li>[closure_left]\u3001[closure_right] \u8868\u793a\u8303\u56f4\u662f\u5426\u5305\u542b\u8fb9\u754c\u503c</li> <li>\u9ed8\u8ba4\u4e3a\u5de6\u95ed\u5408\u3001\u53f3\u5f00\u653e\u7684\u8fde\u7eed\u8303\u56f4</li> <li>\u5f53\u8303\u56f4\u5728\u4efb\u4f55\u8fb9\u754c\u65e0\u9650\u5927\u65f6\uff0ccount \u59cb\u7ec8\u4e3a 0\uff0c\u4e14\u8fb9\u754c\u53ea\u80fd\u5f00\u653e</li> </ul> <pre><code>Range({\n    required this.start,\n    required this.end,\n    int count = 0,\n    bool closure_left = true,\n    bool closure_right = false,\n  })\n</code></pre>"},{"location":"API/visualization/","title":"\u53ef\u89c6\u5316\u7684\u62bd\u8c61\u5b9e\u73b0","text":""},{"location":"API/visualization/#tohist","title":"toHist","text":"<ul> <li>\u751f\u6210\u4e0e\u76f4\u65b9\u56fe\u5339\u914d\u7684\u53ef\u89c6\u5316\u62bd\u8c61</li> <li>[start] \u4e3a\u8ba1\u6570\u503c\u7684\u8d77\u70b9\uff0c[end] \u4e3a\u8ba1\u6570\u503c\u7684\u7ec8\u70b9</li> <li>[counts] \u8868\u793a\u533a\u95f4\u6570\uff0c\u533a\u95f4\u9075\u5faa\u5de6\u95ed\u53f3\u5f00\u7684\u539f\u5219</li> <li>\u6b64\u65b9\u6cd5\u7684\u7075\u6d3b\u6027\u5728\u4e8e\u53ef\u4ee5\u5bf9\u67d0\u4e9b\u533a\u95f4\u6570\u636e\u8fdb\u884c\u76f4\u65b9\u56fe\u8ba1\u6570</li> <li>\u8bf7\u63d0\u53d6\u5e76\u5904\u7406\u7279\u6b8a\u503c</li> </ul> <pre><code>Map&lt;Range, int&gt; toHist({required double start, required double end, required int counts })\n</code></pre>"},{"location":"API/visualization/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = MatrixBase.range&lt;Matrix&gt;(row: 5, column: 6, start: 1)..visible();\n  print(mt.toHist(start: 1, end: 20, counts: 2));\n}\n</code></pre>"},{"location":"API/visualization/#output","title":"output","text":"<pre><code>[\n [1.00000 2.00000 3.00000 4.00000 5.00000 6.00000]\n [7.00000 8.00000 9.00000 10.00000 11.00000 12.00000]\n [13.00000 14.00000 15.00000 16.00000 17.00000 18.00000]\n [19.00000 20.00000 21.00000 22.00000 23.00000 24.00000]\n [25.00000 26.00000 27.00000 28.00000 29.00000 30.00000]\n]\n{Range: [1.0, 10.5), count: 0: 10, Range: [10.5, 20.0), count: 0: 9}\n</code></pre>"},{"location":"API/visualization/#tobar","title":"toBar","text":"<ul> <li>\u62bd\u8c61\u76f4\u65b9\u56fe\u7edf\u8ba1 <pre><code>Map&lt;double, int&gt; toBar()\n</code></pre></li> </ul>"},{"location":"API/visualization/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fromList([\n    [1, 4, 0, 8, 2],\n    [2, 1, 9, 8, 2],\n    [8, 2, 0, 8, 2],\n    [5, 4, 6, 2, 8],\n  ])..visible();\n  print(mt.toBar());\n}\n</code></pre>"},{"location":"API/visualization/#output_1","title":"output","text":"<pre><code>[\n [1.00000 4.00000 0.00000 8.00000 2.00000]\n [2.00000 1.00000 9.00000 8.00000 2.00000]\n [8.00000 2.00000 0.00000 8.00000 2.00000]\n [5.00000 4.00000 6.00000 2.00000 8.00000]\n]\n{1.0: 2, 4.0: 2, 0.0: 2, 8.0: 5, 2.0: 6, 9.0: 1, 5.0: 1, 6.0: 1}\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u590d\u6570\u5b9a\u4e49</p>"}]}