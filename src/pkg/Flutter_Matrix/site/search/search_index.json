{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flutter Matrix\u662f\u4ec0\u4e48","text":"<p>Flutter Matrix\u662f\u4e13\u95e8\u4e3aFlutter\u8bbe\u8ba1\u7684\u77e9\u9635\u5e93\uff0c\u6db5\u76d6\u4e86\u57fa\u672c\u77e9\u9635\u64cd\u4f5c\u3001\u6570\u5b66\u8fd0\u7b97\u3001\u7ebf\u6027\u4ee3\u6570\u3001\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u3001\u96c6\u5408\u6a21\u62df\u7b49\u65b9\u6cd5\uff0c\u540c\u65f6\u4e5f\u62d3\u5c55\u4e86\u590d\u6570\u8fd0\u7b97\u7b49\uff0c\u4e0d\u8fc7Flutter Matrix\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5728\u7eafDart\u7ec8\u7aef\u4e0a\u3002 \u4e0e\u4e4b\u524d\u5199\u8fc7\u7684Matply\u76f8\u6bd4\uff0cFlutter Matrix\u8ffd\u6c42\u5168\u5e73\u53f0\u652f\u6301\u548c\u903b\u8f91\u6027\u3002</p> <p>\u4e0b\u4e00\u7bc7\uff1a\u77e9\u9635\u7684\u7c7b\u578b\u5b9a\u4e49\u548c\u6784\u5efa</p>"},{"location":"API/auxiliary/","title":"\u8f85\u52a9","text":"<p>\u8f85\u52a9\u51fd\u6570\u5c01\u88c5\u4e86\u4e00\u4e9b\u5c24\u5176\u662f\u5bf9\u4e8c\u7ef4\u5217\u8868\u64cd\u4f5c\u7684\u975e\u62d3\u5c55\u65b9\u6cd5\uff0c\u4e14\u5927\u591a\u5747\u4e3a\u79c1\u6709\u65b9\u6cd5\u3002\u8fd8\u6709\u4e00\u4e9b\u662f\u8f85\u52a9\u7c7b\u3002</p>"},{"location":"API/auxiliary/#typed","title":"Typed","text":"<p>enum Typed { int8, int16, int32, int64, int, float32, float64, double, bool, uint8, uint16, uint32, uint64, complex }</p> <p>Typed\u679a\u4e3e\u76ee\u524d\u4f5c\u7528\u4e8e\u8f6c\u6362Matrix\u6570\u636e\u5230\u6307\u5b9a\u7c7b\u578b\u7684\u4e8c\u7ef4\u5217\u8868\uff0c\u5177\u4f53\u8bf7\u770btoList</p>"},{"location":"API/auxiliary/#alert","title":"Alert","text":"<p>final class Alert</p> <p>Alert\u7c7b\u7528\u4e8e\u8b66\u544a\u67d0\u4e9b\u7c7b\u6216\u8005\u65b9\u6cd5  </p>"},{"location":"API/auxiliary/#since","title":"Since","text":"<p>final class Since</p> <p>Since\u7c7b\u7528\u4e8e\u5728\u67d0\u4e9b\u7c7b\u6216\u8005\u65b9\u6cd5\u53d1\u751f\u91cd\u5927\u53d8\u5316\u7684\u65f6\u5019\u5907\u6ce8</p> <p>\u4e0b\u4e00\u7bc7\uff1a\u51fd\u6570\u5de5\u5177</p>"},{"location":"API/basement/","title":"\u57fa\u7840\u64cd\u4f5c","text":""},{"location":"API/basement/#visible","title":"visible","text":"<p>void visible({String? format, String color = '#ffd700', String? start_point, String? end_point})</p> <p>\u5feb\u901f\u53ef\u89c6\u5316\u77e9\u9635\uff0c\u5728toString\u51fd\u6570\u7684\u65e0\u8fd4\u56de\u7248\u672c\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u4e86\u8f93\u51fa\u524d\u548c\u8f93\u51fa\u540e\u7684\u989d\u5916\u4fe1\u606f</p>"},{"location":"API/basement/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var m = Matrix.E(n: 4);\n  m.visible(start_point: \"Create an identity matrix.\", end_point: \"It's Ok!\");\n}\n</code></pre>"},{"location":"API/basement/#output","title":"output","text":"<pre><code>Create an identity matrix.\n[\n [1.00000 0.00000 0.00000 0.00000]\n [0.00000 1.00000 0.00000 0.00000]\n [0.00000 0.00000 1.00000 0.00000]\n [0.00000 0.00000 0.00000 1.00000]\n]\nIt's Ok!\n</code></pre>"},{"location":"API/basement/#hassameshape","title":"hasSameShape","text":"<p>bool hasSameShape(Matrix other)</p> <p>\u5224\u65ad\u4e24\u4e2a\u77e9\u9635\u5f62\u72b6\u4e00\u6837\u5417</p>"},{"location":"API/basement/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt1 = Matrix.fromList(data);\n  var mt2 = Matrix.E(n: 4);\n  print(mt1.hasSameShape(mt2));\n}\n</code></pre>"},{"location":"API/basement/#output_1","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/basement/#issameobj","title":"isSameObj","text":"<p>bool isSameObj(Matrix other)</p> <p>\u5224\u65ad\u4e24\u4e2a\u636e\u8bf4\u662f\u4e0d\u662f\u5b8c\u5168\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5224\u65ad\u4e8c\u7ef4\u5217\u8868\u548c\u77e9\u9635\u5b9e\u4f8b</p>"},{"location":"API/basement/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt1 = Matrix.fromList(data);\n  var mt2 = Matrix.fromList(data);\n  print(mt1.isSameObj(mt2));\n}\n</code></pre>"},{"location":"API/basement/#output_2","title":"output","text":"<pre><code>false\n</code></pre>"},{"location":"API/basement/#addminusmultiplydivide","title":"add/minus/multiply/divide","text":"<p>Matrix add({Matrix? other, double? number, int dim = -1})</p> <p>\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97\uff0c\u4e0e\u91cd\u8f7d<code>+</code>/<code>-</code>/<code>*</code>/<code>/</code>\u540c\u79cd\u6548\u679c\uff0c\u4e14\u90fd\u652f\u6301\u7b80\u5355\u7684\u5e7f\u64ad</p>"},{"location":"API/basement/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt1 = Matrix.fromList(data);\n  var mt2 = Matrix.fromList(data);\n  print(mt1.add(other: mt2));\n  print(mt2.add(number: 10.0));\n  print(mt2.multiply(other: mt2));\n  print(mt1 / double.nan);\n  Matrix.E_like(row: 3, column: 4).minus(number: 1.0).visible();\n  mt1.divide(other: Matrix.fromList([[-1, 1, 2, 3]]), dim: 0).visible();\n  mt1.divide(other: Matrix.fromList([[-1], [1], [2], [3]]), dim: 1).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_3","title":"output","text":"<pre><code>[\n [ 8.0  2.0  0.0 18.0]\n [ 0.0  6.0  2.0 18.0]\n [10.0 12.0  6.0  4.0]\n [ 2.0  4.0  6.0 16.0]\n]\n[\n [14.0 11.0 10.0 19.0]\n [10.0 13.0 11.0 19.0]\n [15.0 16.0 13.0 12.0]\n [11.0 12.0 13.0 18.0]\n]\n[\n [16.0  1.0  0.0 81.0]\n [ 0.0  9.0  1.0 81.0]\n [25.0 36.0  9.0  4.0]\n [ 1.0  4.0  9.0 64.0]\n]\n[\n [ NaN  NaN  NaN  NaN]\n [ NaN  NaN  NaN  NaN]\n [ NaN  NaN  NaN  NaN]\n [ NaN  NaN  NaN  NaN]\n]\n[\n [ 0.0 -1.0 -1.0 -1.0]\n [-1.0  0.0 -1.0 -1.0]\n [-1.0 -1.0  0.0 -1.0]\n]\n[\n [-4.0  1.0  0.0  3.0]\n [-0.0  3.0  0.5  3.0]\n [-5.0  6.0  1.5  0.7]\n [-1.0  2.0  1.5  2.7]\n]\n[\n [-4.0 -1.0 -0.0 -9.0]\n [ 0.0  3.0  1.0  9.0]\n [ 2.5  3.0  1.5  1.0]\n [ 0.3  0.7  1.0  2.7]\n]\n</code></pre>"},{"location":"API/basement/#concat","title":"concat","text":"<p>Matrix concat({required Matrix other, bool horizontal = true})</p> <p>\u62fc\u63a5\u4e24\u4e2a\u77e9\u9635\uff0c\u53ef\u4ee5\u4ece\u6a2a\u5411\uff0c\u4e5f\u53ef\u4ee5\u4ece\u7eb5\u5411</p>"},{"location":"API/basement/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt1 = Matrix.fromList(data);\n  var mt2 = Matrix.E(n: 4);\n  mt2.concat(other: mt1, horizontal: false).visible();\n  mt2.concat(other: mt1, horizontal: true).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_4","title":"output","text":"<pre><code>[\n [ 1  0  0  0]\n [ 0  1  0  0]\n [ 0  0  1  0]\n [ 0  0  0  1]\n [ 4  1  0  9]\n [ 0  3  1  9]\n [ 5  6  3  2]\n [ 1  2  3  8]\n]\n[\n [ 1  0  0  0  4  1  0  9]\n [ 0  1  0  0  0  3  1  9]\n [ 0  0  1  0  5  6  3  2]\n [ 0  0  0  1  1  2  3  8]\n]\n</code></pre>"},{"location":"API/basement/#reshape","title":"reshape","text":"<p>Matrix reshape({required int row, required int column})</p> <p>\u91cd\u5851\u77e9\u9635\u5f62\u72b6\uff0c\u5fc5\u987b\u4fdd\u8bc1\u4e24\u6b21\u5f62\u72b6\u5bf9\u5e94\u7684\u5c3a\u5bf8\u4e0d\u53d8</p>"},{"location":"API/basement/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.arrange(row: 2, column: 5, start: 10);\n  var flatten = mt.reshape(row: 1, column: 10);\n  mt.visible();\n  flatten.visible();\n}\n</code></pre>"},{"location":"API/basement/#output_5","title":"output","text":"<pre><code>[\n [ 10  11  12  13  14]\n [ 15  16  17  18  19]\n]\n[\n [ 10  11  12  13  14  15  16  17  18  19]\n]\n</code></pre>"},{"location":"API/basement/#resize","title":"resize","text":"<p>Matrix resize({required int row, required int column, double number = 0.0})</p> <p>\u91cd\u5851\u77e9\u9635\u5c3a\u5bf8\uff0c\u82e5\u5c3a\u5bf8\u53d8\u5927\uff0c\u5219\u4f7f\u7528number\u8865\u5168\uff0c\u5426\u5219\u4ece\u6a2a\u5411\u5f00\u59cb\u9010\u6e10\u4fdd\u7559\u5230</p>"},{"location":"API/basement/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.arrange(row: 2, column: 5, start: 10);\n  mt.resize(row: 2, column: 3).visible();\n  mt.resize(row: 3, column: 4, number: double.nan).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_6","title":"output","text":"<pre><code>[\n [ 10  11  12]\n [ 13  14  15]\n]\n[\n [ 10  11  12  13]\n [ 14  15  16  17]\n [ 18  19 NaN NaN]\n]\n</code></pre>"},{"location":"API/basement/#setmask","title":"setMask","text":"<p>void setMask({double? nan_mask, double? inf_mask, double? nag_inf_mask})</p> <p>\u66ff\u6362\u77e9\u9635\u4e2d\u7684Nan\u3001\u6b63\u8d1f\u65e0\u7a77\u5927\u503c</p>"},{"location":"API/basement/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, double.nan, 0, 9],\n    [0, 3, 1, double.infinity],\n    [5, 6, 3, -double.infinity],\n  ];\n  var mt1 = Matrix(data);\n  mt1\n    ..setMask(nan_mask: 100, inf_mask: 999, nag_inf_mask: -999)\n    ..visible();\n}\n</code></pre>"},{"location":"API/basement/#output_7","title":"output","text":"<pre><code>[\n [   4  100    0    9]\n [   0    3    1  999]\n [   5    6    3 -999]\n]\n</code></pre>"},{"location":"API/basement/#flatten","title":"flatten","text":"<p>Matrix flatten({bool horizontal = true})</p> <p>\u77e9\u9635\u6241\u5e73\u5316\uff0c\u4e24\u79cd\u65b9\u5f0f\u5747\u4e3a\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b</p>"},{"location":"API/basement/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  mt1.flatten(horizontal: true).visible();\n  mt1.flatten(horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_8","title":"output","text":"<pre><code>[\n [4.00000 1.00000 0.00000 9.00000 0.00000 3.00000 1.00000 9.00000 5.00000 6.00000 3.00000 2.00000]\n]\n[\n [4.00000 0.00000 5.00000 1.00000 3.00000 6.00000 0.00000 1.00000 3.00000 9.00000 9.00000 2.00000]\n]\n</code></pre>"},{"location":"API/basement/#row_","title":"row_","text":"<p>List row_(int index) <p>\u83b7\u53d6\u77e9\u9635\u7684\u67d0\u884c\u62f7\u8d1d</p>"},{"location":"API/basement/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  var l1 = mt1.row_(0);\n  mt1[0][0] = 100;\n  print(l1);\n}\n</code></pre>"},{"location":"API/basement/#output_9","title":"output","text":"<pre><code>[4.0, 1.0, 0.0, 9.0]\n</code></pre>"},{"location":"API/basement/#column_","title":"column_","text":"<p>List column_(int index) <p>\u83b7\u53d6\u77e9\u9635\u7684\u67d0\u5217\u62f7\u8d1d</p>"},{"location":"API/basement/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  var l1 = mt1.column_(0);\n  mt1[0][0] = 100;\n  print(l1);\n}\n</code></pre>"},{"location":"API/basement/#output_10","title":"output","text":"<pre><code>[4.0, 0.0, 5.0]\n</code></pre>"},{"location":"API/basement/#slice","title":"slice","text":"<p>Matrix slice({required int start, int? end, bool horizontal = true})</p> <p>\u77e9\u9635\u7684\u5207\u7247\uff0c\u4ecestart\u7d22\u5f15\u5f00\u59cb\u5207\uff0c\u5230end\u7d22\u5f15\u7ed3\u675f\uff08\u5305\u542bend\u7d22\u5f15\uff09\uff0c\u82e5\u4e0d\u4f20\u5165end\u503c\uff0c\u5219\u4ecestart\u5207\u5230\u7ed3\u675f\u3002\u5207\u7247\u884c\u4e3a\u4f1a\u62f7\u8d1d\u6570\u636e\u3002</p>"},{"location":"API/basement/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2]\n  ];\n  var mt1 = Matrix(data);\n  mt1.slice(start: 1, end: 2, horizontal: true).visible();\n  mt1.slice(start: 1, horizontal: false).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_11","title":"output","text":"<pre><code>[\n [ 0  3  1  9  1  0  9]\n [ 5  6  3  2  9  9  2]\n]\n[\n [ 1  0  9  9  2  2]\n [ 3  1  9  1  0  9]\n [ 6  3  2  9  9  2]\n]\n</code></pre>"},{"location":"API/basement/#select","title":"select","text":"<p>Matrix select({required List target, bool horizontal = true}) <p>\u4ece\u77e9\u9635\u4e2d\u6311\u9009\u67d0\u4e9b\u884c\u6216\u8005\u5217\uff08\u53ef\u4ee5\u91cd\u590d\u3001\u53ef\u4ee5\u4e0d\u8003\u8651\u987a\u5e8f\uff09\u7684\u6570\u636e\u590d\u5236\u5230\u65b0\u77e9\u9635\u3002</p>"},{"location":"API/basement/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2]\n  ];\n  var mt1 = Matrix(data);\n  mt1.select(target: [1, 1, 2, 3, 6, 5], horizontal: false).visible();\n  mt1.select(target: [1, 1, 2, 3, 3], horizontal: true).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_12","title":"output","text":"<pre><code>[\n [ 1  1  0  9  2  2]\n [ 3  3  1  9  9  0]\n [ 6  6  3  2  2  9]\n [ 6  6  0  0  2  9]\n]\n[\n [ 0  3  1  9  1  0  9]\n [ 0  3  1  9  1  0  9]\n [ 5  6  3  2  9  9  2]\n [ 5  6  0  0  0  9  2]\n [ 5  6  0  0  0  9  2]\n]\n</code></pre>"},{"location":"API/basement/#drop","title":"drop","text":"<p>Matrix drop({required Set target, bool horizontal = true}) <p>\u4f20\u5165\u4e00\u4e2a\u7d22\u5f15\u96c6\u5408\uff0c\u7b5b\u9664\u4e0d\u5728\u96c6\u5408\u5185\u7684\u884c/\u5217\u6570\u636e\uff0c\u5e76\u628a\u5269\u4e0b\u7684\u62f7\u8d1d\u5230\u65b0\u77e9\u9635\u3002</p>"},{"location":"API/basement/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2],\n    [5, 6, 0, 0, 0, 9, 2],\n  ];\n  var mt1 = Matrix(data);\n  mt1.drop(target: {1, 2, 3}, horizontal: false).visible();\n  mt1.drop(target: {1, 2, 3}, horizontal: true).visible();\n}\n</code></pre>"},{"location":"API/basement/#output_13","title":"output","text":"<pre><code>[\n [ 4  9  2  2]\n [ 0  1  0  9]\n [ 5  9  9  2]\n [ 5  0  9  2]\n]\n[\n [ 4  1  0  9  9  2  2]\n]\n</code></pre>"},{"location":"API/basement/#contain","title":"contain","text":"<p>bool contain(double element)</p> <p>\u67e5\u770b\u77e9\u9635\u662f\u5426\u542b\u6709\u67d0\u6570\u636e</p>"},{"location":"API/basement/#test_14","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2],\n    [5, 6, 0, 0, 0, 9, 2],\n  ];\n  var mt1 = Matrix(data);\n  print(mt1.contain(8));\n}\n</code></pre>"},{"location":"API/basement/#output_14","title":"output","text":"<pre><code>false\n</code></pre>"},{"location":"API/basement/#compare","title":"compare","text":"<p>List compare({required Matrix other, int which = -1}) <p>\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\uff0cwhich\u53c2\u6570\u4e3a0\u65f6\u5927\u4e8e\u6a21\u5f0f\u30011\u662f\u5c0f\u4e8e\u6a21\u5f0f\u30012\u662f\u4e0d\u5c0f\u4e8e\u6a21\u5f0f\u30013\u662f\u4e0d\u5927\u4e8e\u6a21\u5f0f\u30014\u662f\u4e0d\u7b49\u4e8e\u6a21\u5f0f\u3001\u5176\u4ed6\u6574\u6570\u8868\u793a\u7b49\u4e8e\u6a21\u5f0f</p>"},{"location":"API/basement/#test_15","title":"test","text":"<pre><code>import 'dart:math';\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2],\n    [5, 6, 0, 0, 0, 9, 2],\n  ];\n  Random rd = Random(42);\n  var mt1 = Matrix(data);\n  var mt2 = mt1.customize((x) =&gt; rd.nextBool() ? x - 0.5 : x + 0.5)\n    ..visible();\n  for (int i = 0;i &lt;= 5;i++){\n    print(mt1.compare(other: mt2, which: i));\n  }\n}\n</code></pre>"},{"location":"API/basement/#output_15","title":"output","text":"<pre><code>[\n [ 4.5  0.5 -0.5  9.5  9.5  1.5  2.5]\n [ 0.5  2.5  0.5  9.5  0.5  0.5  9.5]\n [ 5.5  5.5  3.5  2.5  9.5  8.5  1.5]\n [ 4.5  6.5 -0.5 -0.5 -0.5  8.5  1.5]\n]\n[[false, true, true, false, false, true, false], [false, true, true, false, true, false, false], [false, true, false, false, false, true, true], [true, false, true, true, true, true, true]]\n[[true, false, false, true, true, false, true], [true, false, false, true, false, true, true], [true, false, true, true, true, false, false], [false, true, false, false, false, false, false]]\n[[false, true, true, false, false, true, false], [false, true, true, false, true, false, false], [false, true, false, false, false, true, true], [true, false, true, true, true, true, true]]\n[[true, false, false, true, true, false, true], [true, false, false, true, false, true, true], [true, false, true, true, true, false, false], [false, true, false, false, false, false, false]]\n[[true, true, true, true, true, true, true], [true, true, true, true, true, true, true], [true, true, true, true, true, true, true], [true, true, true, true, true, true, true]]\n[[false, false, false, false, false, false, false], [false, false, false, false, false, false, false], [false, false, false, false, false, false, false], [false, false, false, false, false, false, false]]\n</code></pre>"},{"location":"API/basement/#sort","title":"sort","text":"<p>void sort({bool reverse = false, int dim = -1})</p> <p>\u77e9\u9635\u6392\u5e8f\uff0cdim\u8868\u793a\u6392\u5e8f\u7684\u65b9\u5f0f\u662f\u6bcf\u884c\u3001\u6bcf\u5217\u8fd8\u662f\u6574\u4f53\uff08\u540e\u9762\u4ea6\u5982\u6b64\uff09\uff0creverse\u8868\u793a\u6b63\u53cd\u65b9\u5411</p>"},{"location":"API/basement/#test_16","title":"test","text":"<pre><code>import 'dart:math';\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9, 9, 2, 2],\n    [0, 3, 1, 9, 1, 0, 9],\n    [5, 6, 3, 2, 9, 9, 2],\n    [5, 6, 0, 0, 0, 9, 2],\n  ];\n  var mt1 = Matrix(data);\n  mt1..sort(reverse: true, dim: 0)..visible();\n  mt1..sort(reverse: false, dim: 0)..visible();\n  mt1..sort(reverse: false, dim: 1)..visible();\n  mt1..sort(reverse: false, dim: 2)..visible();\n}\n</code></pre>"},{"location":"API/basement/#output_16","title":"output","text":"<pre><code>[\n [  9   9   4   2   2   1   0]\n [  9   9   3   1   1   0   0]\n [  9   9   6   5   3   2   2]\n [  9   6   5   2   0   0   0]\n]\n[\n [  0   1   2   2   4   9   9]\n [  0   0   1   1   3   9   9]\n [  2   2   3   5   6   9   9]\n [  0   0   0   2   5   6   9]\n]\n[\n [  0   0   0   1   3   6   9]\n [  0   0   1   2   4   9   9]\n [  0   1   2   2   5   9   9]\n [  2   2   3   5   6   9   9]\n]\n[\n [  0   0   0   0   0   0   1]\n [  1   1   2   2   2   2   2]\n [  3   3   4   5   5   6   6]\n [  9   9   9   9   9   9   9]\n]\n</code></pre>"},{"location":"API/basement/#tolist","title":"toList","text":"<p>List toList(Typed T) <p>\u5c06\u77e9\u9635\u7684\u6570\u636e\u6620\u5c04\u5230\u6307\u5b9a\u7c7b\u578b\uff0c\u901a\u8fc7\u4f20\u5165\u679a\u4e3e\u503cT\u5373\u53ef\uff0cint\u3001double\u3001bool\u751f\u6210\u6807\u51c6\u4e14\u53ef\u53d8\u957f\u7684\u6570\u7ec4\uff0ccomplex\u751f\u6210\u590d\u6570\u5217\u8868\uff0c\u5176\u4f59\u5747\u751f\u6210\u9ad8\u6027\u80fd\u4f46\u4e0d\u53ef\u53d8\u6210\u7684\u5217\u8868\u3002 Typed.int\u8868\u793a\u6807\u51c6int Typed.double\u8868\u793a\u6807\u51c6double Typed.bool\u8868\u793a\u6807\u51c6bool\uff0c\u6570\u636e\u4e0d\u4e3a0\u8868\u793afalse\uff0c\u5176\u4f59\u5168\u662ftrue Typed.complex\u8868\u793a\u62d3\u5c55\u7684Complex\u590d\u6570\u7c7b \u5269\u4e0b\u5168\u662f\u6e90\u4e8etyped_data\u6807\u51c6\u5e93\u7684\u9ad8\u6027\u80fd\u6570\u636e\u7ed3\u6784</p>"},{"location":"API/basement/#test_17","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [455, 1, 0, -9324],\n    [120, 3, -21, 2329],\n    [-545, 656, 3223, 332]\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.toList(Typed.int));\n  print(mt.toList(Typed.int8));\n  print(mt.toList(Typed.int16));\n  print(mt.toList(Typed.int32));\n  print(mt.toList(Typed.int64));\n  print(mt.toList(Typed.uint8));\n  print(mt.toList(Typed.uint16));\n  print(mt.toList(Typed.uint32));\n  print(mt.toList(Typed.uint64));\n  print(mt.toList(Typed.double));\n  print(mt.toList(Typed.float32));\n  print(mt.toList(Typed.float64));\n  print(mt.toList(Typed.bool));\n  print(Matrix.fromList([[1.0, 2.0], [0.0, 3.0], [4.0, 0.0]]).toList(Typed.complex));\n}\n</code></pre>"},{"location":"API/basement/#output_17","title":"output","text":"<pre><code>[[455, 1, 0, -9324], [120, 3, -21, 2329], [-545, 656, 3223, 332]]\n[[-57, 1, 0, -108], [120, 3, -21, 25], [-33, -112, -105, 76]]\n[[455, 1, 0, -9324], [120, 3, -21, 2329], [-545, 656, 3223, 332]]\n[[455, 1, 0, -9324], [120, 3, -21, 2329], [-545, 656, 3223, 332]]\n[[455, 1, 0, -9324], [120, 3, -21, 2329], [-545, 656, 3223, 332]]\n[[199, 1, 0, 148], [120, 3, 235, 25], [223, 144, 151, 76]]\n[[455, 1, 0, 56212], [120, 3, 65515, 2329], [64991, 656, 3223, 332]]\n[[455, 1, 0, 4294957972], [120, 3, 4294967275, 2329], [4294966751, 656, 3223, 332]]\n[[455, 1, 0, -9324], [120, 3, -21, 2329], [-545, 656, 3223, 332]]\n[[455.0, 1.0, 0.0, -9324.0], [120.0, 3.0, -21.0, 2329.0], [-545.0, 656.0, 3223.0, 332.0]]\n[[455.0, 1.0, 0.0, -9324.0], [120.0, 3.0, -21.0, 2329.0], [-545.0, 656.0, 3223.0, 332.0]]\n[[455.0, 1.0, 0.0, -9324.0], [120.0, 3.0, -21.0, 2329.0], [-545.0, 656.0, 3223.0, 332.0]]\n[[true, true, false, true], [true, true, true, true], [true, true, true, true]]\n[Complex(1.0, 2.0), Complex(0.0, 3.0), Complex(4.0, 0.0)]\n</code></pre>"},{"location":"API/basement/#append","title":"append","text":"<p>void append(List data, {bool horizontal = true}) <p>Matrix\u5b9a\u4e49\u4e4b\u521d\u5c31\u8bbe\u5b9a\u662f\u53ef\u53d8\u7684\uff0cappend\u7528\u4e8e\u6dfb\u52a0\u67d0\u884c\u6216\u8005\u67d0\u5217\u5230\u5c3e\u90e8</p>"},{"location":"API/basement/#test_18","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%5.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [455, 1, 0, -9324],\n    [120, 3, -21, 2329],\n    [-545, 656, 3223, 332]\n  ];\n  var mt = Matrix.fromList(data);\n  mt\n    ..append([1, 2, 3, 4], horizontal: true)\n    ..visible()\n    ..append([4, 5, 65, 232], horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/basement/#output_18","title":"output","text":"<pre><code>[\n [   455      1      0  -9324]\n [   120      3    -21   2329]\n [  -545    656   3223    332]\n [     1      2      3      4]\n]\n[\n [   455      1      0  -9324      4]\n [   120      3    -21   2329      5]\n [  -545    656   3223    332     65]\n [     1      2      3      4    232]\n]\n</code></pre>"},{"location":"API/basement/#broadcast","title":"broadcast","text":"<p>static List broadcast(List mts) <p>\u5bf9\u77e9\u9635\u5217\u8868\uff08\u957f\u5ea6\u81f3\u5c11\u4e3a2\uff09\u8fdb\u884c\u5e7f\u64ad\uff0c\u591a\u4e2a\u5e7f\u64ad\u4e5f\u662f\u4ece\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u5f00\u59cb\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u8981\u4e48\u76f8\u7b49\uff0c\u8981\u4e48\u5176\u4e2d\u4e00\u4e2a\u662f 1\uff0c\u5426\u5219\u5e7f\u64ad\u5931\u8d25\u3002</p>"},{"location":"API/basement/#test_19","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt1 = Matrix.fromList([\n    [1, 4, 6]\n  ]);\n  var mt2 = Matrix.fromList([\n    [9],\n    [8]\n  ]);\n  var mt3 = Matrix.fromList([\n    [7],\n    [5]\n  ]);\n  var [mt4, mt5, mt6] = MatrixBase.broadcast([mt1, mt2, mt3]);\n  mt4.visible();\n  mt5.visible();\n  mt6.visible();\n}\n</code></pre>"},{"location":"API/basement/#output_19","title":"output","text":"<p><pre><code>[\n [  1   4   6]\n [  1   4   6]\n]\n[\n [  9   9   9]\n [  8   8   8]\n]\n[\n [  7   7   7]\n [  5   5   5]\n]\n</code></pre> \u4e0b\u4e00\u7bc7\uff1a\u8f85\u52a9</p>"},{"location":"API/complex/","title":"\u590d\u6570\u7c7b","text":"<p>\u5173\u4e8e\u590d\u6570\uff1ahttps://oi-wiki.org/math/complex/</p>"},{"location":"API/complex/#_2","title":"\u6784\u9020\u51fd\u6570","text":"<p>const Complex({this.real = 0.0, this.imaginary = 0.0})</p> <p>\u4f20\u5165\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\uff0c\u4e0d\u4f20\u9ed8\u8ba4\u4e3a0.0\uff0c\u865a\u6570\u4e00\u65e6\u521b\u5efa\u5c31\u4e0d\u53ef\u4ee5\u4fee\u6539\u3002</p>"},{"location":"API/complex/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex(real: 1.5, imaginary: 2.1);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output","title":"output","text":"<pre><code>Complex(1.5, 2.1)\n</code></pre>"},{"location":"API/complex/#complexfrompolar","title":"Complex.fromPolar","text":"<p>factory Complex.fromPolar({required double r, required double theta})</p> <p>\u6839\u636e\u6a21\u548c\u8f90\u89d2\u6765\u521b\u5efa\u590d\u6570</p>"},{"location":"API/complex/#test_1","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromPolar(r: 2, theta: pi / 4);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output_1","title":"output","text":"<pre><code>Complex(1.4142135623730951, 1.4142135623730951)\n</code></pre>"},{"location":"API/complex/#complexfromlist","title":"Complex.fromList","text":"<p>factory Complex.fromList(List data) <p>\u4f20\u5165\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6d6e\u70b9\u6570\u7684\u5217\u8868\u6765\u751f\u6210\u590d\u6570</p>"},{"location":"API/complex/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  print(complex);\n}\n</code></pre>"},{"location":"API/complex/#output_2","title":"output","text":"<pre><code>Complex(1.3, 1.2)\n</code></pre>"},{"location":"API/complex/#tostring","title":"toString","text":"<p>String toString({int which = 0})</p> <p>\u8f6ctoString\uff0cwhich\u51fd\u6570\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u590d\u6570\u5c55\u793a\u683c\u5f0f</p>"},{"location":"API/complex/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  print(complex.toString(which: 0));\n  print(complex.toString(which: 1));\n  print(complex.toString(which: 2));\n  print(complex.toString(which: 3));\n  print(complex.toString(which: 4));\n  complex = Complex.fromList([-1.3, -1.2]);\n  print(complex.toString(which: 0));\n  print(complex.toString(which: 1));\n  print(complex.toString(which: 2));\n  print(complex.toString(which: 3));\n  print(complex.toString(which: 4));\n}\n</code></pre>"},{"location":"API/complex/#output_3","title":"output","text":"<pre><code>Complex(1.3, 1.2)\nComplex(1.3, 1.2j)\n1.3 + 1.2j\n(1.3, 1.2j)\n1.3+1.2j\nComplex(-1.3, -1.2)\nComplex(-1.3, -1.2j)\n-1.3 - 1.2j\n(-1.3, -1.2j)\n-1.3-1.2j\n</code></pre>"},{"location":"API/complex/#bool-operator-object-other","title":"bool operator == (Object other)","text":"<p>\u5224\u65ad\u4e24\u4e2a\u590d\u6570\u5b9e\u90e8\u548c\u865a\u90e8\u662f\u4e0d\u662f\u5404\u76f8\u540c <pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: 1.2);\n  print(complex1 == complex);\n}\n</code></pre></p>"},{"location":"API/complex/#output_4","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#-","title":"+\u3001-\u3001*\u3001/","text":"<p>\u590d\u6570\u7684\u8fd0\u7b97</p>"},{"location":"API/complex/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: -1.2);\n  print(complex + complex1);\n  print(complex - complex1);\n  print(complex * complex1);\n  print(complex / complex1);\n}\n</code></pre>"},{"location":"API/complex/#output_5","title":"output","text":"<pre><code>Complex(2.6, 0.0)\nComplex(0.0, 2.4)\nComplex(3.13, 0.0)\nComplex(0.07987220447284353, 0.9968051118210863)\n</code></pre>"},{"location":"API/complex/#complex-get-conjugate","title":"Complex get conjugate","text":"<p>\u83b7\u53d6\u5bf9\u5e94\u7684\u5171\u8f6d\u590d\u6570</p>"},{"location":"API/complex/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, 1.2]);\n  Complex complex1 = Complex(real: 1.3, imaginary: -1.2);\n  print(complex.conjugate == complex1);\n}\n</code></pre>"},{"location":"API/complex/#output_6","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#bool-get-isnan","title":"bool get isNan","text":"<p>\u5224\u65ad\u5b9e\u90e8\u6216\u8005\u865a\u90e8\u542b\u6709NaN</p>"},{"location":"API/complex/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.3, double.nan]);\n  print(complex.isNan);\n}\n</code></pre>"},{"location":"API/complex/#output_7","title":"output","text":"<pre><code>true\n</code></pre>"},{"location":"API/complex/#double-get-mod","title":"double get mod","text":"<p>\u590d\u6570\u7684\u6a21</p>"},{"location":"API/complex/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.6]);\n  print(complex.mod);\n}\n</code></pre>"},{"location":"API/complex/#output_8","title":"output","text":"<pre><code>2.0\n</code></pre>"},{"location":"API/complex/#double-get-arg","title":"double get arg","text":"<p>\u590d\u6570\u7684\u8f90\u89d2</p>"},{"location":"API/complex/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.arg);\n}\n</code></pre>"},{"location":"API/complex/#output_9","title":"output","text":"<pre><code>0.7853981633974483\n</code></pre>"},{"location":"API/complex/#complex-get-exp","title":"Complex get exp","text":"<p>\u6b27\u62c9\u516c\u5f0f</p>"},{"location":"API/complex/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.exp);\n}\n</code></pre>"},{"location":"API/complex/#output_10","title":"output","text":"<pre><code>Complex(1.203070112722819, 3.0944787419716917)\n</code></pre>"},{"location":"API/complex/#complex-get-sqrt","title":"Complex get sqrt","text":"<p>\u5e73\u65b9\u6839</p>"},{"location":"API/complex/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.sqrt);\n}\n</code></pre>"},{"location":"API/complex/#output_11","title":"output","text":"<pre><code>Complex(1.20354814503777, 0.4985259646436252)\n</code></pre>"},{"location":"API/complex/#_3","title":"\u4e00\u4e9b\u4e09\u89d2\u51fd\u6570\u8fd0\u7b97","text":""},{"location":"API/complex/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.sin);\n  print(complex.cos);\n  print(complex.tan);\n}\n</code></pre>"},{"location":"API/complex/#output_12","title":"output","text":"<pre><code>Complex(1.6876017599704798, 0.546965027216471)\nComplex(0.6561050855063479, -1.4068769820012117)\nComplex(0.14015057356642455, 1.134177526770811)\n</code></pre>"},{"location":"API/complex/#deepcopy","title":"deepcopy","text":"<p>\u590d\u5236\u4e00\u4e2a\u590d\u6570</p>"},{"location":"API/complex/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.deepcopy == complex);\n  print(identical(complex.deepcopy, complex));\n}\n</code></pre>"},{"location":"API/complex/#output_13","title":"output","text":"<pre><code>true\nfalse\n</code></pre>"},{"location":"API/complex/#_4","title":"\u4e00\u4e9b\u8f6c\u6362\u65b9\u6cd5","text":""},{"location":"API/complex/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/complex.dart';\n\nmain() {\n  Complex complex = Complex.fromList([1.2, 1.2]);\n  print(complex.toList);\n  print(complex.toFloat64x2);\n  print(complex.toPoint);\n}\n</code></pre>"},{"location":"API/complex/#output_14","title":"output","text":"<p><pre><code>[1.2, 1.2]\n[1.200000, 1.200000]\nPoint(1.2, 1.2)\n</code></pre> \u4e0b\u4e00\u7bc7\uff1a\u53ef\u89c6\u5316\u5904\u7406</p>"},{"location":"API/define/","title":"\u7c7b\u578b\u5b9a\u4e49\u548c\u6784\u5efa","text":"<p>\u77e9\u9635\u662f\u77e9\u9635\u7c7b\u3002 - \u5185\u90e8\u4f7f\u7528<code>List</code>\uff08\u5c5e\u6027\u540dself)\u5b58\u50a8\u6838\u5fc3\u6570\u636e\uff0c\u9ed8\u8ba4\u6784\u9020\u65f6\uff0c\u4e0d\u8003\u8651\u662f\u5426\u4e3a\u7a7a\u3002 - \u5982\u679c\u4e00\u4e2a\u5f62\u72b6\uff08\u5c5e\u6027\u540dshape\uff09\u88ab\u4f20\u5165\uff0c\u5b83\u5c06\u57fa\u4e8e\u4f20\u5165\u7684\u5f62\u72b6\uff0c\u4f20\u5165\u65f6\u53ef\u4ee5\u6307\u5b9a\u5f62\u72b6\uff0c\u907f\u514d\u5f62\u72b6\u518d\u8ba1\u7b97\u3002 - \u4e3a\u4e86\u589e\u52a0\u7075\u6d3b\u6027\uff0c\u77e9\u9635\u4e2d\u7684\u5217\u8868\u5728\u521b\u5efa\u65f6\u9ed8\u8ba4\u90fd\u662f\u53ef\u589e\u957f\u7684\u3002 - \u5728\u5b9e\u73b0\u77e9\u9635\u65b9\u6cd5\u65f6\uff0c\u4e00\u5207\u4ece\u7b80\uff0c\u66f4\u591a\u7684\u8003\u8651\u662f\u903b\u8f91\u800c\u4e0d\u662f\u6027\u80fd\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u79bb\u8c31\u5230\u629b\u5f03\u6027\u80fd\u3002 - \u77e9\u9635\u7684\u4e00\u5207\u6570\u636e\u662fdouble\u7c7b\u578b\u3002</p>"},{"location":"API/define/#_2","title":"\u57fa\u7840\u6784\u9020\u51fd\u6570","text":"<p>Matrix(List&gt; data, {int? known_row, int? known_column}) <p>\u4f20\u5165\u4e00\u4e2a\u4e8c\u7ef4\u5217\u8868\u5e76\u590d\u6570\u6570\u636e\u5b58\u50a8\u5230\u77e9\u9635\uff0c\u53ef\u4ee5\u9009\u62e9\u6027\u4f20\u5165\u5df2\u77e5\u7684\u5f62\u72b6\u53c2\u6570</p>"},{"location":"API/define/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt1 = Matrix([\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ]);\n  print(mt1);\n}\n</code></pre>"},{"location":"API/define/#output","title":"output","text":"<pre><code>[\n [4.00000 1.00000 0.00000 9.00000]\n [0.00000 3.00000 1.00000 9.00000]\n [5.00000 6.00000 3.00000 2.00000]\n]\n</code></pre>"},{"location":"API/define/#matrixfromlist","title":"Matrix.fromList","text":"<p>Matrix.fromList(List&gt; data, {int? known_row, int? known_column}) <p>\u77e9\u9635\u76f4\u63a5\u5f15\u7528\u4f20\u5165\u7684\u5217\u8868\uff0cfromList\u662f\u5efa\u8bae\u4f7f\u7528\u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u4e3a\u907f\u514d\u4e86\u590d\u5236\u8fd9\u4e00\u6b65</p>"},{"location":"API/define/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix.fromList(data);\n  data[0][0] = 10;\n  print(mt1.toString(format: \"%2.1f\"));\n}\n</code></pre>"},{"location":"API/define/#output_1","title":"output","text":"<pre><code>[\n [10.0  1.0  0.0  9.0]\n [ 0.0  3.0  1.0  9.0]\n [ 5.0  6.0  3.0  2.0]\n]\n</code></pre>"},{"location":"API/define/#matrixfill","title":"Matrix.fill","text":"<p>Matrix.fill({required double number, required int row, required int column})</p> <p>\u751f\u6210\u5168\u662f\u6570\u636enumber\u7684\u77e9\u9635</p>"},{"location":"API/define/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt1 = Matrix.fill(number: 10, row: 2, column: 4);\n  print(mt1.toString(format: \"%2.0f\"));\n}\n</code></pre>"},{"location":"API/define/#output_2","title":"output","text":"<pre><code>[\n [ 10  10  10  10]\n [ 10  10  10  10]\n]\n</code></pre>"},{"location":"API/define/#matrixarrange","title":"Matrix.arrange","text":"<p>Matrix.arrange({double start = 0.0, required int row, required int column})</p> <p>\u751f\u6210\u4ecestart\u5f00\u59cb\u3001\u95f4\u9694\u4e3a1.0\u7684\u77e9\u9635</p>"},{"location":"API/define/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt1 = Matrix.arrange(row: 6, column: 2, start: 2.4);\n  print(mt1.toString(format: \"%2.2f\"));\n}\n</code></pre>"},{"location":"API/define/#output_3","title":"output","text":"<pre><code>[\n [ 2.40  3.40]\n [ 4.40  5.40]\n [ 6.40  7.40]\n [ 8.40  9.40]\n [10.40 11.40]\n [12.40 13.40]\n]\n</code></pre>"},{"location":"API/define/#matrixlinspace","title":"Matrix.linspace","text":"<p>Matrix.linspace({ required double start, required double end, bool keep = true, required int row, required int column})</p> <p>\u751f\u6210\u4ecb\u4e8estart\u5230end\u7684\u5747\u5300\u6570\u636e\uff0cstart\u53ef\u4ee5\u4e0d\u5c0f\u4e8eend\uff0c\u5982\u679ckeep\u4e3atrue\uff0c\u5219\u4fdd\u7559end\u4f5c\u4e3a\u7ed3\u5c3e</p>"},{"location":"API/define/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.3f\";\n  Matrix.linspace(start: 1, end: 2, row: 1, column: 10, keep: false).visible();\n  Matrix.linspace(start: 1, end: 2, row: 1, column: 10, keep: true).visible();\n}\n</code></pre>"},{"location":"API/define/#output_4","title":"output","text":"<pre><code>[\n [ 1.000  1.100  1.200  1.300  1.400  1.500  1.600  1.700  1.800  1.900]\n]\n[\n [ 1.000  1.111  1.222  1.333  1.444  1.556  1.667  1.778  1.889  2.000]\n]\n</code></pre>"},{"location":"API/define/#matrixdeepcopy","title":"Matrix.deepcopy","text":"<p>factory Matrix.deepcopy(Matrix other)</p> <p>deepcopy\u4f1a\u6df1\u5ea6\u62f7\u8d1d\u4e00\u4e2a\u77e9\u9635\u5bf9\u8c61</p>"},{"location":"API/define/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.3f\";\n  var a = Matrix.arrange(start: 1, row: 3, column: 3)..visible();\n  var b = Matrix.deepcopy(a)..visible();\n  print(identical(a, b));\n}\n</code></pre>"},{"location":"API/define/#output_5","title":"output","text":"<pre><code>[\n [ 1.000  2.000  3.000]\n [ 4.000  5.000  6.000]\n [ 7.000  8.000  9.000]\n]\n[\n [ 1.000  2.000  3.000]\n [ 4.000  5.000  6.000]\n [ 7.000  8.000  9.000]\n]\nfalse\n</code></pre>"},{"location":"API/define/#matrixe","title":"Matrix.E","text":"<p>Matrix.E({required int n})</p> <p>\u751f\u6210\u4e00\u4e2an\u9636\u5355\u4f4d\u77e9\u9635</p>"},{"location":"API/define/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  Matrix.E(n: 3).visible();\n}\n</code></pre>"},{"location":"API/define/#output_6","title":"output","text":"<pre><code>[\n [ 1  0  0]\n [ 0  1  0]\n [ 0  0  1]\n]\n</code></pre>"},{"location":"API/define/#matrixrange","title":"Matrix.range","text":"<p>Matrix.range({double start = 0.0, double step = 1.0, required int row, required int column})</p> <p>\u751f\u6210\u4e00\u4e2a\u4ecestart\u5f00\u59cb\uff0c\u76f8\u90bb\u6570\u636e\u95f4\u9694\u4e3astep\u7684\u77e9\u9635</p>"},{"location":"API/define/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  Matrix.range(row: 2, column: 3, start: 2, step: -1).visible();\n}\n</code></pre>"},{"location":"API/define/#output_7","title":"output","text":"<pre><code>[\n [ 2  1  0]\n [-1 -2 -3]\n]\n</code></pre>"},{"location":"API/define/#matrixe_like","title":"Matrix.E_like","text":"<p>Matrix.E_like({required int row, required int column})</p> <p>\u751f\u6210\u4e00\u4e2a\u7c7b\u5355\u4f4d\u77e9\u9635\uff0c\u5728\u6700\u5c0f\u7ef4\u5ea6\u4e0b\u4e3b\u5bf9\u89d2\u7ebf\u77e9\u9635\u4e0a\u7684\u6570\u636e\u4e3a1.0\uff0c\u5176\u4ed6\u5168\u662f0.0</p>"},{"location":"API/define/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%1.0f\";\n  Matrix.E_like(row: 3, column: 5).visible();\n}\n</code></pre>"},{"location":"API/define/#output_8","title":"output","text":"<pre><code>[\n [ 1  0  0  0  0]\n [ 0  1  0  0  0]\n [ 0  0  1  0  0]\n]\n</code></pre>"},{"location":"API/define/#string-tostring","title":"String toString","text":"<p>String toString({String? format, String color = '#ffd700'})</p> <p>\u91cd\u8f7d\u8f6c\u5b57\u7b26\u4e32\u65b9\u6cd5\u3002format\u662f\u8f93\u51fa\u683c\u5f0f\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5168\u5c40\u7684data_format\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528color\u8bbe\u7f6e\u6253\u5370\u989c\u8272\uff0ccolor\u662fHEX\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 \u6ce8\uff1a\u9ed8\u8ba4\u8f93\u51fa\u683c\u5f0f\u7531<code>data_format</code>\u63a7\u5236\uff0c\u53ef\u4ee5\u4fee\u6539</p>"},{"location":"API/define/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  print(mt1.toString(format: \"%2.1f\", color: '#ff0011')); // #666666, default\n}\n</code></pre>"},{"location":"API/define/#output_9","title":"output","text":""},{"location":"API/define/#bool-operator-object-other","title":"bool operator == (Object other)","text":"<p>\u5224\u65ad\u4e24\u4e2a\u77e9\u9635\u7684\u6570\u636e\u662f\u4e0d\u662f\u4e00\u6a21\u4e00\u6837</p> <p>\u6216\u8005\u77e9\u9635\u4e2d\u7684\u6570\u636e\u662f\u5426\u5168\u662fnumber</p>"},{"location":"API/define/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  var mt2 = Matrix.fromList(data);\n  print(mt1 == mt2);\n  print(Matrix.fill(number: 1, row: 2, column: 3) == 1);\n}\n</code></pre>"},{"location":"API/define/#output_10","title":"output","text":"<pre><code>false\ntrue\n</code></pre>"},{"location":"API/define/#bool-operator-object-other_1","title":"bool operator &gt; (Object other)","text":"<p>\u5224\u65ad\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u6570\u636e\u662f\u4e0d\u662f\u5927\u4e8e\u53e6\u4e00\u4e2a\u77e9\u9635\u7684</p> <p>\u6216\u8005\u9010\u4e2a\u548cnumber\u6bd4\u5927\u5c0f</p>"},{"location":"API/define/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  var mt2 = Matrix.fromList(data) - 1;\n  print(mt1 &gt; mt2);\n  print(Matrix.fill(number: 1, row: 2, column: 3) &gt; 1);\n}\n</code></pre>"},{"location":"API/define/#output_11","title":"output","text":"<pre><code>false\nfalse\n</code></pre>"},{"location":"API/define/#bool-operator-object-other_2","title":"bool operator &gt;= (Object other)","text":"<p>\u5224\u65ad\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u6570\u636e\u662f\u4e0d\u662f\u4e0d\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u77e9\u9635\u7684</p> <p>\u6216\u8005\u9010\u4e2a\u548cnumber\u6bd4\u5927\u5c0f</p>"},{"location":"API/define/#test_12","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  var mt2 = Matrix.fromList(data) - 1;\n  print(mt1 &gt;= mt2);\n  print(Matrix.fill(number: 1, row: 2, column: 3) &gt;= 1);\n}\n</code></pre>"},{"location":"API/define/#output_12","title":"output","text":"<pre><code>false\ntrue\n</code></pre>"},{"location":"API/define/#bool-operator-object-other_3","title":"bool operator &lt; (Object other)","text":"<p>\u5224\u65ad\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u6570\u636e\u662f\u4e0d\u662f\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u77e9\u9635\u7684</p> <p>\u6216\u8005\u9010\u4e2a\u548cnumber\u6bd4\u5927\u5c0f</p>"},{"location":"API/define/#test_13","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n  [4, 1, 0, 9],\n  [0, 3, 1, 9],\n  [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  var mt2 = Matrix.fromList(data) - 1;\n  print(mt1 &lt; mt2);\n  print(Matrix.fill(number: 1, row: 2, column: 3) &lt; 1);\n}\n</code></pre>"},{"location":"API/define/#output_13","title":"output","text":"<pre><code>true\nfalse\n</code></pre>"},{"location":"API/define/#bool-operator-object-other_4","title":"bool operator &lt;= (Object other)","text":""},{"location":"API/define/#test_14","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n  [4, 1, 0, 9],\n  [0, 3, 1, 9],\n  [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  data[0][0] = 10;\n  var mt2 = Matrix.fromList(data) - 1;\n  print(mt1 &lt;= mt2);\n  print(Matrix.fill(number: 1, row: 2, column: 3) &lt;= 1);\n}\n</code></pre>"},{"location":"API/define/#output_14","title":"output","text":"<pre><code>true\ntrue\n</code></pre>"},{"location":"API/define/#matrix-operator-num-other","title":"Matrix operator ^ (num other)","text":"<p>\u83b7\u53d6\u77e9\u9635\u7684number\u6b21\u65b9</p>"},{"location":"API/define/#test_15","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.0f\";\n  (Matrix.arrange(row: 4, column: 4, start: 2) ^ 3).visible();\n}\n</code></pre>"},{"location":"API/define/#output_15","title":"output","text":"<pre><code>[\n [   8   27   64  125]\n [ 216  343  512  729]\n [1000 1331 1728 2197]\n [2744 3375 4096 4913]\n]\n</code></pre>"},{"location":"API/define/#void-operator-int-index-list-value","title":"void operator []= (int index, List value)  <p>\u6839\u636e\u7d22\u5f15\u4fee\u6539\u6307\u5411\u5217\u8868\uff0c\u800c\u4e0d\u662f\u590d\u5236</p>","text":""},{"location":"API/define/#test_16","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt1 = Matrix.fill(number: 0, row: 4, column: 4);\n  mt1.visible();\n  List&lt;double&gt; a = [1, 2, 3, 4];\n  mt1[1] = a;\n  mt1.visible();\n  a[1] = 7;\n  mt1.visible();\n}\n</code></pre>"},{"location":"API/define/#output_16","title":"output","text":"<pre><code>[\n [0.00000 0.00000 0.00000 0.00000]\n [0.00000 0.00000 0.00000 0.00000]\n [0.00000 0.00000 0.00000 0.00000]\n [0.00000 0.00000 0.00000 0.00000]\n]\n[\n [0.00000 0.00000 0.00000 0.00000]\n [1.00000 2.00000 3.00000 4.00000]\n [0.00000 0.00000 0.00000 0.00000]\n [0.00000 0.00000 0.00000 0.00000]\n]\n[\n [0.00000 0.00000 0.00000 0.00000]\n [1.00000 7.00000 3.00000 4.00000]\n [0.00000 0.00000 0.00000 0.00000]\n [0.00000 0.00000 0.00000 0.00000]\n]\n</code></pre>"},{"location":"API/define/#list-operator-int-index","title":"List operator [] (int index)  <p>\u6839\u636e\u7d22\u5f15\u83b7\u53d6\u67d0\u884c\u5217\u8868</p>","text":""},{"location":"API/define/#test_17","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt1 = Matrix.fill(number: 0, row: 4, column: 4);\n  final a = mt1[1];\n  print(a);\n  mt1[1][2] = 9;\n  print(a);\n}\n</code></pre>"},{"location":"API/define/#output_17","title":"output","text":"<pre><code>[0.0, 0.0, 0.0, 0.0]\n[0.0, 0.0, 9.0, 0.0]\n</code></pre>"},{"location":"API/define/#matrixnumber","title":"\u52a0\u51cf\u4e58\u9664\u4e00\u4e2aMatrix\u6216\u8005number","text":""},{"location":"API/define/#test_18","title":"test <pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt1 = Matrix.fromList(data);\n  var mt2 = Matrix.E(n: 4);\n  (mt1 + mt2).visible();\n  (mt1 - mt2).visible();\n  (mt1 * mt2).visible();\n  (mt1 / mt2).visible(format: \"%8.1f\");\n  (mt1 + 1).visible();\n  (mt1 - 2).visible();\n  (mt1 * 3).visible();\n  (mt1 / 4).visible(format: \"%2.1f\");\n}\n</code></pre>","text":""},{"location":"API/define/#output_18","title":"output","text":"<pre><code>[\n [5.00000 1.00000 0.00000 9.00000]\n [0.00000 4.00000 1.00000 9.00000]\n [5.00000 6.00000 4.00000 2.00000]\n [1.00000 2.00000 3.00000 9.00000]\n]\n[\n [3.00000 1.00000 0.00000 9.00000]\n [0.00000 2.00000 1.00000 9.00000]\n [5.00000 6.00000 2.00000 2.00000]\n [1.00000 2.00000 3.00000 7.00000]\n]\n[\n [4.00000 0.00000 0.00000 0.00000]\n [0.00000 3.00000 0.00000 0.00000]\n [0.00000 0.00000 3.00000 0.00000]\n [0.00000 0.00000 0.00000 8.00000]\n]\n[\n [       4.0   Infinity        NaN   Infinity]\n [       NaN        3.0   Infinity   Infinity]\n [  Infinity   Infinity        3.0   Infinity]\n [  Infinity   Infinity   Infinity        8.0]\n]\n[\n [5.00000 2.00000 1.00000 10.00000]\n [1.00000 4.00000 2.00000 10.00000]\n [6.00000 7.00000 4.00000 3.00000]\n [2.00000 3.00000 4.00000 9.00000]\n]\n[\n [2.00000 -1.00000 -2.00000 7.00000]\n [-2.00000 1.00000 -1.00000 7.00000]\n [3.00000 4.00000 1.00000 0.00000]\n [-1.00000 0.00000 1.00000 6.00000]\n]\n[\n [12.00000 3.00000 0.00000 27.00000]\n [0.00000 9.00000 3.00000 27.00000]\n [15.00000 18.00000 9.00000 6.00000]\n [3.00000 6.00000 9.00000 24.00000]\n]\n[\n [ 1.0  0.3  0.0  2.3]\n [ 0.0  0.8  0.3  2.3]\n [ 1.3  1.5  0.8  0.5]\n [ 0.3  0.5  0.8  2.0]\n]\n</code></pre>"},{"location":"API/define/#int-get-size","title":"int get size  <p>\u83b7\u53d6\u5f53\u524d\u5143\u7d20\u6570\u76ee\uff0c\u5373\u77e9\u9635\u7684\u5c3a\u5bf8</p>","text":""},{"location":"API/define/#test_19","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  print(mt1.size);\n  print(mt1.shape);\n}\n</code></pre>"},{"location":"API/define/#output_19","title":"output","text":"<pre><code>12\n[3, 4]\n</code></pre>"},{"location":"API/define/#matrix-get-t_","title":"Matrix get T_  <p>\u83b7\u53d6\u8f6c\u7f6e\u77e9\u9635</p>","text":""},{"location":"API/define/#test_20","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  mt1.T_.visible();\n}\n</code></pre>"},{"location":"API/define/#output_20","title":"output","text":"<pre><code>[\n [4.00000 0.00000 5.00000]\n [1.00000 3.00000 6.00000]\n [0.00000 1.00000 3.00000]\n [9.00000 9.00000 2.00000]\n]\n</code></pre>"},{"location":"API/define/#matrix-get-deecopy","title":"Matrix get deecopy  <p>\u6df1\u5ea6\u62f7\u8d1d\u7684gtter\u7248\u672c</p>","text":""},{"location":"API/define/#list-get-flattened","title":"List get flattened  <p>\u6a2a\u5411\u6241\u5e73\u5316\u7684\u77e9\u9635\u5217\u8868</p>","text":""},{"location":"API/define/#test_21","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n  ];\n  var mt1 = Matrix(data);\n  print(mt1.flattened);;\n}\n</code></pre>"},{"location":"API/define/#output_21","title":"output","text":"<pre><code>[4.0, 1.0, 0.0, 9.0, 0.0, 3.0, 1.0, 9.0, 5.0, 6.0, 3.0, 2.0]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u57fa\u7840\u64cd\u4f5c</p>"},{"location":"API/functools/","title":"\u51fd\u6570\u5de5\u5177","text":""},{"location":"API/functools/#any","title":"any","text":"<p>Object any(bool Function(double) condition, {int dim = -1})</p> <p>\u5224\u65ad\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u503c\uff08\u5b58\u5728\u6027\u95ee\u9898\uff09</p>"},{"location":"API/functools/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, double.nan, 0, 9],\n    [0, 3, 1, double.infinity],\n    [5, 6, 3, -double.infinity],\n  ];\n  var mt1 = Matrix(data);\n  print(mt1.any((x) =&gt; x == double.negativeInfinity, dim: 0));\n  print(mt1.any((x) =&gt; x == double.negativeInfinity, dim: 1));\n  print(mt1.any((x) =&gt; x == double.negativeInfinity, dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output","title":"output","text":"<pre><code>[false, false, true]\n[false, false, false, true]\ntrue\n</code></pre>"},{"location":"API/functools/#all","title":"all","text":"<p>Object all(bool Function(double) condition, {int dim = -1})</p> <p>\u5224\u65ad\u77e9\u9635\u4e2d\u6570\u636e\u662f\u5426\u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\uff08\u6574\u4f53\u6ee1\u8db3\u95ee\u9898\uff09</p>"},{"location":"API/functools/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, -3, 0, 9],\n    [0, 3, 1, 7],\n    [2, 6, 82, 8],\n  ];\n  var mt1 = Matrix(data);\n  print(mt1.any((x) =&gt; x ~/ 2 == 0, dim: 0));\n  print(mt1.any((x) =&gt; x ~/ 2 == 0, dim: 1));\n  print(mt1.any((x) =&gt; x ~/ 2 == 0, dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output_1","title":"output","text":"<pre><code>[true, true, false]\n[true, false, true, false]\ntrue\n</code></pre>"},{"location":"API/functools/#reduce","title":"reduce","text":"<p>Object reduce(double Function(double, double) condition, {double? element, int dim = -1})</p> <p>\u5b9a\u4e49\u5f52\u7ea6\u64cd\u4f5c\uff0celement\u662f\u9009\u62e9\u6027\u4f20\u5165\u7684\u521d\u59cb\u5f52\u7ea6\u503c</p>"},{"location":"API/functools/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.range(row: 4, column: 3, start: 1, step: 2);\n  mt.visible();\n  print(mt.reduce((x, y) =&gt; x + y, element: 10.0, dim: 0));\n  print(mt.reduce((x, y) =&gt; x / y, element: 1.0, dim: 1));\n  print(mt.reduce((x, y) =&gt; x * y, element: null, dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output_2","title":"output","text":"<pre><code>[\n [  1   3   5]\n [  7   9  11]\n [ 13  15  17]\n [ 19  21  23]\n]\n[19.0, 37.0, 55.0, 73.0]\n[0.000578368999421631, 0.00011757789535567314, 0.00004650081376424089]\n316234143225.0\n</code></pre>"},{"location":"API/functools/#customize","title":"customize","text":"<p>Matrix customize(double Function(double) condition)</p> <p>\u81ea\u5b9a\u4e49\u6620\u5c04\uff0c\u5982\u6709\u8981\u5bf9\u4e00\u4e2a\u77e9\u9635\u5b9e\u73b0\u5bf9\u6570\u636e\u7684\u591a\u6b21\u8fd0\u7b97\u4e14\u9700\u8981\u907f\u514d\u591a\u6b21\u521b\u5efa\uff0ccustomize\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9</p>"},{"location":"API/functools/#test_3","title":"test","text":"<pre><code>import 'dart:math' as math;\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [1, -3, 1, 9],\n    [1, 3, 1, 7],\n    [2, 6, -5, 8],\n  ];\n  final f = (x) =&gt; math.exp(x) + math.cos(x) + x * x;\n  var mt1 = Matrix(data);\n  var y = mt1.customize(f);\n  var y_derivative = mt1.customize((x) =&gt; math.exp(x) - math.sin(x) + 2 * x);\n  y.visible();\n  y_derivative.visible();\n  mt1.diff(f).visible();\n}\n</code></pre>"},{"location":"API/functools/#output_3","title":"output","text":"<pre><code>[\n [  4   8   4 8183]\n [  4  28   4 1146]\n [ 11 440  25 3045]\n]\n[\n [  4  -6   4 8121]\n [  4  26   4 1110]\n [ 10 416 -11 2996]\n]\n[\n [  4  -6   4 8121]\n [  4  26   4 1110]\n [ 10 416 -11 2996]\n]\n</code></pre>"},{"location":"API/functools/#confront","title":"confront","text":"<p>Matrix confront(double Function(double, double) condition, {required Matrix other})</p> <p>\u5b9e\u73b0\u4e24\u4e2a\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u6570\u636e\u4e4b\u95f4\u7684\u64cd\u4f5c\u6620\u5c04</p>"},{"location":"API/functools/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt = Matrix.fromList(data);\n  var mt1 = Matrix.fromList([\n    [4, -1, 0, 9],\n    [0, -3, 1, 9],\n    [5, 6, -3, 2],\n    [1, 2, -3, 8],\n  ]);\n  final a = mt.confront((x, y) =&gt; x + y, other: mt1)\n    ..visible(); // Simulate addition\n  final b = (mt1 + mt)..visible();\n  print(a == b);\n}\n</code></pre>"},{"location":"API/functools/#output_4","title":"output","text":"<pre><code>[\n [ 8.0  0.0  0.0 18.0]\n [ 0.0  0.0  2.0 18.0]\n [10.0 12.0  0.0  4.0]\n [ 2.0  4.0  0.0 16.0]\n]\n[\n [ 8.0  0.0  0.0 18.0]\n [ 0.0  0.0  2.0 18.0]\n [10.0 12.0  0.0  4.0]\n [ 2.0  4.0  0.0 16.0]\n]\ntrue\n</code></pre>"},{"location":"API/functools/#replace","title":"replace","text":"<p>void replace(bool Function(double) condition, {required double Function(double) cope})</p> <p>\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684\u503c\u8fdb\u884c\u6620\u5c04\u5230cope\u51fd\u6570\u503c</p>"},{"location":"API/functools/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, 1, 9],\n    [5, 6, 3, 2],\n    [1, 2, 3, 8],\n  ];\n  var mt = Matrix.fromList(data)..replace((x) =&gt; x == 9 || x == 0, cope: (_) =&gt; 7);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/functools/#output_5","title":"output","text":"<pre><code>[\n [ 4.0  1.0  7.0  7.0]\n [ 7.0  3.0  1.0  7.0]\n [ 5.0  6.0  3.0  2.0]\n [ 1.0  2.0  3.0  8.0]\n]\n</code></pre>"},{"location":"API/functools/#clip","title":"clip","text":"<p>Matrix clip(double Function(double) condition, {required double lb, required double ub, bool reverse = false}) \u6839\u636e\u4e0a\u4e0b\u9650\u9650\u5236\u7684\u6570\u636e\u8fdb\u884c\u6761\u4ef6\u66ff\u6362\uff0creverse\u4e3atrue\u8868\u793a\u8303\u56f4\u4e24\u4fa7\u4fdd\u7559\uff0c\u5176\u4f59\u66ff\u6362\uff0c\u53cd\u4e4b\u8303\u56f4\u5185\u4fdd\u7559\uff0c\u4e24\u4fa7\u66ff\u6362</p>"},{"location":"API/functools/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.range(row: 4, column: 6, start: 1, step: 2);\n  mt.visible();\n  mt.clip((x) =&gt; x &lt; 3 ? 3 : x &gt; 8 ? 8 : x, lb: 3, ub: 8, reverse: false).visible();\n  mt.clip((x) =&gt; 3 &lt; x &amp;&amp; x &lt; 8 ? 0 : x, lb: 3, ub: 8, reverse: true).visible();\n}\n</code></pre>"},{"location":"API/functools/#output_6","title":"output","text":"<pre><code>[\n [  1   3   5   7   9  11]\n [ 13  15  17  19  21  23]\n [ 25  27  29  31  33  35]\n [ 37  39  41  43  45  47]\n]\n[\n [  3   3   5   7   8   8]\n [  8   8   8   8   8   8]\n [  8   8   8   8   8   8]\n [  8   8   8   8   8   8]\n]\n[\n [  1   3   0   0   9  11]\n [ 13  15  17  19  21  23]\n [ 25  27  29  31  33  35]\n [ 37  39  41  43  45  47]\n]\n</code></pre>"},{"location":"API/functools/#count","title":"count","text":"<p>Object count(bool Function(double) condition, {int dim = -1})</p> <p>\u7edf\u8ba1\u6ee1\u8db3\u7edf\u8ba1\u503c\u7684\u4e2a\u6570</p>"},{"location":"API/functools/#test_7","title":"test","text":"<pre><code>import 'package:collection/collection.dart';\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  var m = MatrixRandom.uniform(row: 5, column: 5, lb: 0, ub: 1, seed: 42)..visible();\n  print(m.count((x) =&gt; x &lt; 0.5, dim: 0));\n  print((m.count((x) =&gt; x &lt; 0.5, dim: 0) as List&lt;int&gt;).sum);\n  print(m.count((x) =&gt; x &lt; 0.5, dim: 1));\n  print((m.count((x) =&gt; x &lt; 0.5, dim: 1) as List&lt;int&gt;).sum);\n  print(m.count((x) =&gt; x &lt; 0.5, dim: 2));\n}\n</code></pre>"},{"location":"API/functools/#output_7","title":"output","text":"<p><pre><code>[\n [ 0.15  0.60  0.66  0.22  0.79]\n [ 0.16  0.41  0.17  0.21  0.57]\n [ 0.83  0.35  0.89  0.12  0.55]\n [ 0.89  0.56  0.43  0.68  0.78]\n [ 0.78  0.20  0.70  0.36  0.48]\n]\n[2, 4, 2, 1, 3]\n12\n[2, 3, 2, 4, 1]\n12\n12\n</code></pre> \u4e0b\u4e00\u7bc7\uff1a\u7eaf\u6570\u5b66\u5de5\u5177</p>"},{"location":"API/linalg/","title":"\u7ebf\u6027\u4ee3\u6570","text":""},{"location":"API/linalg/#transpose","title":"transpose","text":"<p>Matrix transpose()</p> <p>\u83b7\u53d6\u77e9\u9635\u5bf9\u5e94\u7684\u8f6c\u7f6e\u77e9\u9635</p>"},{"location":"API/linalg/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1]\n  ]);\n  mt.transpose().visible();\n}\n</code></pre>"},{"location":"API/linalg/#output","title":"output","text":"<pre><code>[\n [  1   3   9]\n [  4  -2   0]\n [  5   1   1]\n]\n</code></pre>"},{"location":"API/linalg/#trace","title":"trace","text":"<p>double trace()</p> <p>\u83b7\u53d6\u77e9\u9635\u6700\u5c0f\u7ef4\u5ea6\u4e0b\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6570\u636e\u7684\u548c\uff0c\u65b9\u9635\u4e2d\u7684\u8ff9</p>"},{"location":"API/linalg/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  print(mt.trace());\n}\n</code></pre>"},{"location":"API/linalg/#output_1","title":"output","text":"<pre><code>0.0\n</code></pre>"},{"location":"API/linalg/#bool-get-issquare","title":"bool get isSquare","text":"<p>\u5224\u65ad\u77e9\u9635\u662f\u4e0d\u662f\u65b9\u9635\uff0c\u5373row == column</p>"},{"location":"API/linalg/#coincidental","title":"coincidental","text":"<p>Matrix coincidental({required int row, required int column})</p> <p>\u83b7\u53d6\u4f59\u5b50\u5f0f\uff0c\u5373\u53bb\u6389\u67d0\u884c\u548c\u67d0\u5217\u800c\u62fc\u6210\u7684\u77e9\u9635</p>"},{"location":"API/linalg/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  mt.coincidental(row: 0, column: 1).visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_2","title":"output","text":"<pre><code>[\n [  3   1]\n [  9   1]\n [  5   2]\n]\n</code></pre>"},{"location":"API/linalg/#elementary_exchange","title":"elementary_exchange","text":"<p>void elementary_exchange({required int index1, required int index2, bool horizontal = true})</p> <p>\u521d\u7b49\u53d8\u6362\u2014\u2014\u4ea4\u6362\u884c\u6216\u8005\u5217</p>"},{"location":"API/linalg/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.0f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  mt\n    ..elementary_exchange(index1: 3, index2: 2, horizontal: true)\n    ..visible()\n    ..elementary_exchange(index1: 0, index2: 1, horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_3","title":"output","text":"<pre><code>[\n [  1   4   5]\n [  3  -2   1]\n [  5   3   2]\n [  9   0   1]\n]\n[\n [  4   1   5]\n [ -2   3   1]\n [  3   5   2]\n [  0   9   1]\n]\n</code></pre>"},{"location":"API/linalg/#elementary_multiply","title":"elementary_multiply","text":"<p>void elementary_multiply({required int index, required double number, bool horizontal = true})</p> <p>\u521d\u7b49\u53d8\u6362\u2014\u2014\u500d\u4e58\u884c\u6216\u8005\u5217</p>"},{"location":"API/linalg/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  mt\n    ..elementary_multiply(index: 1, number: 2.0, horizontal: false)..visible()\n    ..elementary_multiply(index: 1, number: 0.5, horizontal: true)..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_4","title":"output","text":"<pre><code>[\n [ 1.00  8.00  5.00]\n [ 3.00 -4.00  1.00]\n [ 9.00  0.00  1.00]\n [ 5.00  6.00  2.00]\n]\n[\n [ 1.00  8.00  5.00]\n [ 1.50 -2.00  0.50]\n [ 9.00  0.00  1.00]\n [ 5.00  6.00  2.00]\n]\n</code></pre>"},{"location":"API/linalg/#elementary_add","title":"elementary_add","text":"<p>void elementary_add({required int index1, required int index2, required double number, bool horizontal = true})</p> <p>\u521d\u7b49\u53d8\u6362\u2014\u2014\u628a\u67d0\u884c\u6216\u8005\u5217\u7684\u500d\u4e58\u52a0\u5230\u53e6\u4e00\u884c\u6216\u8005\u5217</p>"},{"location":"API/linalg/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  mt\n    ..elementary_add(index1: 1, index2: 2, number: 1, horizontal: true)\n    ..visible()\n    ..elementary_add(index1: 2, index2: 1, number: 3, horizontal: false)\n    ..visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_5","title":"output","text":"<pre><code>[\n [ 1.00  4.00  5.00]\n [12.00 -2.00  2.00]\n [ 9.00  0.00  1.00]\n [ 5.00  3.00  2.00]\n]\n[\n [ 1.00  4.00 17.00]\n [12.00 -2.00 -4.00]\n [ 9.00  0.00  1.00]\n [ 5.00  3.00 11.00]\n]\n</code></pre>"},{"location":"API/linalg/#dot","title":"dot","text":"<p>Matrix dot({required Matrix other})</p> <p>\u5de6\u884c\u53f3\u5217\u505a\u77e9\u9635\u5185\u79ef\uff0c\u5fc5\u987b\u6ee1\u8db3$A_(mn)$\u548c$B_(nk)$\u7684\u5f62\u72b6</p>"},{"location":"API/linalg/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  var mt1 = Matrix.fromList(\n    [[1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],]\n  );\n  mt.dot(other: mt1).visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_6","title":"output","text":"<pre><code>[\n [58.00 -4.00 14.00]\n [ 6.00 16.00 14.00]\n [18.00 36.00 46.00]\n [32.00 14.00 30.00]\n]\n</code></pre>"},{"location":"API/linalg/#kronecker","title":"kronecker","text":"<p>Matrix kronecker({required Matrix other})</p> <p>\u5173\u4e8e\u514b\u7f57\u5185\u514b\u79ef</p>"},{"location":"API/linalg/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],\n    [5, 3, 2]\n  ]);\n  var mt1 = Matrix.fromList(\n    [[1, 4, 5],\n    [3, -2, 1],\n    [9, 0, 1],]\n  );\n  mt.kronecker(other: mt1).visible();\n}\n</code></pre>"},{"location":"API/linalg/#output_7","title":"output","text":"<pre><code>[\n [  1.00   4.00   5.00   4.00  16.00  20.00   5.00  20.00  25.00]\n [  3.00  -2.00   1.00  12.00  -8.00   4.00  15.00 -10.00   5.00]\n [  9.00   0.00   1.00  36.00   0.00   4.00  45.00   0.00   5.00]\n [  3.00  12.00  15.00  -2.00  -8.00 -10.00   1.00   4.00   5.00]\n [  9.00  -6.00   3.00  -6.00   4.00  -2.00   3.00  -2.00   1.00]\n [ 27.00   0.00   3.00 -18.00  -0.00  -2.00   9.00   0.00   1.00]\n [  9.00  36.00  45.00   0.00   0.00   0.00   1.00   4.00   5.00]\n [ 27.00 -18.00   9.00   0.00  -0.00   0.00   3.00  -2.00   1.00]\n [ 81.00   0.00   9.00   0.00   0.00   0.00   9.00   0.00   1.00]\n [  5.00  20.00  25.00   3.00  12.00  15.00   2.00   8.00  10.00]\n [ 15.00 -10.00   5.00   9.00  -6.00   3.00   6.00  -4.00   2.00]\n [ 45.00   0.00   5.00  27.00   0.00   3.00  18.00   0.00   2.00]\n]\n</code></pre>"},{"location":"API/linalg/#double-get-det","title":"double get det","text":"<p>\u6c42\u65b9\u9635\u7684\u884c\u5217\u5f0f\u503c\uff0c\u57fa\u4e8e\u9ad8\u65af\u6d88\u5143\u6cd5</p>"},{"location":"API/linalg/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5, 5],\n    [3, -2, 1, 3],\n    [9, 0, 1, 2],\n    [5, 3, 2, -5]\n  ]);\n  print(mt.det);\n}\n</code></pre>"},{"location":"API/linalg/#output_8","title":"output","text":"<pre><code>-708.0\n</code></pre>"},{"location":"API/linalg/#matrix-get-adjugate","title":"Matrix get adjugate","text":"<p>\u83b7\u53d6\u65b9\u9635\u7684\u4f34\u968f\u77e9\u9635</p>"},{"location":"API/linalg/#test_9","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%5.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5, 5],\n    [3, -2, 1, 3],\n    [9, 0, 1, 2],\n    [5, 3, 2, -5]\n  ]);\n  print(mt.adjugate);\n}\n</code></pre>"},{"location":"API/linalg/#output_9","title":"output","text":"<pre><code>[\n [   15.00    21.00   -84.00    -6.00]\n [  -67.00   331.00  -144.00    74.00]\n [  -47.00  -349.00   216.00  -170.00]\n [  -44.00    80.00   -84.00   112.00]\n]\n</code></pre>"},{"location":"API/linalg/#matrix-get-inverse","title":"Matrix get inverse","text":"<p>\u83b7\u53d6\u975e\u5947\u5f02\u77e9\u9635\u7684\u9006\u77e9\u9635</p>"},{"location":"API/linalg/#test_10","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%5.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5, 5],\n    [3, -2, 1, 3],\n    [9, 0, 1, 2],\n    [5, 3, 2, -5]\n  ]);\n  print(mt.inverse);\n}\n</code></pre>"},{"location":"API/linalg/#output_10","title":"output","text":"<pre><code>[\n [   -0.02    -0.03     0.12     0.01]\n [    0.09    -0.47     0.20    -0.10]\n [    0.07     0.49    -0.31     0.24]\n [    0.06    -0.11     0.12    -0.16]\n]\n</code></pre>"},{"location":"API/linalg/#matrix-get-rref","title":"Matrix get rref","text":"<p>\u83b7\u53d6\u77e9\u9635\u5bf9\u5e94\u7684\u884c\u6700\u7b80\u5f62\u77e9\u9635</p>"},{"location":"API/linalg/#int-get-rank","title":"int get rank","text":"<p>\u77e9\u9635\u7684\u79e9</p>"},{"location":"API/linalg/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%5.2f\";\n  var mt = Matrix.fromList([\n    [1, 4, 5, 5],\n    [3, -2, 1, 3],\n    [9, 0, 1, 2],\n    [5, 3, 2, -5]\n  ]);\n  print(mt.rank);\n  mt[3] = [1 - 9, 4 - 0, 5 - 1, 5 - 2]; // row_index0 - row_index2\n  print(mt.det);\n  print(mt.rank);\n}\n</code></pre>"},{"location":"API/linalg/#output_11","title":"output","text":"<pre><code>4\n0.0\n3\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u590d\u6570\u7c7b</p>"},{"location":"API/math/","title":"\u7eaf\u6570\u5b66\u5de5\u5177","text":""},{"location":"API/math/#min","title":"min","text":"<p>Object min({int dim = -1})</p> <p>\u83b7\u53d6\u6700\u5c0f\u503c \u6ce8\u610f\uff1adouble.nan\u4e5f\u4f1a\u53c2\u4e0e\u5230\u6bd4\u8f83\u4e2d\uff0c\u56e0\u6b64\u8981\u63d0\u524d\u5904\u7406\uff0c\u5f88\u591a\u64cd\u4f5c\u90fd\u9700\u6ce8\u610f</p>"},{"location":"API/math/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, -double.infinity, 9],\n    [5, 6, 3, double.nan],\n    [1, 2, 3, double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.min(dim: 0));\n  print(mt.min(dim: 1));\n  print(mt.min(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output","title":"output","text":"<pre><code>[0.0, -Infinity, NaN, 1.0]\n[0.0, 1.0, -Infinity, NaN]\nNaN\n</code></pre>"},{"location":"API/math/#max","title":"max","text":"<p>Object max({int dim = -1})</p> <p>\u83b7\u53d6\u6700\u5c0f\u503c</p>"},{"location":"API/math/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, double.infinity, 9],\n    [5, 6, 3, double.nan],\n    [1, 2, 3, -double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.max(dim: 0));\n  print(mt.max(dim: 1));\n  print(mt.max(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output_1","title":"output","text":"<pre><code>[9.0, Infinity, NaN, 3.0]\n[5.0, 6.0, Infinity, NaN]\nNaN\n</code></pre>"},{"location":"API/math/#argmin","title":"argmin","text":"<p>Object argmin({int dim = -1})</p> <p>\u83b7\u53d6\u6700\u5c0f\u503c\u7d22\u5f15\uff0c\u5982\u679c\u591a\u4e2a\u76f8\u540c\uff0c\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a</p>"},{"location":"API/math/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, -double.infinity, 9],\n    [5, 6, 3, -32],\n    [1, 2, 3, -double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.argmin(dim: 0));\n  print(mt.argmin(dim: 1));\n  print(mt.argmin(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output_2","title":"output","text":"<pre><code>[2, 2, 3, 3]\n[1, 0, 1, 3]\n6\n</code></pre>"},{"location":"API/math/#argmin_1","title":"argmin","text":"<p>Object argmin({int dim = -1})</p> <p>\u83b7\u53d6\u6700\u5927\u503c\u7d22\u5f15\uff0c\u5982\u679c\u591a\u4e2a\u76f8\u540c\uff0c\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a</p>"},{"location":"API/math/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, -double.infinity, 9],\n    [5, 6, 3, -32],\n    [1, 2, 3, -double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.argmax(dim: 0));\n  print(mt.argmax(dim: 1));\n  print(mt.argmax(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output_3","title":"output","text":"<pre><code>[3, 3, 1, 2]\n[2, 2, 2, 0]\n3\n</code></pre>"},{"location":"API/math/#get_range","title":"get_range","text":"<p>Object get_range({int dim = -1})</p> <p>\u83b7\u53d6\u6570\u636e\u8303\u56f4</p>"},{"location":"API/math/#test_4","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, -double.infinity, 9],\n    [5, 6, 3, -32],\n    [1, 2, 3, -double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.get_range(dim: 0));\n  print(mt.get_range(dim: 1));\n  print(mt.get_range(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output_4","title":"output","text":"<pre><code>[[0.0, 9.0], [-Infinity, 9.0], [-32.0, 6.0], [-Infinity, 3.0]]\n[[0.0, 5.0], [1.0, 6.0], [-Infinity, 3.0], [-Infinity, 9.0]]\n[-Infinity, 9.0]\n</code></pre>"},{"location":"API/math/#sum","title":"sum","text":"<p>Object sum({int dim = -1})</p> <p>\u6570\u636e\u6c42\u548c</p>"},{"location":"API/math/#test_5","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.1f\";\n  List&lt;List&lt;double&gt;&gt; data = [\n    [4, 1, 0, 9],\n    [0, 3, -double.infinity, 9],\n    [5, 6, 3, -32],\n    [1, 2, 3, -double.infinity],\n  ];\n  var mt = Matrix.fromList(data);\n  print(mt.sum(dim: 0));\n  print(mt.sum(dim: 1));\n  mt.setMask(nag_inf_mask: 0);\n  print(mt.sum(dim: 11));\n}\n</code></pre>"},{"location":"API/math/#output_5","title":"output","text":"<pre><code>[14.0, -Infinity, -18.0, -Infinity]\n[10.0, 12.0, -Infinity, -Infinity]\n14.0\n</code></pre>"},{"location":"API/math/#_2","title":"\u57fa\u7840\u6570\u5b66\u51fd\u6570\u96c6\u5408","text":"<pre><code>Matrix get sin =&gt; _math_basement_single_realize(0);  // \u6b63\u5f26\u51fd\u6570\nMatrix get cos =&gt; _math_basement_single_realize(1);  // \u4f59\u5f26\u51fd\u6570\nMatrix get tan =&gt; _math_basement_single_realize(2);  // \u6b63\u5207\u51fd\u6570\nMatrix get asin =&gt; _math_basement_single_realize(3);  // \u53cd\u6b63\u5f26\u51fd\u6570\nMatrix get acos =&gt; _math_basement_single_realize(4);  // \u53cd\u4f59\u5f26\u51fd\u6570\nMatrix get atan =&gt; _math_basement_single_realize(5);  // \u53cd\u6b63\u5207\u51fd\u6570\nMatrix get sinh =&gt; _math_basement_single_realize(6);  // \u53cc\u66f2\u6b63\u5f26\u51fd\u6570\nMatrix get cosh =&gt; _math_basement_single_realize(7);  // \u53cc\u66f2\u4f59\u5f26\u51fd\u6570\nMatrix get tanh =&gt; _math_basement_single_realize(8);  // \u53cc\u66f2\u6b63\u5207\u51fd\u6570\nMatrix get asinh =&gt; _math_basement_single_realize(9);  // \u53cd\u53cc\u66f2\u6b63\u5f26\u51fd\u6570\nMatrix get acosh =&gt; _math_basement_single_realize(10);  // \u53cd\u53cc\u66f2\u4f59\u5f26\u51fd\u6570\nMatrix get atanh =&gt; _math_basement_single_realize(11);  // \u53cd\u53cc\u66f2\u6b63\u5207\u51fd\u6570\nMatrix get exp =&gt; _math_basement_single_realize(12);  // e^(x)\nMatrix get log =&gt; _math_basement_single_realize(13);  // ln(x)\nMatrix get sqrt =&gt; _math_basement_single_realize(14);  // \u4e8c\u6b21\u5f00\u6839\nMatrix get log10 =&gt; _math_basement_single_realize(15);  // \u4ee510\u4e3a\u5e95\u6570\u7684\u5bf9\u6570\u51fd\u6570\nMatrix get square =&gt; _math_basement_single_realize(16);  // \u5e73\u65b9\nMatrix get cube =&gt; _math_basement_single_realize(17);  // \u4e09\u6b21\u65b9\nMatrix get abs =&gt; _math_basement_single_realize(18);  // \u7edd\u5bf9\u503c\nMatrix get ceil =&gt; _math_basement_single_realize(19);  // \u5411\u4e0a\u53d6\u6574\nMatrix get floor =&gt; _math_basement_single_realize(20);  // \u5411\u4e0b\u53d6\u6574\nMatrix get round =&gt; _math_basement_single_realize(21);  // \u56db\u820d\u4e94\u5165\u51fd\u6570\nMatrix get degree =&gt; _math_basement_single_realize(22);  // \u5f27\u5ea6\u8f6c\u89d2\u5ea6\nMatrix get radian =&gt; _math_basement_single_realize(23);  // \u89d2\u5ea6\u8f6c\u5f27\u5ea6\n</code></pre>"},{"location":"API/math/#test_6","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.5f\";\n  Matrix matrix = Matrix([\n    [0.0, pi / 2, pi],\n    [-pi / 4, -1.0, 1.0],\n    [2.0, -2.0, 0.5]\n  ]);\n  print('----------------------------------------');\n  matrix.visible(start_point: 'Original Matrix', end_point: '----------------------------------------');\n  matrix.sin.visible(start_point: 'func \"sin\"', end_point: '----------------------------------------');\n  matrix.cos.visible(start_point: 'func \"cos\"', end_point: '----------------------------------------');\n  // \u6ce8\u610f\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u8ba1\u7b97\u7cbe\u5ea6\u4e0d\u8db3\u5f15\u8d77\u7684\u610f\u5916\u503c\uff0ctan(pi / 2)\n  matrix.tan.visible(start_point: 'func \"tan\"', end_point: '----------------------------------------');\n  matrix.asin.visible(start_point: 'func \"asin\"', end_point: '----------------------------------------');\n  matrix.acos.visible(start_point: 'func \"acos\"', end_point: '----------------------------------------');\n  matrix.atan.visible(start_point: 'func \"atan\"', end_point: '----------------------------------------');\n  matrix.sinh.visible(start_point: 'func \"sinh\"', end_point: '----------------------------------------');\n  matrix.cosh.visible(start_point: 'func \"cosh\"', end_point: '----------------------------------------');\n  matrix.tanh.visible(start_point: 'func \"tanh\"', end_point: '----------------------------------------');\n  matrix.asinh.visible(start_point: 'func \"asinh\"', end_point: '----------------------------------------');\n  matrix.acosh.visible(start_point: 'func \"acosh\"', end_point: '----------------------------------------');\n  matrix.atanh.visible(start_point: 'func \"atanh\"', end_point: '----------------------------------------');\n  matrix.exp.visible(start_point: 'func \"exp\"', end_point: '----------------------------------------');\n  matrix.log.visible(start_point: 'func \"log (ln)\"', end_point: '----------------------------------------');\n  matrix.sqrt.visible(start_point: 'func \"sqrt\"', end_point: '----------------------------------------');\n  matrix.log10.visible(start_point: 'func \"log10\"', end_point: '----------------------------------------');\n  matrix.square.visible(start_point: 'func \"square\"', end_point: '----------------------------------------');\n  matrix.cube.visible(start_point: 'func \"cube\"', end_point: '----------------------------------------');\n  matrix.abs.visible(start_point: 'func \"abs\"', end_point: '----------------------------------------');\n  matrix.ceil.visible(start_point: 'func \"ceil\"', end_point: '----------------------------------------');\n  matrix.floor.visible(start_point: 'func \"floor\"', end_point: '----------------------------------------');\n  matrix.round.visible(start_point: 'func \"round\"', end_point: '----------------------------------------');\n  matrix.degree.visible(start_point: 'func \"degree\"', end_point: '----------------------------------------');\n  matrix.radian.visible(start_point: 'func \"radian\"', end_point: '----------------------------------------');\n}\n</code></pre>"},{"location":"API/math/#output_6","title":"output","text":"<pre><code>----------------------------------------\nOriginal Matrix\n[\n [  0.00000   1.57080   3.14159]\n [ -0.78540  -1.00000   1.00000]\n [  2.00000  -2.00000   0.50000]\n]\n----------------------------------------\nfunc \"sin\"\n[\n [  0.00000   1.00000   0.00000]\n [ -0.70711  -0.84147   0.84147]\n [  0.90930  -0.90930   0.47943]\n]\n----------------------------------------\nfunc \"cos\"\n[\n [  1.00000   0.00000  -1.00000]\n [  0.70711   0.54030   0.54030]\n [ -0.41615  -0.41615   0.87758]\n]\n----------------------------------------\nfunc \"tan\"\n[\n [  0.00000 16331239353195370.00000  -0.00000]\n [ -1.00000  -1.55741   1.55741]\n [ -2.18504   2.18504   0.54630]\n]\n----------------------------------------\nfunc \"asin\"\n[\n [  0.00000       NaN       NaN]\n [ -0.90334  -1.57080   1.57080]\n [      NaN       NaN   0.52360]\n]\n----------------------------------------\nfunc \"acos\"\n[\n [  1.57080       NaN       NaN]\n [  2.47414   3.14159   0.00000]\n [      NaN       NaN   1.04720]\n]\n----------------------------------------\nfunc \"atan\"\n[\n [  0.00000   1.00388   1.26263]\n [ -0.66577  -0.78540   0.78540]\n [  1.10715  -1.10715   0.46365]\n]\n----------------------------------------\nfunc \"sinh\"\n[\n [  0.00000   2.30130  11.54874]\n [ -0.86867  -1.17520   1.17520]\n [  3.62686  -3.62686   0.52110]\n]\n----------------------------------------\nfunc \"cosh\"\n[\n [  1.00000   2.50918  11.59195]\n [  1.32461   1.54308   1.54308]\n [  3.76220   3.76220   1.12763]\n]\n----------------------------------------\nfunc \"tanh\"\n[\n [  0.00000   0.91715   0.99627]\n [ -0.65579  -0.76159   0.76159]\n [  0.96403  -0.96403   0.46212]\n]\n----------------------------------------\nfunc \"asinh\"\n[\n [  0.00000   1.23340   1.86230]\n [ -0.72123  -0.88137   0.88137]\n [  1.44364  -1.44364   0.48121]\n]\n----------------------------------------\nfunc \"acosh\"\n[\n [      NaN   1.02323   1.81153]\n [      NaN       NaN   0.00000]\n [  1.31696       NaN       NaN]\n]\n----------------------------------------\nfunc \"atanh\"\n[\n [  0.00000       NaN       NaN]\n [ -1.05931 -Infinity  Infinity]\n [      NaN       NaN   0.54931]\n]\n----------------------------------------\nfunc \"exp\"\n[\n [  1.00000   4.81048  23.14069]\n [  0.45594   0.36788   2.71828]\n [  7.38906   0.13534   1.64872]\n]\n----------------------------------------\nfunc \"log (ln)\"\n[\n [-Infinity   0.45158   1.14473]\n [      NaN       NaN   0.00000]\n [  0.69315       NaN  -0.69315]\n]\n----------------------------------------\nfunc \"sqrt\"\n[\n [  0.00000   1.25331   1.77245]\n [      NaN       NaN   1.00000]\n [  1.41421       NaN   0.70711]\n]\n----------------------------------------\nfunc \"log10\"\n[\n [-Infinity   0.19612   0.49715]\n [      NaN       NaN   0.00000]\n [  0.30103       NaN  -0.30103]\n]\n----------------------------------------\nfunc \"square\"\n[\n [  0.00000   2.46740   9.86960]\n [  0.61685   1.00000   1.00000]\n [  4.00000   4.00000   0.25000]\n]\n----------------------------------------\nfunc \"cube\"\n[\n [  0.00000   3.87578  31.00628]\n [ -0.48447  -1.00000   1.00000]\n [  8.00000  -8.00000   0.12500]\n]\n----------------------------------------\nfunc \"abs\"\n[\n [  0.00000   1.57080   3.14159]\n [  0.78540   1.00000   1.00000]\n [  2.00000   2.00000   0.50000]\n]\n----------------------------------------\nfunc \"ceil\"\n[\n [  0.00000   2.00000   4.00000]\n [ -0.00000  -1.00000   1.00000]\n [  2.00000  -2.00000   1.00000]\n]\n----------------------------------------\nfunc \"floor\"\n[\n [  0.00000   1.00000   3.00000]\n [ -1.00000  -1.00000   1.00000]\n [  2.00000  -2.00000   0.00000]\n]\n----------------------------------------\nfunc \"round\"\n[\n [  0.00000   2.00000   3.00000]\n [ -1.00000  -1.00000   1.00000]\n [  2.00000  -2.00000   1.00000]\n]\n----------------------------------------\nfunc \"degree\"\n[\n [  0.00000  90.00000 180.00000]\n [-45.00000 -57.29578  57.29578]\n [114.59156 -114.59156  28.64789]\n]\n----------------------------------------\nfunc \"radian\"\n[\n [  0.00000   0.02742   0.05483]\n [ -0.01371  -0.01745   0.01745]\n [  0.03491  -0.03491   0.00873]\n]\n----------------------------------------\n</code></pre>"},{"location":"API/math/#power","title":"power","text":"<p>Matrix power({required double number, bool reverse = false})</p> <p>\u77e9\u9635\u6570\u636e\u7684\u5e42\u6b21\u65b9\uff0c\u5982\u679c\u53cd\u8f6c\u5219\u8868\u793a\u6570\u636e\u7684\u77e9\u9635\u6570\u636e\u6b21\u65b9</p>"},{"location":"API/math/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.5f\";\n  Matrix matrix = Matrix.fromList([\n    [1, 2, 3],\n    [3, 7, 9]\n  ]);\n  matrix.power(number: 0.5, reverse: false).visible();\n  matrix.power(number: 0.5, reverse: true).visible();\n}\n</code></pre>"},{"location":"API/math/#output_7","title":"output","text":"<pre><code>[\n [  1.00000   1.41421   1.73205]\n [  1.73205   2.64575   3.00000]\n]\n[\n [  0.50000   0.25000   0.12500]\n [  0.12500   0.00781   0.00195]\n]\n</code></pre>"},{"location":"API/math/#atan2","title":"atan2","text":"<p>Matrix atan2({required double number, bool reverse = false})</p> <p>\u56db\u8c61\u9650\u7684\u53cd\u6b63\u5207\u51fd\u6570</p>"},{"location":"API/math/#test_8","title":"test","text":"<pre><code>import 'dart:math';\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%3.5f\";\n  Matrix matrix = Matrix.fromList([\n    [1, -1, 0],\n  ]);\n  matrix.atan2(number: -1, reverse: false).visible();\n  matrix.atan2(number: -1, reverse: true).visible();\n  matrix.atan2(number: -1, reverse: false).degree.visible();\n  matrix.atan2(number: -1, reverse: true).degree.visible();\n}\n</code></pre>"},{"location":"API/math/#output_8","title":"output","text":"<pre><code>[\n [  2.35619  -2.35619   3.14159]\n]\n[\n [ -0.78540  -2.35619  -1.57080]\n]\n[\n [135.00000 -135.00000 180.00000]\n]\n[\n [-45.00000 -135.00000 -90.00000]\n]\n</code></pre>"},{"location":"API/math/#diff","title":"diff","text":"<p>Matrix diff(double Function(double) func)</p> <p>\u4e2d\u5fc3\u5dee\u5206\u51fd\u6570\uff0c\u501f\u9274\u4e8eGSL2.8 \u6848\u4f8b\u8bf7\u67e5\u770b\uff1acustomize</p>"},{"location":"API/math/#dft_complex","title":"dft_complex","text":"<p>Matrix dft_complex()</p> <p>\u64cd\u4f5c\u77e9\u9635\u5fc5\u987b\u662f<code>row*2</code>\u5f62\u72b6\uff0c\u5c06\u77e9\u9635\u6bcf\u884c\u89c6\u4e3a\u590d\u6570\u7684\u5b9e\u90e8\u548c\u865a\u90e8\u5e76\u8fdb\u884c\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362</p>"},{"location":"API/math/#test_9","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  Matrix matrix = MatrixGeometry.curve(func: (x) =&gt; cos(x), x1: 0, x2: 1, size: 20)..visible();\n  matrix.dft_complex().visible();\n}\n</code></pre>"},{"location":"API/math/#output_9","title":"output","text":"<pre><code>[\n [ 0.00  1.00]\n [ 0.05  1.00]\n [ 0.11  0.99]\n [ 0.16  0.99]\n [ 0.21  0.98]\n [ 0.26  0.97]\n [ 0.32  0.95]\n [ 0.37  0.93]\n [ 0.42  0.91]\n [ 0.47  0.89]\n [ 0.53  0.86]\n [ 0.58  0.84]\n [ 0.63  0.81]\n [ 0.68  0.77]\n [ 0.74  0.74]\n [ 0.79  0.70]\n [ 0.84  0.67]\n [ 0.89  0.63]\n [ 0.95  0.58]\n [ 1.00  0.54]\n]\n[\n [10.00 16.75]\n [ 1.11  3.09]\n [ 0.26  1.75]\n [-0.03  1.23]\n [-0.18  0.94]\n [-0.27  0.76]\n [-0.34  0.62]\n [-0.40  0.51]\n [-0.44  0.41]\n [-0.49  0.32]\n [-0.53  0.24]\n [-0.57  0.16]\n [-0.61  0.07]\n [-0.66 -0.03]\n [-0.71 -0.15]\n [-0.78 -0.30]\n [-0.87 -0.51]\n [-1.02 -0.84]\n [-1.31 -1.49]\n [-2.17 -3.55]\n]\n</code></pre>"},{"location":"API/math/#fft_complex","title":"fft_complex","text":"<p>Matrix fft_complex()</p> <p>\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u7248\u672c\uff0c\u5fc5\u987b\u4fdd\u8bc1row\u5927\u5c0f\u662f\u4e0d\u5c0f\u4e8e2\u4e14\u662f2\u7684\u5e42\u6b21\u65b9</p>"},{"location":"API/math/#test_10","title":"test","text":"<pre><code>import 'dart:math';\n\nimport 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  Matrix matrix = MatrixGeometry.curve(func: (x) =&gt; cos(x), x1: 0, x2: 1, size: 16)..visible();\n  matrix.fft_complex().visible();\n}\n</code></pre>"},{"location":"API/math/#output_10","title":"output","text":"<pre><code>[\n [ 0.00  1.00]\n [ 0.07  1.00]\n [ 0.13  0.99]\n [ 0.20  0.98]\n [ 0.27  0.96]\n [ 0.33  0.94]\n [ 0.40  0.92]\n [ 0.47  0.89]\n [ 0.53  0.86]\n [ 0.60  0.83]\n [ 0.67  0.79]\n [ 0.73  0.74]\n [ 0.80  0.70]\n [ 0.87  0.65]\n [ 0.93  0.60]\n [ 1.00  0.54]\n]\n[\n [ 8.00 13.39]\n [ 0.81  2.55]\n [ 0.10  1.45]\n [-0.15  1.01]\n [-0.27  0.76]\n [-0.36  0.59]\n [-0.43  0.46]\n [-0.48  0.35]\n [-0.53  0.24]\n [-0.58  0.14]\n [-0.64  0.02]\n [-0.71 -0.12]\n [-0.79 -0.30]\n [-0.92 -0.59]\n [-1.16 -1.13]\n [-1.87 -2.82]\n]\n</code></pre>"},{"location":"API/math/#dft","title":"dft","text":"<p>List&gt; dft() <p>dft\u662f\u4e8c\u7ef4\u77e9\u9635\u7684\u79bb\u6563\u5085\u91cc\u53f6\u53d8\u6362\uff0c\u64cd\u4f5c\u5bf9\u8c61\u662f\u6bcf\u4e2a\u5b9e\u6570\u6570\u636e\u70b9\uff0c\u751f\u6210\u7684\u662f\u5904\u7406\u597d\u7684\u590d\u6570\u4e8c\u7ef4\u5217\u8868</p>"},{"location":"API/math/#test_11","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  Matrix matrix = Matrix.linspace(start: 0, end: 1, row: 1, column: 20)..visible();\n  Matrix cos_ = matrix.cos..visible();\n  print(cos_.dft());\n}\n</code></pre>"},{"location":"API/math/#output_11","title":"output","text":"<pre><code>[\n [ 0.00  0.05  0.11  0.16  0.21  0.26  0.32  0.37  0.42  0.47  0.53  0.58  0.63  0.68  0.74  0.79  0.84  0.89  0.95  1.00]\n]\n[\n [ 1.00  1.00  0.99  0.99  0.98  0.97  0.95  0.93  0.91  0.89  0.86  0.84  0.81  0.77  0.74  0.70  0.67  0.63  0.58  0.54]\n]\n[[Complex(16.75440903166811, 0.0), Complex(-0.22811740242052814, -1.6397084473410628), Complex(0.13183474464253353, -0.7823464082156386), Complex(0.1967357416501282, -0.496947233565983), Complex(0.21922035792340794, -0.3480366366936396), Complex(0.2294742441387881, -0.2527066108991086), Complex(0.23488177535739072, -0.1835420189577598), Complex(0.23795253166182712, -0.12869438763744284), Complex(0.2397154208503811, -0.08205846872985462), Complex(0.24063637522371917, -0.039997759504330294), Complex(0.2409233902765915, -3.069124650216493e-15), Complex(0.2406363752237164, 0.03999775950432752), Complex(0.23971542085038544, 0.08205846872986033), Complex(0.23795253166180874, 0.1286943876374329), Complex(0.2348817753573971, 0.18354201895776023), Complex(0.22947424413878847, 0.25270661089910473), Complex(0.21922035792341624, 0.34803663669363605), Complex(0.196735741650134, 0.4969472335659874), Complex(0.1318347446425323, 0.782346408215624), Complex(-0.22811740242051415, 1.6397084473410648)]]\n</code></pre>"},{"location":"API/math/#sgn","title":"sgn","text":"<p>Matrix get sgn</p> <p>\u83b7\u53d6\u77e9\u9635\u5bf9\u5e94\u7684\u7b26\u53f7\u51fd\u6570</p>"},{"location":"API/math/#test_12","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.laplace(mu: 1, b: 2, row: 2, column: 8);\n  mt.visible();\n  mt.sgn.visible();\n}\n</code></pre>"},{"location":"API/math/#output_12","title":"output","text":"<pre><code>[\n [ 0.63595  0.57515 -3.06091  0.67230 -1.37556 -3.20570 -0.28827  2.26668]\n [ 0.59497  5.35408  1.40507  0.77545  1.43645 -0.57416  0.24745  1.44789]\n]\n[\n [ 1.00000  1.00000 -1.00000  1.00000 -1.00000 -1.00000 -1.00000  1.00000]\n [ 1.00000  1.00000  1.00000  1.00000  1.00000 -1.00000  1.00000  1.00000]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1</p>"},{"location":"API/ml/","title":"\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u5de5\u5177\u7684\u7b80\u5355\u5b9e\u73b0It's on testing!!!","text":""},{"location":"API/random/","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":""},{"location":"API/random/#mean","title":"mean","text":"<p>Object mean({int dim = -1})</p> <p>\u6c42\u5747\u503c</p>"},{"location":"API/random/#test","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fromList([\n    [1, 2, 3, 4],\n    [double.infinity, 2, 2, 3],\n    [0, 4, 6, -2]\n  ]);\n  print(mt.mean(dim: 0));\n  print(mt.mean(dim: 1));\n  print(mt.mean(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output","title":"output","text":"<pre><code>[2.5, Infinity, 2.0]\n[Infinity, 2.0, 2.75, 1.25]\nInfinity\n</code></pre>"},{"location":"API/random/#median","title":"median","text":"<p>Object median({int dim = -1})</p> <p>\u6c42\u4e2d\u4f4d\u6570</p>"},{"location":"API/random/#test_1","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fromList([\n    [1, 2, 3, 4, 6, 7, 10],\n    [double.infinity, 2, 2, 3, 4, 7, -65],\n    [0, 4, 6, -2, 1, -2, -2]\n  ]);\n  print(mt.median(dim: 0));\n  print(mt.median(dim: 1));\n  print(mt.median(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output_1","title":"output","text":"<pre><code>[4.0, 3.0, 0.0]\n[1.0, 2.0, 3.0, 3.0, 4.0, 7.0, -2.0]\n3.0\n</code></pre>"},{"location":"API/random/#mode","title":"mode","text":"<p>Object mode({int dim = -1})</p> <p>\u6c42\u4f17\u6570</p>"},{"location":"API/random/#test_2","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fromList([\n    [1, 2, 3, 4, 6, 7, 10],\n    [double.infinity, 2, 2, 3, 4, 7, -65],\n    [0, 4, 6, -2, 1, -2, -2],\n    [double.infinity, 2, 2, 3, 4, 7, -65],\n  ]);\n  print(mt.mode(dim: 0));\n  print(mt.mode(dim: 1));\n  print(mt.mode(dim: 2));\n}\n</code></pre>"},{"location":"API/random/#output_2","title":"output","text":"<pre><code>[1.0, 2.0, -2.0, 2.0]\n[Infinity, 2.0, 2.0, 3.0, 4.0, 7.0, -65.0]\n2.0\n</code></pre>"},{"location":"API/random/#shuffle","title":"shuffle","text":"<p>void shuffle({int? seed, int dim = -1})</p> <p>\u968f\u673a\u6253\u4e71\uff0cseed\u662f\u968f\u65f6\u6570\u79cd\u5b50</p>"},{"location":"API/random/#test_3","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  data_format = \"%2.2f\";\n  Matrix.linspace(start: 0, end: 1, row: 5, column: 10)..visible();\n  var m12 = Matrix.linspace(start: 0, end: 1, row: 5, column: 10);\n  var m13 = Matrix.linspace(start: 0, end: 1, row: 5, column: 10);\n  var m14 = Matrix.linspace(start: 0, end: 1, row: 5, column: 10);\n  m12..shuffle(dim: 0)..visible();\n  m13..shuffle(dim: 1)..visible();\n  m14..shuffle(dim: 10)..visible();\n}\n</code></pre>"},{"location":"API/random/#output_3","title":"output","text":"<pre><code>[\n [ 0.00  0.02  0.04  0.06  0.08  0.10  0.12  0.14  0.16  0.18]\n [ 0.20  0.22  0.24  0.27  0.29  0.31  0.33  0.35  0.37  0.39]\n [ 0.41  0.43  0.45  0.47  0.49  0.51  0.53  0.55  0.57  0.59]\n [ 0.61  0.63  0.65  0.67  0.69  0.71  0.73  0.76  0.78  0.80]\n [ 0.82  0.84  0.86  0.88  0.90  0.92  0.94  0.96  0.98  1.00]\n]\n[\n [ 0.06  0.18  0.14  0.16  0.02  0.12  0.08  0.04  0.10  0.00]\n [ 0.29  0.20  0.39  0.31  0.22  0.35  0.37  0.27  0.24  0.33]\n [ 0.41  0.47  0.57  0.49  0.51  0.55  0.43  0.45  0.59  0.53]\n [ 0.67  0.73  0.63  0.71  0.61  0.65  0.76  0.80  0.69  0.78]\n [ 1.00  0.94  0.98  0.92  0.96  0.88  0.90  0.86  0.84  0.82]\n]\n[\n [ 0.20  0.84  0.04  0.27  0.29  0.92  0.53  0.35  0.98  0.80]\n [ 0.82  0.22  0.24  0.06  0.90  0.51  0.94  0.96  0.16  0.18]\n [ 0.41  0.02  0.86  0.88  0.49  0.31  0.12  0.76  0.57  0.39]\n [ 0.00  0.63  0.45  0.67  0.08  0.10  0.73  0.14  0.78  1.00]\n [ 0.61  0.43  0.65  0.47  0.69  0.71  0.33  0.55  0.37  0.59]\n]\n[\n [ 0.55  0.41  0.96  0.27  0.92  0.82  0.57  0.39  0.73  0.63]\n [ 0.88  0.29  0.43  0.98  0.22  0.78  0.94  0.45  0.76  0.37]\n [ 0.69  0.16  0.84  1.00  0.90  0.71  0.20  0.51  0.53  0.49]\n [ 0.08  0.33  0.65  0.31  0.10  0.59  0.18  0.02  0.86  0.67]\n [ 0.80  0.04  0.61  0.06  0.35  0.14  0.00  0.47  0.12  0.24]\n]\n</code></pre>"},{"location":"API/random/#uniform","title":"uniform","text":"<p>static Matrix uniform({double lb = 0.0, double ub = 1.0, required int row, required int column, int? seed})</p> <p>\u5747\u5300\u5206\u5e03</p>"},{"location":"API/random/#test_4","title":"test","text":"<pre><code>import 'package:flutter/material.dart';\nimport 'package:fl_chart/fl_chart.dart';\nimport 'flutter_matrix.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key});\n\n  @override\n  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  // \u751f\u62101K\u4e2a\u6807\u51c6\u5747\u5300\u5206\u5e03\u7684\u6570\u636e\u5e76\u4e14\u4f7f\u7528\u67f1\u72b6\u56fe\u53ef\u89c6\u5316\n  static Matrix datas = MatrixRandom.uniform(row: 1, column: 1000, seed: 42);\n  static Map&lt;List&lt;double&gt;, int&gt; maps = datas.toHist(start: 0.0, end: 1.0, counts: 10);\n  var ls = maps.keys.toList();\n\n  FlTitlesData get titlesData =&gt; FlTitlesData(\n    show: true,\n    bottomTitles: AxisTitles(\n      sideTitles: SideTitles(\n        showTitles: true,\n        reservedSize: 30,\n        getTitlesWidget: getTitles,\n      ),\n    ),\n    leftTitles: AxisTitles(\n      sideTitles: SideTitles(\n        showTitles: true, // \u8bbe\u7f6e\u4e3a true \u663e\u793a\u5de6\u4fa7 Y \u8f74\u523b\u5ea6\n        reservedSize: 40, // \u7559\u51fa\u7a7a\u95f4\n        interval: 3, // \u8bbe\u7f6e\u523b\u5ea6\u95f4\u9694\n        getTitlesWidget: getLeftTitles, // \u81ea\u5b9a\u4e49\u5de6\u4fa7\u523b\u5ea6\u6807\u7b7e\n      ),\n    ),\n    topTitles: const AxisTitles(\n      sideTitles: SideTitles(showTitles: false),\n    ),\n    rightTitles: const AxisTitles(\n      sideTitles: SideTitles(showTitles: false),\n    ),\n  );\n\n  // \u81ea\u5b9a\u4e49 Y \u8f74\u523b\u5ea6\u6807\u7b7e\n  Widget getLeftTitles(double value, TitleMeta meta) {\n    final style = TextStyle(\n      fontWeight: FontWeight.bold,\n      fontSize: 14,\n    );\n    String text;\n    if (value % 3 == 0) { // \u4ec5\u5728\u6307\u5b9a\u523b\u5ea6\u663e\u793a\u6807\u7b7e\n      text = value.toInt().toString();\n    } else {\n      text = '';\n    }\n    return SideTitleWidget(\n      meta: meta,\n      space: 4,\n      child: Text(text, style: style),\n    );\n  }\n\n  Widget getTitles(double value, TitleMeta meta) {\n    final style = TextStyle(\n      fontWeight: FontWeight.bold,\n      fontSize: 14,\n    );\n    String text = ls[value.toInt()].toString();\n    return SideTitleWidget(\n      meta: meta,\n      space: 4,\n      child: Text(text, style: style),\n    );\n  }\n\n  List&lt;BarChartGroupData&gt; buildGroup(){\n    return List&lt;BarChartGroupData&gt;.generate(ls.length, (r){\n      return BarChartGroupData(\n        x: r,\n        barRods: [\n          BarChartRodData(toY: maps.values.elementAt(r).toDouble()),\n        ]\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: BarChart(\n          BarChartData(\n            barGroups: buildGroup(),\n            titlesData: titlesData,\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>"},{"location":"API/random/#output_4","title":"output","text":""},{"location":"API/random/#normal","title":"normal","text":"<p>static Matrix normal({double mu = 0.0, double sigma = 1.0, required int row, required int column, int? seed})</p> <p>\u6b63\u6001\u5206\u5e03</p>"},{"location":"API/random/#test_5","title":"test","text":"<pre><code>static Matrix datas = MatrixRandom.normal(row: 1, column: 10000, seed: 42);\nstatic Map&lt;List&lt;double&gt;, int&gt; maps = datas.toHist(start: -10.0, end: 10.0, counts: 100);\nvar ls = maps.keys.toList();\n</code></pre>"},{"location":"API/random/#output_5","title":"output","text":""},{"location":"API/random/#shake_total","title":"shake_total","text":"<p>void shake_total({double bias = 1.0, int? seed})</p> <p>\u5bf9\u6574\u4f53\u6570\u636e\u968f\u673a\u4e0a\u4e0b\u9650\u6296\u52a8\u6700\u5927abs(bias)\u503c</p>"},{"location":"API/random/#test_6","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fill(number: 2, row: 4, column: 6)..visible();\n  mt..shake_total(bias: 1, seed: 3)..visible();\n}\n</code></pre>"},{"location":"API/random/#output_6","title":"output","text":"<pre><code>[\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n]\n[\n [1.84526 1.93082 1.21542 1.07671 2.73399 1.04996]\n [2.86985 1.04787 2.03070 2.86932 1.36468 2.91896]\n [2.23152 2.47494 2.37738 2.75460 1.98057 2.90156]\n [1.61362 1.21451 2.29266 1.64790 2.31230 1.48668]\n]\n</code></pre>"},{"location":"API/random/#shake_percent","title":"shake_percent","text":"<p>void shake_percent({double bias = 1.0, double percent = 0.5, int? seed})</p> <p>\u968f\u673a\u6296\u52a8percent\u5360\u6bd4\u7684\u6570\u636e</p>"},{"location":"API/random/#test_7","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fill(number: 2, row: 4, column: 6)..visible();\n  mt..shake_percent(bias: 1, seed: 3, percent: 0.5)..visible();\n  print(mt.count((x) =&gt; x == 2) == 4 * 6 ~/ 2);\n} \n</code></pre>"},{"location":"API/random/#output_7","title":"output","text":"<pre><code>[\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n]\n[\n [2.00000 2.00000 1.04996 1.04787 2.00000 1.21542]\n [1.07671 2.00000 2.00000 2.86932 1.36468 2.03070]\n [1.93082 2.86985 2.00000 2.91896 2.00000 2.00000]\n [1.84526 2.00000 2.73399 2.00000 2.00000 2.00000]\n]\ntrue\n</code></pre>"},{"location":"API/random/#shake_probably","title":"shake_probably","text":"<p>void shake_probably({double bias = 1.0, double p = 0.5, int? seed})</p> <p>\u6309\u7167\u6982\u7387\u5bf9\u6570\u636e\u968f\u673a\u6296\u52a8</p>"},{"location":"API/random/#test_8","title":"test","text":"<pre><code>import 'package:flutter_matrix/matrix_type.dart';\n\nmain() {\n  var mt = Matrix.fill(number: 2, row: 4, column: 6)..visible();\n  mt..shake_probably(bias: 1, seed: 3, p: 0.25)..visible();\n} \n</code></pre>"},{"location":"API/random/#output_8","title":"output","text":"<pre><code>[\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n]\n[\n [2.00000 1.19765 2.00000 1.59960 2.00000 2.00000]\n [2.00000 2.00000 2.00000 1.29358 2.16905 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n [2.00000 2.00000 2.00000 2.00000 2.00000 2.00000]\n]\n</code></pre>"},{"location":"API/random/#binomial","title":"binomial","text":"<p>static Matrix binomial({required int n, required double p, required int row, required int column, int? seed})</p> <p>\u4e8c\u9879\u5f0f\u5206\u5e03\uff08\u4f2f\u52aa\u5229\u5206\u5e03\uff09\uff0c\u5176\u4e2dn\u662f\u8bd5\u9a8c\u6b21\u6570\uff0cp\u662f\u6210\u529f\u7684\u6982\u7387\u3002</p>"},{"location":"API/random/#test_9","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = '%2.0f';\n  var mt = MatrixRandom.binomial(n: 10, p: 0.6, row: 3, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_9","title":"output","text":"<pre><code>[\n [  9   5   6   6   6   7]\n [  6   7   6   5   5   6]\n [  5   5   7   4   9   6]\n]\n</code></pre>"},{"location":"API/random/#chisquare","title":"chisquare","text":"<p>static Matrix chisquare({ required int df, required int row, required int column, int? seed })</p> <p>\u5361\u65b9\u5206\u5e03\uff0c\u5176\u4e2d\u6b63\u6574\u6570df\u662f\u81ea\u7531\u5ea6\u3002</p>"},{"location":"API/random/#test_10","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  var mt = MatrixRandom.chisquare(df: 3, row: 3, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_10","title":"output","text":"<pre><code>[\n [5.42309 5.67948 0.43278 9.90406 0.08491 0.75004]\n [0.69392 1.83211 4.31445 3.21911 9.51412 7.66674]\n [4.24697 0.43563 1.39504 4.06116 0.95671 3.23452]\n]\n</code></pre>"},{"location":"API/random/#exponential","title":"exponential","text":"<p>static Matrix exponential({ required double lambda, required int row, required int column, int? seed })</p> <p>\u6307\u6570\u5206\u5e03\uff0c\u6b63\u5b9e\u6570\u03bb\u662f\u901f\u7387\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_11","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  var mt = MatrixRandom.exponential(lambda: 3, row: 3, column: 7);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_11","title":"output","text":"<pre><code>[\n [0.59205 0.30458 0.44661 0.37097 0.68382 0.37191 0.19418]\n [0.87269 0.48058 0.11004 0.41595 0.09100 0.68939 0.04317]\n [0.08204 0.16524 1.15535 0.70234 0.04674 0.30218 0.07011]\n]\n</code></pre>"},{"location":"API/random/#f","title":"f","text":"<p>static Matrix f({ required int d1, required int d2, required int row, required int column, int? seed })</p> <p>F \u5206\u5e03\u3002\u5176\u4e2d d1 \u548c d2 ] \u662f\u4e24\u4e2a\u72ec\u7acb\u5361\u65b9\u5206\u5e03\u7684\u81ea\u7531\u5ea6\u3002</p>"},{"location":"API/random/#test_12","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.f(d1: 3, d2: 4, row: 4, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_12","title":"output","text":"<pre><code>[\n [ 0.92346  0.66244  3.03371  0.18384  0.63915  0.97611]\n [ 0.91794  0.54395  0.33545  1.28692  0.01852  1.13263]\n [ 2.17837  0.24876  3.40228  0.11621  0.76633  0.47811]\n [ 1.02146  4.00121  0.25865  2.29399  2.07985  0.07998]\n]\n</code></pre>"},{"location":"API/random/#gamma","title":"gamma","text":"<p>static Matrix gamma({ required double k, required double theta, required int row, required int column, int? seed })</p> <p>\u4f3d\u9a6c\u5206\u5e03\uff0c\u5176\u4e2dk\u662f\u5f62\u72b6\u53c2\u6570\uff0ctheta\u662f\u5c3a\u5ea6\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_13","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.gamma(k: 2.3, theta: 1.2, row: 2, column: 9);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_13","title":"output","text":"<pre><code>[\n [ 1.97898  2.11548  1.97235  2.01070  1.97023  2.15622  1.96931  1.96695  1.97193]\n [ 1.99453  1.98793  1.98049  1.99853  2.01608  2.06490  1.96879  2.18777  2.01119]\n]\n</code></pre>"},{"location":"API/random/#beta","title":"beta","text":"<p>static Matrix beta({ required double a, required double b, required int row, required int column, int? seed })</p> <p>\u8d1d\u5854\u5206\u5e03\uff0c\u53c2\u6570a\u548cb\u5206\u522b\u662f\u5206\u5b50\u548c\u5206\u6bcd\u7684\u5f62\u72b6\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_14","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.beta(a: 1.4, b: 1.5, row: 3, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_14","title":"output","text":"<pre><code>[\n [ 0.49674  0.47748  0.49000  0.51771  0.48358  0.53437]\n [ 0.47219  0.48763  0.47852  0.48319  0.45656  0.46501]\n [ 0.47745  0.47656  0.47766  0.48641  0.46924  0.47451]\n]\n</code></pre>"},{"location":"API/random/#dirichlet","title":"dirichlet","text":"<p>static Matrix dirichlet({ required List alpha, required int row, int? seed }) <p>\u72c4\u5229\u514b\u96f7\u5206\u5e03\uff0calpha\u53c2\u6570\u662f\u957f\u5ea6\u4e3a\u5217\u4e14\u4e0d\u5c0f\u4e8e2\u7684\u6d6e\u70b9\u5e8f\u5217\uff0calpha\u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u5fc5\u987b\u5927\u4e8e0\u3002</p>"},{"location":"API/random/#test_15","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.dirichlet(alpha: [2, 3, 4, 5, 2, 1, 1, 9], row: 5);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_15","title":"output","text":"<pre><code>[\n [ 0.06777  0.10927  0.14974  0.19033  0.06799  0.02707  0.03108  0.35675]\n [ 0.06782  0.10716  0.15432  0.18717  0.07829  0.02750  0.02718  0.35056]\n [ 0.07176  0.11077  0.14973  0.19066  0.06803  0.02759  0.02731  0.35416]\n [ 0.06923  0.10830  0.15226  0.19454  0.06776  0.02710  0.02705  0.35375]\n [ 0.06978  0.10861  0.14912  0.19070  0.06796  0.03449  0.02751  0.35182]\n]\n</code></pre>"},{"location":"API/random/#geometric","title":"geometric","text":"<p>static Matrix geometric({ required double p, required int row, required int column, int? seed })</p> <p>\u51e0\u4f55\u5206\u5e03\uff0c\u5176\u4e2dp\u662f\u6210\u529f\u7684\u6982\u7387\u3002</p>"},{"location":"API/random/#test_16","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = MatrixRandom.geometric(p: 0.1, row: 4, column: 7);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_16","title":"output","text":"<pre><code>[\n [  1   3   1   1  33   2  15]\n [  4   3   2   6   1  12  18]\n [ 24   2   6   9  33   7   2]\n [  6   7  11   5  16   4  10]\n]\n</code></pre>"},{"location":"API/random/#gumbel","title":"gumbel","text":"<p>static Matrix gumbel({ required double loc, required double scale, required int row, required int column, int? seed })</p> <p>\u803f\u8d1d\u5c14\u5206\u5e03\uff0c\u5176\u4e2dloc\u662f\u5206\u5e03\u7684\u4f17\u6570\u7684\u4f4d\u7f6e\uff0cscale\u662f\u5206\u5e03\u7684\u5c3a\u5ea6\u53c2\u6570\uff0c\u5e76\u4e14\u5fc5\u987b\u4e3a\u975e\u8d1f\u6570\u3002</p>"},{"location":"API/random/#test_17","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.gumbel(loc: 0, scale: 1, row: 2, column: 9);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_17","title":"output","text":"<pre><code>[\n [-0.22699 -0.70834  2.46328 -0.27267  1.13736 -0.50648  0.10226  1.58143  3.05194]\n [ 1.54331 -0.05892  0.14372  3.15481  0.44702  0.25944 -0.13567  0.74313  0.23801]\n]\n</code></pre>"},{"location":"API/random/#hypergeometric","title":"hypergeometric","text":"<p>static Matrix hypergeometric({ required int N, required int K, required int n, required int row, required int column, int? seed })</p> <p>\u8d85\u51e0\u4f55\u5206\u5e03\uff0c\u53c2\u6570N\u3001K\u3001n\u5206\u522b\u8868\u793a\u5143\u7d20\u603b\u6570\u3001\u76ee\u6807\u5143\u7d20\u603b\u6570\u3001\u62bd\u53d6\u7684\u6837\u672c\u6570\uff0c\u6700\u7ec8\u5f97\u5230\u6837\u672c\u4e2d\u76ee\u6807\u5143\u7d20\u7684\u6570\u91cf\u3002</p>"},{"location":"API/random/#test_18","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = MatrixRandom.hypergeometric(N: 100, K: 10, n: 50, row: 6, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_18","title":"output","text":"<pre><code>[\n [  2   8   6   6   5   3]\n [  4   4   2   7   3   5]\n [  6   2   2   7   6   3]\n [  3   5   5   7   6   7]\n [  7   8   6   7   5   5]\n [  5   4   7   8   4   3]\n]\n</code></pre>"},{"location":"API/random/#laplace","title":"laplace","text":"<p>static Matrix laplace({ required double mu, required double b, required int row, required int column, int? seed })</p> <p>\u62c9\u666e\u62c9\u65af\u5206\u5e03\uff0c\u53c8\u79f0\u53cc\u6307\u6570\u5206\u5e03\uff0cmu\u662f\u4f4d\u7f6e\u53c2\u6570\uff0c\u975e\u8d1f\u6570b\u662f\u5c3a\u5ea6\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_19","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.laplace(mu: 1, b: 2, row: 2, column: 8);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_19","title":"output","text":"<pre><code>[\n [ 5.15415  2.07610 -1.37176 -2.41060 -0.99129  3.98637  0.31916  0.24522]\n [ 3.38619  4.86480 -1.78386  0.54009 -4.79726  4.24814  2.09560  2.00870]\n]\n</code></pre>"},{"location":"API/random/#logistic","title":"logistic","text":"<p>static Matrix logistic({ required double mu, required double s, required int row, required int column, int? seed })</p> <p>\u903b\u8f91\u5206\u5e03\uff0c\u5176\u4e2dmu\u548cs\u5206\u522b\u662f\u4f4d\u7f6e\u53c2\u6570\u548c\u5c3a\u5ea6\u53c2\u6570\uff0cs\u5927\u4e8e0\u3002</p>"},{"location":"API/random/#test_20","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.logistic(mu: 0, s: 1, row: 5, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_20","title":"output","text":"<pre><code>[\n [-2.34886 -0.62398 -0.72241 -0.47850 -3.57510  1.69050]\n [-0.65039  2.70643 -3.55987 -0.00253 -1.33383 -1.94184]\n [ 1.59177  2.44618  0.56556 -2.60605 -2.48145  0.41531]\n [-0.63856  0.37617  0.94475 -2.98747  3.46455  0.92113]\n [ 0.43686 -1.55776  1.55957  0.78217 -1.36549 -1.23248]\n]\n</code></pre>"},{"location":"API/random/#lognormal","title":"lognormal","text":"<p>static Matrix lognormal({ required double mu, required double sigma, required int row, required int column, int? seed })</p> <p>\u5bf9\u6570\u6b63\u6001\u5206\u5e03\uff0c\u5176\u4e2dmu\u548csigma\u5206\u522b\u662f\u4f4d\u7f6e\u53c2\u6570\u548c\u5c3a\u5ea6\u53c2\u6570\uff0csigma\u5927\u4e8e0\u3002</p>"},{"location":"API/random/#test_21","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  var mt = MatrixRandom.lognormal(mu: 0, sigma: 1, row: 5, column: 6);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_21","title":"output","text":"<pre><code>[\n [ 0.37147  0.43134  2.04398  0.59404  0.89507  0.46283]\n [ 0.25305  3.53500  2.45734  0.25765  0.91990  1.25516]\n [ 1.50877  2.68362  1.31308  2.22121  0.44431  1.59400]\n [ 2.17962  4.71739  0.97841  0.41853  0.75954  1.39914]\n [ 0.30549  1.09713  2.18105  0.99588  8.03950  1.81075]\n]\n</code></pre>"},{"location":"API/random/#multinomial","title":"multinomial","text":"<p>static Matrix multinomial({ required int n, required List p, required int row, int? seed }) <p>\u591a\u9879\u5f0f\u5206\u5e03\uff0c\u5176\u4e2dn\u8868\u793a\u5b9e\u9a8c\u6b21\u6570\uff0cp\u662f\u6982\u7387\u5217\u8868\u4e14\u548c\u4e3a1\u3002</p>"},{"location":"API/random/#test_22","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.0f\";\n  var mt = MatrixRandom.multinomial(n: 8, p: [0.15, 0.2, 0.1, 0.35, 0.05, 0.15], row: 5);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_22","title":"output","text":"<pre><code>[\n [  2   2   1   3   0   0]\n [  1   5   0   1   0   1]\n [  0   1   0   4   1   2]\n [  2   0   0   3   1   2]\n [  1   2   1   3   1   0]\n]\n</code></pre>"},{"location":"API/random/#poisson","title":"poisson","text":"<p>static Matrix poisson({ required double lambda, required int row, required int column, int? seed })</p> <p>\u6cca\u677e\u5206\u5e03\uff0c\u53c2\u6570lambda\u8868\u793a\u5e73\u5747\u503c\u3002</p>"},{"location":"API/random/#test_23","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.5f\";\n  MatrixRandom.poisson(lambda: 3, row: 5, column: 9).visible();\n}\n</code></pre>"},{"location":"API/random/#output_23","title":"output","text":"<pre><code>[\n [ 2.00000  7.00000  4.00000  3.00000  5.00000  5.00000  1.00000  3.00000  7.00000]\n [ 1.00000  1.00000  2.00000  3.00000  5.00000  0.00000  2.00000  3.00000  5.00000]\n [ 2.00000  4.00000  0.00000  0.00000  5.00000  1.00000  2.00000  2.00000  4.00000]\n [ 1.00000  3.00000  5.00000  5.00000  4.00000  2.00000  4.00000  3.00000  5.00000]\n [ 4.00000  3.00000  1.00000  2.00000  2.00000  3.00000  0.00000  2.00000  6.00000]\n]\n</code></pre>"},{"location":"API/random/#cauchy","title":"cauchy","text":"<p>static Matrix cauchy({ required double x0, required double gamma, required int row, required int column, int? seed })</p> <p>\u67ef\u897f\u5206\u5e03\uff0c\u53c2\u6570x0\u662f\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u6b63\u6570gamma\u8868\u793a\u89c4\u6a21\u3002</p>"},{"location":"API/random/#test_24","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.cauchy(x0: 0, gamma: 1, row: 3, column: 7).visible();  // stand-cauchy-distribution.\n}\n</code></pre>"},{"location":"API/random/#output_24","title":"output","text":"<pre><code>[\n [ -0.12131   9.06796  -3.06638   0.83097   1.10302  -0.78527  -1.10908]\n [  0.44494   5.59788  -5.16476  -3.09094   0.01960   2.58699   0.27861]\n [  0.01088  -0.87127  -2.68039  -0.02322   1.45664  -0.32921   0.25879]\n]\n</code></pre>"},{"location":"API/random/#pareto","title":"pareto","text":"<p>static Matrix pareto({ required double xm, required double alpha, required int row, required int column, int? seed })</p> <p>\u5e15\u7d2f\u6258\u5206\u5e03\uff0cxm\u662f\u89c4\u6a21\u53c2\u6570\uff0c\u6b63\u6570alpha\u662f\u5f62\u72b6\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_25","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%3.5f\";\n  MatrixRandom.pareto(xm: 0.5, alpha: 2, row: 3, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_25","title":"output","text":"<pre><code>[\n [  1.63208   0.51504   0.51024   0.98437   0.52300   1.09564   1.39615   1.12143]\n [  0.66684   1.17252   0.50457   0.52373   0.61724   0.57446   0.66170   0.62191]\n [  0.51333   0.51563   0.66283   0.50024   0.52752   0.96687   0.63692   0.71290]\n]\n</code></pre>"},{"location":"API/random/#rayleigh","title":"rayleigh","text":"<p>static Matrix rayleigh({ required double sigma, required int row, required int column, int? seed })</p> <p>\u745e\u5229\u5206\u5e03\uff0c\u6b63\u6570sigma\u662f\u89c4\u6a21\u53c2\u6570\u3002</p>"},{"location":"API/random/#test_26","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixRandom.rayleigh(sigma: 5, row: 2, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_26","title":"output","text":"<pre><code>[\n [ 4.14  4.63 11.24 13.64 10.93  2.56  7.49  3.43]\n [ 3.73  1.64  8.93  3.25  9.83  5.23  4.97 11.78]\n]\n</code></pre>"},{"location":"API/random/#triangular","title":"triangular","text":"<p>static Matrix triangular({ required double a, required double b, required double c, required int row, required int column, int? seed })</p> <p>\u4e09\u89d2\u5206\u5e03\uff0c\u4e0b\u9650\u4e3aa\uff0c\u4e0a\u9650\u4e3ab\uff0c\u4f17\u6570\u4e3ac\u3002</p>"},{"location":"API/random/#test_27","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixRandom.triangular(a: 1, b: 8, c: 5, row: 4, column: 8).visible();\n}\n</code></pre>"},{"location":"API/random/#output_27","title":"output","text":"<pre><code>[\n [ 3.66  4.67  3.68  5.92  4.96  2.80  6.62  5.98]\n [ 7.31  3.36  6.46  2.76  4.51  6.39  4.88  2.89]\n [ 6.81  6.93  5.15  3.55  4.90  6.11  4.44  7.10]\n [ 3.94  1.76  6.95  3.74  3.87  1.95  4.79  4.48]\n]\n</code></pre>"},{"location":"API/random/#wald","title":"wald","text":"<p>static Matrix wald({ required double mu, required double lambda, required int row, required int column, int? seed })</p> <p>\u9006\u9ad8\u65af\u5206\u5e03\uff08\u4e5f\u79f0\u4e3aWald \u5206\u5e03\uff09\uff0c\u5e73\u5747\u503cmu\u548c\u5f62\u72b6\u53c2\u6570lambda\u5747\u4e3a\u6b63\u6570\u3002</p>"},{"location":"API/random/#test_28","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixRandom.wald(mu: 1, lambda: 2, row: 2, column: 6).visible();\n}\n</code></pre>"},{"location":"API/random/#output_28","title":"output","text":"<pre><code>[\n [ 0.82  0.53  0.90  1.89  1.10  1.61]\n [ 0.43  0.24  0.34  1.03  0.65  1.39]\n]\n</code></pre>"},{"location":"API/random/#weibull","title":"weibull","text":"<p>static Matrix weibull({ required double k, required double lambda, required int row, required int column, int? seed })</p> <p>\u97e6\u4f2f\u5206\u5e03\uff0c\u5c3a\u5ea6\u53c2\u6570lambda\u548c\u5f62\u72b6\u53c2\u6570k\u5747\u4e3a\u6b63\u6570\u3002</p>"},{"location":"API/random/#test_29","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixRandom.weibull(k: 1, lambda: 2, row: 2, column: 6).visible();\n}\n</code></pre>"},{"location":"API/random/#output_29","title":"output","text":"<pre><code>[\n [ 2.85  1.49  0.61  1.87  1.71  4.27]\n [ 0.57  0.12  1.19  0.36  5.12  1.33]\n]\n</code></pre>"},{"location":"API/random/#vonmises","title":"vonmises","text":"<p>static Matrix vonmises({ required double k, required double mu, required int row, required int column, int? seed })</p> <p>\u51af\u00b7\u7c73\u585e\u65af\u5206\u5e03\uff0c\u53c2\u6570mu\u548ck\u5206\u522b\u8868\u793a\u4f4d\u7f6e\u548c\u96c6\u4e2d\u5ea6\uff0ck&gt;0\u3002</p>"},{"location":"API/random/#test_30","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  MatrixRandom.vonmises(k: 1, mu: 0, row: 10, column: 10).visible();\n}\n</code></pre>"},{"location":"API/random/#output_30","title":"output","text":"<pre><code>[\n [-0.09 -0.85  0.63  0.59 -1.30  0.48  1.02  0.81 -1.13 -0.08]\n [ 0.51 -1.47 -0.11  0.69 -0.19 -0.04  0.49  0.96  0.20  0.82]\n [-1.12 -0.84 -1.13  1.60  0.21 -0.55 -0.43  1.27 -1.41  1.64]\n [-0.96 -1.76 -0.65  0.37 -0.57  0.09  0.30 -1.70  1.50 -0.22]\n [-0.49  0.26 -0.54 -0.96  0.31 -0.89 -0.20 -1.15  0.23  0.55]\n [ 1.09 -1.07  1.56  0.63  1.03  1.44 -1.46  0.61 -0.30  0.27]\n [ 0.51  0.92 -1.11 -0.41 -1.37 -0.98  0.62 -0.66 -0.60  0.80]\n [-0.55 -0.76 -0.45  0.42  0.01  0.13 -0.97  0.75 -0.94 -0.38]\n [ 0.08 -0.89 -0.50  1.46  0.99  1.55  1.19 -1.71 -1.11  1.09]\n [-1.14 -1.00 -1.91 -0.24  1.22 -0.36 -0.81 -0.55 -0.30  1.06]\n]\n</code></pre>"},{"location":"API/random/#t","title":"t","text":"<p>static Matrix t({ required int v, required double mu, required int row, required int column, int? seed })</p> <p>\u5b66\u751ft\u5206\u5e03\uff0c\u6b63\u6574\u6570v\u8868\u793a\u81ea\u7531\u5ea6\uff0cmu\u662f\u975e\u4e2d\u5fc3\u53c2\u6570</p>"},{"location":"API/random/#test_31","title":"test","text":"<pre><code>import '../lib/flutter_matrix.dart';\n\nmain(){\n  data_format = \"%2.2f\";\n  var mt = MatrixRandom.t(v: 2, mu: 0, row: 5, column: 8);\n  mt.visible();\n}\n</code></pre>"},{"location":"API/random/#output_31","title":"output","text":"<pre><code>[\n [-0.40 -0.42 -1.23 -2.11 -0.63 -0.29 -7.35  1.27]\n [-0.62  0.82  0.98  1.41 -1.53 -4.18 -2.16  0.29]\n [ 3.05 -1.58 -0.14 -1.29 -4.22 -4.17 -2.38  0.54]\n [ 1.11  0.37 -0.79  2.72 -0.19  0.70 -0.38 -1.37]\n [-0.36 -1.06 -1.33  1.33 -4.32  0.73 -1.34  0.06]\n]\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u7ebf\u6027\u4ee3\u6570</p>"},{"location":"API/visualization/","title":"\u53ef\u89c6\u5316\u5904\u7406","text":""},{"location":"API/visualization/#tohist","title":"toHist","text":"<p>Map toHist({required double start, required double end, required int counts }) <p>\u8f6c\u76f4\u65b9\u56fe \u6848\u4f8b\u8bf7\u53c2\u8003uniform</p>"},{"location":"API/visualization/#tobar","title":"toBar","text":"<p>Map toBar() <p>\u8f6c\u67f1\u72b6\u56fe\uff08\u6216\u8005\u662f\u6761\u5f62\u56fe\uff09</p>"},{"location":"API/visualization/#test","title":"test","text":"<pre><code>import '../flutter_matrix.dart';\n\nmain() {\n  var mt = Matrix.fromList([\n    [1, 2, 3, 4, 2, 1],\n    [3, 4, 6, 0, 0, 3],\n    [1, 5, 8, 4, 2, 3],\n    [3, 4, 8, 9, 9, 5],\n  ]);\n  print(mt.toBar());\n}\n</code></pre>"},{"location":"API/visualization/#output","title":"output","text":"<pre><code>{1.0: 3, 2.0: 3, 3.0: 5, 4.0: 4, 6.0: 1, 0.0: 2, 5.0: 2, 8.0: 2, 9.0: 2}\n</code></pre> <p>\u4e0b\u4e00\u7bc7\uff1a\u673a\u5668\u5b66\u4e60\u5de5\u5177\u6d4b\u8bd5</p>"}]}